package acar.cont;


import java.sql.*;
import java.util.*;
import acar.database.*;
import acar.car_office.*;
import acar.common.*;
import acar.util.*;

public class AddContDatabase
{
	private Connection conn = null;
	public static AddContDatabase db;
	
	public static AddContDatabase getInstance()
	{
		if(AddContDatabase.db == null)
			AddContDatabase.db = new AddContDatabase();
		return AddContDatabase.db;
	}	
	
 	private DBConnectionManager connMgr = null;

    private void getConnection()
    {
    	try
    	{
	    	if(connMgr == null)
				connMgr = DBConnectionManager.getInstance();
			if(conn == null)
			{
	        	conn = connMgr.getConnection("acar");
	        }
	    }catch(Exception e){
	    	System.out.println(" i can't get a connection........");
	    }
	}
	
	private void closeConnection()
	{
		if ( conn != null ) 
		{
			connMgr.freeConnection("acar", conn);
			conn = null;
		}		
	}

	//계약 검색 : 리스트 조회(cont,car_reg,client,fee,users,car_pur,car_etc,allot)
	public Vector getContList(String s_kd, String t_wd, String s_brch, String cont_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector rtn = new Vector();
		String query = "";		
       	query = " select "+
				" decode(j.cls_st, '','신규', j.cls_st) RENT_ST, j.cls_st,"+
			 	" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.use_yn, a.bus_id2, a.mng_id,"+
				" decode(a.rent_dt, '','', substr(a.rent_dt, 1, 4) || '-' || substr(a.rent_dt, 5, 2) || '-'||substr(a.rent_dt, 7, 2)) RENT_DT, "+
				" decode(a.dlv_dt, '','', substr(a.dlv_dt, 1, 4) || '-' || substr(a.dlv_dt, 5, 2) || '-'||substr(a.dlv_dt, 7, 2)) DLV_DT, "+						
			 	" c.client_nm, nvl(c.firm_nm, c.client_nm) as FIRM_NM,"+
				" e.br_id,"+
				" decode(b.init_reg_dt, null,'미등록', substr(b.init_reg_dt, 1, 4) || '-' || substr(b.init_reg_dt, 5, 2) || '-'||substr(b.init_reg_dt, 7, 2)) as INIT_REG_DT,"+
				" decode(b.init_reg_dt, null,'id', 'ud') as REG_GUBUN,"+
				" b.car_no, b.car_num,"+
				" decode(d.rent_way, '','미지정', '1','일반식', '2','맞춤식') as RENT_WAY,"+ 
				" d.rent_way, d.con_mon,"+
				" decode(d.rent_start_dt, '','', substr(d.rent_start_dt, 1, 4) || '-' || substr(d.rent_start_dt, 5, 2) || '-'||substr(d.rent_start_dt, 7, 2)) RENT_START_DT,"+						
				" decode(d.rent_end_dt, '','', substr(d.rent_end_dt, 1, 4) || '-' || substr(d.rent_end_dt, 5, 2) || '-'||substr(d.rent_end_dt, 7, 2)) RENT_END_DT,"+
				" g.car_id,"+
				" decode(f.reg_ext_dt, '','', substr(f.reg_ext_dt, 1, 4) || '-' || substr(f.reg_ext_dt, 5, 2) || '-'||substr(f.reg_ext_dt, 7, 2)) REG_EXT_DT,"+						
				" f.rpt_no,"+
				" i.cpt_cd"+
				" from cont a, car_reg b, client c, fee d, users e, car_pur f, car_etc g, allot i, cls_cont j"+
				" where "+
				" a.car_mng_id = b.car_mng_id(+) "+
				" and a.client_id = c.client_id  "+
				" and a.rent_mng_id = d.rent_mng_id(+) "+
				" and a.rent_l_cd = d.rent_l_cd(+) "+
				" and a.bus_id = e.user_id(+) "+
				" and a.rent_mng_id = f.rent_mng_id(+) "+
				" and a.rent_l_cd = f.rent_l_cd(+) "+
				" and a.rent_mng_id = g.rent_mng_id(+) "+
				" and a.rent_l_cd = g.rent_l_cd(+)  "+
				" and a.rent_mng_id = i.rent_mng_id(+) "+
				" and a.rent_l_cd = i.rent_l_cd(+)  "+
				" and a.rent_mng_id = j.rent_mng_id(+) "+
				" and a.rent_l_cd = j.rent_l_cd(+) "+
				" and a.brch_id like '%"+ s_brch +"%'";

		if(s_kd.equals("1"))			query += " and upper(nvl(a.rent_l_cd, ' ')) like upper('%"+ t_wd +"%')";
		else if(s_kd.equals("2"))		query += " and nvl(a.rent_dt, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("3"))		query += " and nvl(c.firm_nm, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("4"))		query += " and nvl(c.client_nm, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("5"))		query += " and nvl(b.car_no, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("6"))		query += " and nvl(b.init_reg_dt, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("7"))		query += " and nvl(b.car_num, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("8"))		query += " and nvl(d.con_mon, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("9"))		query += " and nvl(d.rent_start_dt, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("10"))		query += " and nvl(i.cpt_cd, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("11"))		query += " and nvl(d.rent_end_dt, ' ') like '%"+ t_wd +"%'";
		else if(s_kd.equals("12"))		query += " and nvl(bus_id2, ' ') like '%"+ t_wd +"%' ";
		else if(s_kd.equals("13"))		query += " and nvl(mng_id, ' ') like '%"+ t_wd +"%' ";

		if(cont_st.equals("0"))			query += " and a.use_yn = 'Y'"; 
		else if(cont_st.equals("1"))	query += " and j.cls_st = '1'"; 
		else if(cont_st.equals("2"))	query += " and j.cls_st = '2'"; 
		else if(cont_st.equals("3"))	query += " and j.cls_st = '3'"; 
		else if(cont_st.equals("4"))	query += " and j.cls_st = '4'"; 
		else if(cont_st.equals("5"))	query += " and j.cls_st = '5'"; 
		else if(cont_st.equals("6"))	query += " and j.cls_st = '6'"; 
		
		query +=" order by use_yn desc, rent_mng_id";

		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
            while(rs.next())
            {
				RentListBean bean = new RentListBean();

			    bean.setRent_mng_id(rs.getString("RENT_MNG_ID"));		//계약관리ID
			    bean.setRent_l_cd(rs.getString("RENT_L_CD"));			//계약코드
			    bean.setRent_dt(rs.getString("RENT_DT"));				//계약일자
			    bean.setDlv_dt(rs.getString("DLV_DT"));					//출고일자
			    bean.setClient_id(rs.getString("CLIENT_ID"));					//고객ID
			    bean.setClient_nm(rs.getString("CLIENT_NM"));					//고객 대표자명
			    bean.setFirm_nm(rs.getString("FIRM_NM"));						//상호
			    bean.setBr_id(rs.getString("BR_ID"));						//상호
			    bean.setCar_mng_id(rs.getString("CAR_MNG_ID"));					//자동차관리ID
			    bean.setInit_reg_dt(rs.getString("INIT_REG_DT"));					//최초등록일
			    bean.setReg_gubun(rs.getString("REG_GUBUN"));					//최초등록일
			    bean.setCar_no(rs.getString("CAR_NO"));						//차량번호
			    bean.setCar_num(rs.getString("CAR_NUM"));						//차대번호
			    bean.setRent_way(rs.getString("RENT_WAY"));					//대여방식
			    bean.setCon_mon(rs.getString("CON_MON"));						//대여개월
			    bean.setCar_id(rs.getString("CAR_ID"));						//차명ID
			    bean.setRent_start_dt(rs.getString("RENT_START_DT"));				//대여개시일
			    bean.setRent_end_dt(rs.getString("RENT_END_DT"));					//대여종료일
			    bean.setReg_ext_dt(rs.getString("REG_EXT_DT"));					//등록예정일?
			    bean.setRpt_no(rs.getString("RPT_NO"));						//계출번호
			    bean.setCpt_cd(rs.getString("CPT_CD"));						//은행코드
			    bean.setUse_yn(rs.getString("USE_YN"));					
			    bean.setRent_st(rs.getString("RENT_ST"));					
			    bean.setBus_id2(rs.getString("BUS_ID2"));					
			    bean.setMng_id(rs.getString("MNG_ID"));					
			    
			    rtn.add(bean);
            }
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtn;
		}
    }



	//계약 한건 검색 : cont_view 조회
	public Hashtable getContViewCase(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select a.*, cr.car_no, cr.car_nm ,cr.car_ext,  cn.car_name , g.car_id, g.car_seq, cs.r_site r_site_nm , cc.cls_dt, cc.cls_st \n"+
	   			" from   cont_n_view a, car_reg cr , car_nm cn, car_etc g , client_site  cs , cls_cont cc \n"+
				" where  a.rent_l_cd='"+rent_l_cd+"' "+
				"        and a.rent_mng_id = g.rent_mng_id(+) and a.rent_l_cd = g.rent_l_cd(+) "+
				"        and g.car_id =cn.car_id(+) and g.car_seq =cn.car_seq(+) \n "+
				"        and a.client_id = cs.client_id(+) and a.r_site_seq = cs.seq(+) "+
				"        and a.rent_mng_id = cc.rent_mng_id(+) and a.rent_l_cd = cc.rent_l_cd(+)  \n"+
				"        and  a.car_mng_id = cr.car_mng_id(+) ";
				
				
		if(!rent_mng_id.equals("")) query += " and  a.rent_mng_id='"+rent_mng_id+"'";

		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContViewCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }



	//계약 한건 검색 : cont_view 조회
	public Hashtable getContViewUseYCarCase(String car_mng_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

				 
		query = " select  a.* , cr.car_no, cr.car_nm , cs.r_site r_site_nm  \n  "+
	   			 "  from cont_n_view a, car_reg cr , client_site  cs  \n  "+
				 "    where a.car_mng_id='"+car_mng_id+"' and  a.client_id = cs.client_id(+) and a.r_site_seq = cs.seq(+)  \n "+
				 "    and  a.car_mng_id = cr.car_mng_id and nvl(a.use_yn,'Y')='Y' ";
				 
				 
		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContViewUseYCarCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//계약 한건 검색 : cont_view 조회
	public Hashtable getContViewMaxCarCase(String car_mng_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


		query = " select a.* , cr.car_no, cr.car_nm ,cr.car_ext,  cn.car_name , g.car_id, g.car_seq   \n  "+
	   			" from   cont_n_view a, car_reg cr , car_nm cn, car_etc g   \n  "+
				" where  a.car_mng_id='"+car_mng_id+"' and a.rent_mng_id = g.rent_mng_id(+) and a.rent_l_cd = g.rent_l_cd(+) and g.car_id =cn.car_id(+) and g.car_seq =cn.car_seq(+)  \n "+			
				"        and a.car_mng_id = cr.car_mng_id(+) "+
				"        and a.reg_dt||a.rent_mng_id IN (SELECT MAX(reg_dt||rent_mng_id) FROM CONT WHERE car_mng_id='"+car_mng_id+"')";
								 				 
		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContViewUseYCarCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//계약 한건 검색 : cont_view 조회
	public Hashtable getContViewOffLs8CarCase(String car_mng_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


		query = " select a.* from cont_n_view a, cls_cont b  where a.car_mng_id='"+car_mng_id+"' and a.rent_mng_id = b.rent_mng_id and a.rent_l_cd = b.rent_l_cd and b.cls_st='8' ";
					
		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContViewOffLs8CarCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	
	
	//계약 등록 : 계약관리번호 생성(cont)
	private String getNextRent_mng_id()
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String rtnStr = "";
		String query = " select nvl(ltrim(to_char(to_number(MAX(rent_mng_id))+1, '000000')), '000001') ID from cont ";
		
		try
		{	
			pstmt = conn.prepareStatement(query);
		   	rs = pstmt.executeQuery();
			while(rs.next())
			{
				rtnStr = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e){
			System.out.println("[AddContDatabase:getNextRent_mng_id]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			return rtnStr;
		}				
	}	

	/**
	 *  계약 등록 : 계약번호 생성(cont)
	 *	계약코드 앞의 7자리를 넘겨주면 뒷 5자리를 채워서 리턴
	 *	(영업소코드2자리+)연도2자리+자동차회사코드1자리+차량코드2자리+대여구분1자리+일련번호5자리
	 *		    00			 00		      0				      00		  0		        00000		*/	
	private String getNextRent_l_cd(String rent_l_cd)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String rtnStr = "";
		String query = "select '"+rent_l_cd.substring(0, 8)+"'|| nvl(ltrim(to_char(to_number(max(substr(rent_l_cd, 9, 13))+1), '00000')), '00001') ID "+
						" from cont "+
						" where rent_l_cd like '%"+rent_l_cd.substring(2, 7)+"%'";
		try
		{	
			pstmt = conn.prepareStatement(query);
		   	rs = pstmt.executeQuery();
			while(rs.next())
			{
				rtnStr = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e){
			System.out.println("[AddContDatabase:getNextRent_l_cd]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			return rtnStr;
		}			
	}

	//계약 등록 : cont 정보 처음 등록시 insert (cont)
	public ContBaseBean insertContBase(ContBaseBean base)
	{
		getConnection();
		PreparedStatement pstmt = null;

		//계약관리번호 생성 (신규계약)
		if (base.getRent_mng_id().equals(""))
		{	
			base.setRent_mng_id(getNextRent_mng_id());  
		}
		
		/* 계약번호 생성 1 (신규계약)
		 * 02년도 계약인 경우만 계약코드생성 method를 이용해 계약코드를 자동부여한다...
		 * <-- 기존계약 모두 입력한 후에 삭제되어야할 부분								*/
		if (base.getRent_l_cd().substring(2, 4).equals("02"))
		{
			base.setRent_l_cd(getNextRent_l_cd(base.getRent_l_cd().trim()));
		}

		/* 계약번호 생성 2 (재계약)
		 * 8자인 경우 계약코드생성 method를 이용해 계약코드를 자동부여한다...
		 * <-- 생성1이 아니고 생성1의 조건이 안 맞을 경우 - 재계약시 계약번호 생성		*/
		if (base.getRent_l_cd().length() == 8)
		{
			base.setRent_l_cd(getNextRent_l_cd(base.getRent_l_cd().trim()));
		}

		String query = " insert into CONT "+
						"(RENT_MNG_ID,	RENT_L_CD,	CLIENT_ID,	CAR_MNG_ID, RENT_ST, "+
						" BUS_ST,		RENT_DT,	DLV_DT,		BUS_ID,		BRCH_ID, "+
						" NOTE,			MNG_ID,		REG_DT,		REG_ID,		CAR_ST, "+
						" R_SITE,		P_ZIP,		P_ADDR,		O_MAP,		USE_YN, "+
						" R_SITE_ZIP,	R_SITE_ADDR,DRIVING_EXT,DRIVING_AGE,LOAN_EXT, "+
						" OTHERS, BUS_ID2, RENT_START_DT, CAR_JA, SCAN_FILE, DEPT_ID, "+
						" UPDATE_ID, UPDATE_DT, RENT_END_DT, GCP_KD, BACDT_KD, SPR_KD, TAX_AGNT, TAX_TYPE) values "+
						"(?, ?, ?, ?, ?, "+
						" ?, replace (?, '-', ''), replace (?, '-', ''), ?, ?, "+
						" ?, ?, to_char(sysdate,'YYYYMMDD'), ?, ?,  "+
						" ?, ?, ?, ?, 'Y', "+
						" ?, ?, ?, ?, ?,	"+
						" ?, ?, replace (?, '-', ''), ?, ?, ?, ?, to_char(sysdate,'YYYYMMDD'),replace (?, '-', ''),?,?,?, ?,?)";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, base.getRent_mng_id());
			pstmt.setString(2, base.getRent_l_cd());
			pstmt.setString(3, base.getClient_id());
			pstmt.setString(4, base.getCar_mng_id());
			pstmt.setString(5, base.getRent_st());			
			pstmt.setString(6, base.getBus_st());			
			pstmt.setString(7, base.getRent_dt());
			pstmt.setString(8, base.getDlv_dt());
			pstmt.setString(9, base.getBus_id());
			pstmt.setString(10, base.getBrch_id());			
			pstmt.setString(11, base.getNote());
			pstmt.setString(12, base.getMng_id());
			pstmt.setString(13, base.getReg_id());
			pstmt.setString(14, base.getCar_st());			
			pstmt.setString(15, base.getR_site());			
			pstmt.setString(16, base.getP_zip());
			pstmt.setString(17, base.getP_addr());
			pstmt.setString(18, base.getO_map());
			pstmt.setString(19, base.getR_site_zip());
			pstmt.setString(20, base.getR_site_addr());			
			pstmt.setString(21, base.getDriving_ext());
			pstmt.setString(22, base.getDriving_age());
			pstmt.setString(23, base.getLoan_ext());
			pstmt.setString(24, base.getOthers());						
			pstmt.setString(25, base.getBus_id2());						
			pstmt.setString(26, base.getRent_start_dt());						
			pstmt.setInt   (27, base.getCar_ja());						
			pstmt.setString(28, base.getScan_file());						
			pstmt.setString(29, base.getDept_id());						
			pstmt.setString(30, base.getUpdate_id());						
			pstmt.setString(31, base.getRent_end_dt());						
			pstmt.setString(32, base.getGcp_kd());
			pstmt.setString(33, base.getBacdt_kd());
			pstmt.setString(34, base.getSpr_kd());
			pstmt.setString(35, base.getTax_agnt());
			pstmt.setString(36, base.getTax_type());
			
		    pstmt.executeUpdate();
			pstmt.close();
			
			conn.commit();
		} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContBase]\n"+e);
	  		e.printStackTrace();
	  		base = null;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}
		
	/*  계약 등록 : cont 삽입후 관련 테이블 삽입
	 *	계약 기본 등록 후,  계약서에 관련된 5개의 테이블(car_mgr,car_pur,car_etc,fee,allot)에 해당 계약의 Row를 만들어준다.
	 *	수정과 등록이 한꺼번에 진행되기 때문.																				 */
	public boolean insertContEtcRows(String m_id, String l_cd)
	{
		int flag = 0;
		CarMgrBean mgr1 = new CarMgrBean();
			mgr1.setRent_mng_id(m_id);
			mgr1.setRent_l_cd(l_cd);
			mgr1.setMgr_id("0");
			mgr1.setMgr_st("차량이용자");
			if(!insertCarMgr(mgr1))		flag += 1;
		CarMgrBean mgr2 = new CarMgrBean();
			mgr2.setRent_mng_id(m_id);
			mgr2.setRent_l_cd(l_cd);
			mgr2.setMgr_id("1");
			mgr2.setMgr_st("차량관리자");
			if(!insertCarMgr(mgr2))		flag += 1;
		CarMgrBean mgr3 = new CarMgrBean();
			mgr3.setRent_mng_id(m_id);
			mgr3.setRent_l_cd(l_cd);
			mgr3.setMgr_id("2");
			mgr3.setMgr_st("회계관리자");
			if(!insertCarMgr(mgr3))		flag += 1;
		CarMgrBean mgr4 = new CarMgrBean();
			mgr4.setRent_mng_id(m_id);
			mgr4.setRent_l_cd(l_cd);
			mgr4.setMgr_id("3");
			mgr4.setMgr_st("계약담당자");
			if(!insertCarMgr(mgr4))		flag += 1;
		CarMgrBean mgr5 = new CarMgrBean();
			mgr5.setRent_mng_id(m_id);
			mgr5.setRent_l_cd(l_cd);
			mgr5.setMgr_id("4");
			mgr5.setMgr_st("추가운전자");
			if(!insertCarMgr(mgr5))		flag += 1;	
		ContPurBean pur = new ContPurBean();
			pur.setRent_mng_id(m_id);
			pur.setRent_l_cd(l_cd);
			if(!insertContPur(pur))		flag += 1;
		ContCarBean car = new ContCarBean();
			car.setRent_mng_id(m_id);
			car.setRent_l_cd(l_cd);
			if(!insertContCar(car))		flag += 1;		
		ContFeeBean fee = new ContFeeBean();
			fee.setRent_mng_id(m_id);
			fee.setRent_l_cd(l_cd);
			fee.setRent_st("1");		//신차대여
			if(!insertContFee(fee))		flag += 1;
		ContDebtBean debt = new ContDebtBean();
			debt.setRent_mng_id(m_id);
			debt.setRent_l_cd(l_cd);
			if(!insertContDebt(debt))	flag += 1;
		ContCarBean fee_etc = new ContCarBean();
			fee_etc.setRent_mng_id(m_id);
			fee_etc.setRent_l_cd(l_cd);
			fee_etc.setRent_st("1");	//신차대여-기타
			if(!insertFeeEtc(fee_etc))	flag += 1;

		if(flag == 0)	return true;
		else			return false;
	}

	//계약등록 : 법인고객차량관리자 삽입 (car_mgr)
	public boolean insertCarMgr(CarMgrBean mgr)
	{
		getConnection();
		boolean flag = true;
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		ResultSet rs = null;
		String rtnStr = "";
		String query = " insert into CAR_MGR (RENT_MNG_ID, RENT_L_CD, MGR_ID, MGR_ST, MGR_NM, MGR_DEPT, MGR_TITLE, MGR_TEL, MGR_M_TEL, MGR_EMAIL, EMAIL_YN, LIC_NO, LIC_ST, SSN, ETC, COM_NM, LIC_RESULT ) values "+
						"( ?, ?, ?, rtrim(?), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";
		if(mgr.getMgr_id().equals(""))
		{
			try
			{
				String qry_id = "select nvl(ltrim(to_char(to_number(MAX(mgr_id))+1, '0')), '0') ID from CAR_MGR "+
								" where  RENT_MNG_ID = '"+ mgr.getRent_mng_id()+"' and RENT_L_CD = '"+ mgr.getRent_l_cd() +"'" ;

				conn.setAutoCommit(false);
				pstmt1 = conn.prepareStatement(qry_id);
			   	rs = pstmt1.executeQuery();
				if(rs.next())
				{
					rtnStr = rs.getString(1)==null?"":rs.getString(1);
				}
				rs.close();
				pstmt1.close();

				mgr.setMgr_id(rtnStr);

				conn.commit();

			}catch(Exception e){	
	            try{
					System.out.println("[AddContDatabase:insertCarMgr]"+e);
			        conn.rollback();
					e.printStackTrace();	
					flag = false;
	            }catch(SQLException _ignored){}
			}finally{
				try{
	                if(rs != null )		rs.close();
		            if(pstmt1 != null)	pstmt1.close();
					conn.setAutoCommit(true);
				}catch(Exception ignore){}
			}
		}

		try
		{
			conn.setAutoCommit(false);

			pstmt2 = conn.prepareStatement(query);
			pstmt2.setString(1, mgr.getRent_mng_id());
			pstmt2.setString(2, mgr.getRent_l_cd());
			pstmt2.setString(3, mgr.getMgr_id());
			pstmt2.setString(4, mgr.getMgr_st());
			pstmt2.setString(5, mgr.getMgr_nm());
			pstmt2.setString(6, mgr.getMgr_dept());
			pstmt2.setString(7, mgr.getMgr_title());
			pstmt2.setString(8, mgr.getMgr_tel());
			pstmt2.setString(9, mgr.getMgr_m_tel());
			pstmt2.setString(10, mgr.getMgr_email());
			pstmt2.setString(11, mgr.getEmail_yn());
			pstmt2.setString(12, mgr.getLic_no());
			pstmt2.setString(13, mgr.getLic_st());
			pstmt2.setString(14, mgr.getSsn());
			pstmt2.setString(15, mgr.getEtc());
			pstmt2.setString(16, mgr.getCom_nm());
			pstmt2.setString(17, mgr.getLic_result());
		    pstmt2.executeUpdate();	
			pstmt2.close();
			conn.commit();
	  	}catch(Exception e){
			System.out.println("[AddContDatabase:insertCarMgr:insertCarMgr]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
	            if(pstmt2 != null)	pstmt2.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약등록 : 차량구매 삽입 (car_pur)
	public boolean insertContPur(ContPurBean pur)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into CAR_PUR (RENT_MNG_ID, RENT_L_CD, RPT_NO, DLV_BRCH, REG_EXT_DT, DLV_CON_DT, DLV_EST_DT, "+
						" TMP_DRV_NO, GDS_YN, PUR_ST, CON_AMT, CON_PAY_DT, "+
						" TRF_AMT1, TRF_PAY_DT1, TRF_AMT2, TRF_PAY_DT2, TRF_AMT3, TRF_PAY_DT3, TRF_AMT4, TRF_PAY_DT4 ) values "+
						"( ?, ?, ?, ?, replace(?, '-', ''), replace(?, '-', ''), replace(?, '-', ''),  "+
						" ?, ?, ?, ?, replace(?, '-', ''), "+
						" ?, replace(?, '-', ''), ?, replace(?, '-', ''), ?, replace(?, '-', ''), ?, replace(?, '-', ''))";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1 , pur.getRent_mng_id());
			pstmt.setString(2 , pur.getRent_l_cd());
			pstmt.setString(3 , pur.getRpt_no().trim());
			pstmt.setString(4 , pur.getDlv_brch());
			pstmt.setString(5 , pur.getReg_ext_dt());
			pstmt.setString(6 , pur.getDlv_con_dt());
			pstmt.setString(7 , pur.getDlv_est_dt());
			pstmt.setString(8 , pur.getTmp_drv_no());
			pstmt.setString(9 , pur.getGds_yn());
			pstmt.setString(10, pur.getPur_st());
			pstmt.setInt   (11, pur.getCon_amt());
			pstmt.setString(12, pur.getCon_pay_dt());
			pstmt.setInt   (13, pur.getTrf_amt1());
			pstmt.setString(14, pur.getTrf_pay_dt1());
			pstmt.setInt   (15, pur.getTrf_amt2());
			pstmt.setString(16, pur.getTrf_pay_dt2());
			pstmt.setInt   (17, pur.getTrf_amt3());
			pstmt.setString(18, pur.getTrf_pay_dt3());
			pstmt.setInt   (19, pur.getTrf_amt4());
			pstmt.setString(20, pur.getTrf_pay_dt4());
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContPur]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	//계약등록 : 차량 삽입 (car_etc)
	public boolean insertContCar(ContCarBean car)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into CAR_ETC "+
						" (RENT_MNG_ID, RENT_L_CD, CAR_ID, COLO, EX_GAS,"+
						"  IMM_AMT, OPT, LPG_YN, LPG_SETTER, LPG_PRICE,"+
						"  LPG_PAY_DT, CAR_CS_AMT, CAR_CV_AMT, CAR_FS_AMT, CAR_FV_AMT,"+
						"  OPT_CS_AMT, OPT_CV_AMT, OPT_FS_AMT, OPT_FV_AMT, CLR_CS_AMT,"+
						"  CLR_CV_AMT, CLR_FS_AMT, CLR_FV_AMT, SD_CS_AMT, SD_CV_AMT, "+
						"  SD_FS_AMT, SD_FV_AMT, DC_CS_AMT, DC_CV_AMT, DC_FS_AMT, "+
						"  DC_FV_AMT, PURC_GU, CAR_EXT, BAE4, CAR_SEQ, GI_ST, OPT_CODE, ADD_OPT ) values "+
						"( ?, ?, ?, ?, ?,   ?, ?, ?, ?, ?,   replace(?, '-', ''), ?, ?, ?, ?,   ?, ?, ?, ?, ?, "+
						"  ?, ?, ?, ?, ?,   ?, ?, ?, ?, ?,   ?, ?, ?, ?, ?, ?, ?, ?)";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, car.getRent_mng_id());
			pstmt.setString(2, car.getRent_l_cd());
			pstmt.setString(3, car.getCar_id());
			pstmt.setString(4, car.getColo());
			pstmt.setString(5, car.getEx_gas());
			
			pstmt.setInt   (6, car.getImm_amt());
			pstmt.setString(7, car.getOpt());
			pstmt.setString(8, car.getLpg_yn());
			pstmt.setString(9, car.getLpg_setter());
			pstmt.setInt   (10, car.getLpg_price());
			
			pstmt.setString(11, car.getLpg_pay_dt());
			pstmt.setInt   (12, car.getCar_cs_amt());
			pstmt.setInt   (13, car.getCar_cv_amt());
			pstmt.setInt   (14, car.getCar_fs_amt());
			pstmt.setInt   (15, car.getCar_fv_amt());
			
			pstmt.setInt   (16, car.getOpt_cs_amt());
			pstmt.setInt   (17, car.getOpt_cv_amt());
			pstmt.setInt   (18, car.getOpt_fs_amt());
			pstmt.setInt   (19, car.getOpt_fv_amt());
			pstmt.setInt   (20, car.getClr_cs_amt());
			
			pstmt.setInt   (21, car.getClr_cv_amt());
			pstmt.setInt   (22, car.getClr_fs_amt());
			pstmt.setInt   (23, car.getClr_fv_amt());
			pstmt.setInt   (24, car.getSd_cs_amt());
			pstmt.setInt   (25, car.getSd_cv_amt());
			
			pstmt.setInt   (26, car.getSd_fs_amt());
			pstmt.setInt   (27, car.getSd_fv_amt());
			pstmt.setInt   (28, car.getDc_cs_amt());
			pstmt.setInt   (29, car.getDc_cv_amt());
			pstmt.setInt   (30, car.getDc_fs_amt());
			
			pstmt.setInt   (31, car.getDc_fv_amt());
			pstmt.setString(32, car.getPurc_gu());
			pstmt.setString(33, car.getCar_ext());
			pstmt.setString(34, car.getBae4());			
			pstmt.setString(35, car.getCar_seq());			
			pstmt.setString(36, car.getGi_st());			
			pstmt.setString(37, car.getOpt_code());			
			pstmt.setString(38, car.getAdd_opt());			
			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContCar]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	//계약등록 : 대여료 삽입 (fee)
	public boolean insertContFee(ContFeeBean fee)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into FEE (RENT_MNG_ID, RENT_L_CD, RENT_ST, RENT_WAY, CAR_ST, CON_MON, "+
							" RENT_START_DT, RENT_END_DT, PRV_DLV_YN, PRV_CAR_MNG_ID, PRV_START_DT, PRV_END_DT, "+
							" GRT_AMT_S, GRT_ETC, GRT_EST_DT, GRT_PAY_YN, PP_S_AMT, PP_V_AMT, PP_ETC, PP_EST_DT, "+
							" PP_PAY_YN, IFEE_S_AMT, IFEE_V_AMT, IFEE_ETC, IFEE_EST_DT, IFEE_PAY_YN, INV_S_AMT, "+
							" INV_V_AMT, INV_ETC, OPT_S_AMT, OPT_V_AMT, OPT_YN, OPT_ETC, FEE_S_AMT, FEE_V_AMT, "+
							" FEE_ETC, FEE_ST, FEE_REQ_DAY, FEE_EST_DAY, FEE_BANK, FEE_PAY_ST, FEE_PAY_TM, "+
							" FEE_PAY_START_DT, FEE_PAY_END_DT, FEE_FST_DT, FEE_FST_AMT, FEE_CDT, EXT_AGNT, BR_ID, RC_DAY, NEXT_YN, FEE_CHK, RENT_DT,"+
							" GRT_SUC_YN, IFEE_SUC_YN, LEAVE_DAY, CLS_PER, OPT_PER, OPT_CHK, BRCH_ID, INS_S_AMT, INS_V_AMT, INS_TOTAL_AMT) values "+
							"(?, ?, ?, ?, ?, ?, replace(?, '-', ''), replace(?, '-', ''), ?, ?, "+
							" replace(?, '-', ''), replace(?, '-', ''), ?, ?, replace(?, '-', ''), ?, ?, ?, ?, replace(?, '-', ''), "+
							" ?, ?, ?, ?, replace(?, '-', ''), ?, ?, ?, ?, ?, "+
							" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "+
							" ?, ?, replace(?, '-', ''), replace(?, '-', ''), replace(?, '-', ''), ?, ?, ?, ?, ?, ?, ?, replace(?, '-', ''),"+
							" ?, ?, '30', ?, ?, ?, ?, ?, ?, ?)";
		try 
		{
			conn.setAutoCommit(false);
					
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, fee.getRent_mng_id());
			pstmt.setString(2, fee.getRent_l_cd());
			pstmt.setString(3, fee.getRent_st());
			pstmt.setString(4, fee.getRent_way());
			pstmt.setString(5, fee.getCar_st());
			pstmt.setString(6, fee.getCon_mon());
			pstmt.setString(7, fee.getRent_start_dt());
			pstmt.setString(8, fee.getRent_end_dt());
			pstmt.setString(9, fee.getPrv_dlv_yn());
			pstmt.setString(10, fee.getPrv_car_mng_id());
			pstmt.setString(11, fee.getPrv_start_dt());
			pstmt.setString(12, fee.getPrv_end_dt());
			pstmt.setInt   (13, fee.getGrt_amt_s());
			pstmt.setString(14, fee.getGrt_etc());
			pstmt.setString(15, fee.getGrt_est_dt());
			pstmt.setString(16, fee.getGrt_pay_yn());
			pstmt.setInt   (17, fee.getPp_s_amt());
			pstmt.setInt   (18, fee.getPp_v_amt());
			pstmt.setString(19, fee.getPp_etc());
			pstmt.setString(20, fee.getPp_est_dt());
			pstmt.setString(21, fee.getPp_pay_yn());
			pstmt.setInt   (22, fee.getIfee_s_amt());
			pstmt.setInt   (23, fee.getIfee_v_amt());
			pstmt.setString(24, fee.getIfee_etc());
			pstmt.setString(25, fee.getIfee_est_dt());
			pstmt.setString(26, fee.getIfee_pay_yn());
			pstmt.setInt   (27, fee.getInv_s_amt());
			pstmt.setInt   (28, fee.getInv_v_amt());
			pstmt.setString(29, fee.getInv_etc());
			pstmt.setInt   (30, fee.getOpt_s_amt());
			pstmt.setInt   (31, fee.getOpt_v_amt());
			pstmt.setString(32, fee.getOpt_yn());
			pstmt.setString(33, fee.getOpt_etc());
			pstmt.setInt   (34, fee.getFee_s_amt());
			pstmt.setInt   (35, fee.getFee_v_amt());
			pstmt.setString(36, fee.getFee_etc());
			pstmt.setString(37, fee.getFee_st());
			pstmt.setString(38, fee.getFee_req_day());
			pstmt.setString(39, fee.getFee_est_day());
			pstmt.setString(40, fee.getFee_bank());
			pstmt.setString(41, fee.getFee_pay_st());
			pstmt.setString(42, fee.getFee_pay_tm());
			pstmt.setString(43, fee.getFee_pay_start_dt());
			pstmt.setString(44, fee.getFee_pay_end_dt()); 
			pstmt.setString(45, fee.getFee_fst_dt());
			pstmt.setInt   (46, fee.getFee_fst_amt());
			pstmt.setString(47, fee.getFee_cdt());
			pstmt.setString(48, fee.getExt_agnt());			
			pstmt.setString(49, fee.getBr_id());
			pstmt.setString(50, fee.getRc_day());
			pstmt.setString(51, fee.getNext_yn());
			pstmt.setString(52, fee.getFee_chk());
			pstmt.setString(53, fee.getRent_dt());			
			pstmt.setString(54, fee.getGrt_suc_yn());			
			pstmt.setString(55, fee.getIfee_suc_yn());	
			
			pstmt.setString(56, fee.getCls_per());	
			pstmt.setString(57, fee.getOpt_per());	
			pstmt.setString(58, fee.getOpt_chk());	
			pstmt.setString(59, fee.getBrch_id());	

			pstmt.setInt(60, fee.getIns_s_amt());	
			pstmt.setInt(61, fee.getIns_v_amt());	
			pstmt.setInt(62, fee.getIns_total_amt());	
			

			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();

	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContFee]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	//계약등록 : 보험료 삽입 (allot)
	public boolean insertContDebt(ContDebtBean debt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into ALLOT (RENT_MNG_ID, RENT_L_CD, ALLOT_ST, CPT_CD, LEND_INT, LEND_PRN, "+
						" ALT_FEE, RTN_TOT_AMT, LOAN_DEBTOR, RTN_CDT, RTN_WAY, RTN_EST_DT, LEND_NO, NTRL_FEE,  "+
						" STP_FEE, LEND_DT, LEND_INT_AMT, ALT_AMT, TOT_ALT_TM, ALT_START_DT, " +
						" ALT_END_DT, BOND_GET_ST, BOND_ST, LOAN_CON_NM, LOAN_CON_SSN, LOAN_CON_REL,  "+
						" LOAN_CON_TEL, LOAN_CON_ADDR, GRTR_NM1, GRTR_SSN1, GRTR_REL1, GRTR_TEL1, GRTR_ADDR1,  "+
						" GRTR_NM2, GRTR_SSN2, GRTR_REL2, GRTR_TEL2, GRTR_ADDR2, GRTR_NM3, GRTR_SSN3, " +
						" GRTR_REL3, GRTR_TEL3, GRTR_ADDR3, FST_PAY_DT, FST_PAY_AMT ) values ("+
						" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
						" ?, replace(?, '-', ''), ?, ?, ?, replace(?, '-', ''), ?, ?, ?, replace(?, '-', ''), " +
						" replace(?, '-', ''), ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
						" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
						" ?, ?, ?, replace(?, '-', ''), ? )";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, debt.getRent_mng_id());
			pstmt.setString(2, debt.getRent_l_cd());	
			pstmt.setString(3, debt.getAllot_st());
			pstmt.setString(4, debt.getCpt_cd());
			pstmt.setString(5, debt.getLend_int());
			pstmt.setInt   (6, debt.getLend_prn());
			pstmt.setInt   (7, debt.getAlt_fee());
			pstmt.setInt   (8, debt.getRtn_tot_amt());
			pstmt.setString(9, debt.getLoan_debtor());
			pstmt.setString(10, debt.getRtn_cdt());
			pstmt.setString(11, debt.getRtn_way());
			pstmt.setString(12, debt.getRtn_est_dt());
			pstmt.setString(13, debt.getLend_no());
			pstmt.setInt   (14, debt.getNtrl_fee());
			pstmt.setInt   (15, debt.getStp_fee());
			pstmt.setString(16, debt.getLend_dt());
			pstmt.setInt   (17, debt.getLend_int_amt());
			pstmt.setInt   (18, debt.getAlt_amt());
			pstmt.setString(19, debt.getTot_alt_tm());
			pstmt.setString(20, debt.getAlt_start_dt());
			pstmt.setString(21, debt.getAlt_end_dt());
			pstmt.setString(22, debt.getBond_get_st());
			pstmt.setString(23, debt.getBond_st());
			pstmt.setString(24, debt.getLoan_con_nm());
			pstmt.setString(25, debt.getLoan_con_ssn());
			pstmt.setString(26, debt.getLoan_con_rel());
			pstmt.setString(27, debt.getLoan_con_tel());
			pstmt.setString(28, debt.getLoan_con_addr());
			pstmt.setString(29, debt.getGrtr_nm1());
			pstmt.setString(30, debt.getGrtr_ssn1());
			pstmt.setString(31, debt.getGrtr_rel1());
			pstmt.setString(32, debt.getGrtr_tel1());
			pstmt.setString(33, debt.getGrtr_addr1());
			pstmt.setString(34, debt.getGrtr_nm2());
			pstmt.setString(35, debt.getGrtr_ssn2());
			pstmt.setString(36, debt.getGrtr_rel2());
			pstmt.setString(37, debt.getGrtr_tel2());
			pstmt.setString(38, debt.getGrtr_addr2());
			pstmt.setString(39, debt.getGrtr_nm3());
			pstmt.setString(40, debt.getGrtr_ssn3());
			pstmt.setString(41, debt.getGrtr_rel3());
			pstmt.setString(42, debt.getGrtr_tel3());
			pstmt.setString(43, debt.getGrtr_addr3());
			pstmt.setString(44, debt.getFst_pay_dt());
			pstmt.setInt   (45, debt.getFst_pay_amt());
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContDebt]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약등록 : 이행보증보험 삽입 (gua_ins)
	public boolean insertGiIns(ContGiInsBean gins)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " insert into GUA_INS "+
						" ( RENT_MNG_ID, RENT_L_CD, GI_NO, GI_AMT, GI_FEE,"+
						"   GI_START_DT, GI_END_DT, GI_DAY, GI_DT, rent_st, GI_MONTH )"+
						" values "+
						" ( ?, ?, ?, ?, ?, replace(?, '-', ''), replace(?, '-', ''), ?, replace(?, '-', ''), ?, ? )";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  gins.getRent_mng_id	());
			pstmt.setString(2,  gins.getRent_l_cd	());
			pstmt.setString(3,  gins.getGi_no		());
			pstmt.setInt   (4,  gins.getGi_amt		());
			pstmt.setInt   (5,  gins.getGi_fee		());
			pstmt.setString(6,  gins.getGi_start_dt	());
			pstmt.setString(7,  gins.getGi_end_dt	());
			pstmt.setString(8,  gins.getGi_day		());
			pstmt.setString(9,  gins.getGi_dt		());
			pstmt.setString(10, gins.getRent_st		());
			pstmt.setString(11, gins.getGi_month	());	//보증보험 가입기간(개월수) (2018.03.16)
		   	pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertGiIns]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 수정 : 계약정보 조회 (cont,fee)
	public ContBaseBean getContBase(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContBaseBean base = new ContBaseBean();
		String query = "";
		query = " select"+
				"        C.RENT_MNG_ID, C.RENT_L_CD, C.CLIENT_ID, C.CAR_MNG_ID, C.RENT_ST, C.BUS_ST,"+
				"        decode(C.RENT_DT, '', '', substr(C.RENT_DT, 1, 4) || '-' || substr(C.RENT_DT, 5, 2) || '-'||substr(C.RENT_DT, 7, 2)) RENT_DT,"+
				"        decode(C.DLV_DT, '', '', substr(C.DLV_DT, 1, 4) || '-' || substr(C.DLV_DT, 5, 2) || '-'||substr(C.DLV_DT, 7, 2)) DLV_DT,"+
				"        C.BUS_ID, C.BUS_ID2, C.MNG_ID, C.MNG_ID2, C.DEPT_ID, C.BRCH_ID, C.NOTE, C.MNG_ID, C.REG_ID,"+
				"        decode(C.REG_DT, '', '', substr(C.REG_DT, 1, 4) || '-' || substr(C.REG_DT, 5, 2) || '-'||substr(C.REG_DT, 7, 2)) REG_DT,"+
				"        C.CAR_ST, C.R_SITE, C.P_ZIP, C.P_ADDR, C.O_MAP, C.USE_YN,"+
				"        C.R_SITE_ZIP, C.R_SITE_ADDR, C.DRIVING_EXT, C.DRIVING_AGE, C.LOAN_EXT, C.OTHERS, C.CAR_JA, C.SCAN_FILE,"+
				"        C.car_gu, C.sanction_id, C.sanction_date, C.sanction, C.fine_mm, C.BUS_ID3, C.reg_step, "+
				"        decode(G.RENT_START_DT, '', '', substr(G.RENT_START_DT, 1, 4) || '-' || substr(G.RENT_START_DT, 5, 2) || '-'||substr(G.RENT_START_DT, 7, 2)) RENT_START_DT,"+
				"        decode(G.RENT_END_DT, '', '', substr(G.RENT_END_DT, 1, 4) || '-' || substr(G.RENT_END_DT, 5, 2) || '-'||substr(G.RENT_END_DT, 7, 2)) RENT_END_DT, "+
				"        F.RENT_WAY, G.CON_MON, "+
				"        C.agent_emp_id, C.sanction_type, C.lic_no, C.mgr_lic_no, C.mgr_lic_emp, C.mgr_lic_rel, C.reject_car, C.agent_users, "+
				"        C.test_lic_emp, C.test_lic_rel, C.test_lic_result, C.test_lic_emp2, C.test_lic_rel2, C.test_lic_result2 "+
				" from   CONT C, fee F, (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, min(rent_start_dt) rent_start_dt, max(rent_end_dt) rent_end_dt, sum(con_mon) con_mon from fee group by rent_mng_id, rent_l_cd) G "+
				" where  C.RENT_L_CD = ? and C.rent_mng_id = F.rent_mng_id and C.rent_l_cd = F.rent_l_cd and F.rent_mng_id=G.rent_mng_id and F.rent_l_cd=G.rent_l_cd and F.rent_st=G.rent_st "+
				" ";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, l_cd);
		   	rs = pstmt.executeQuery();
		
			while(rs.next())
			{
				base.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setClient_id(rs.getString("CLIENT_ID")==null?"":rs.getString("CLIENT_ID"));
				base.setCar_mng_id(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
				base.setRent_st(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				base.setBus_st(rs.getString("BUS_ST")==null?"":rs.getString("BUS_ST"));
				base.setRent_dt(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT"));
				base.setDlv_dt(rs.getString("DLV_DT")==null?"":rs.getString("DLV_DT"));
				base.setRent_start_dt(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				base.setNote(rs.getString("NOTE")==null?"":rs.getString("NOTE"));
				base.setBrch_id(rs.getString("BRCH_ID")==null?"":rs.getString("BRCH_ID"));
				base.setBus_id(rs.getString("BUS_ID")==null?"":rs.getString("BUS_ID"));
				base.setBus_id2(rs.getString("BUS_ID2")==null?"":rs.getString("BUS_ID2"));
				base.setMng_id(rs.getString("MNG_ID")==null?"":rs.getString("MNG_ID"));
				base.setMng_id2(rs.getString("MNG_ID2")==null?"":rs.getString("MNG_ID2"));
				base.setDept_id(rs.getString("DEPT_ID")==null?"":rs.getString("DEPT_ID"));
				base.setReg_id(rs.getString("REG_ID")==null?"":rs.getString("REG_ID"));
				base.setReg_dt(rs.getString("REG_DT")==null?"":rs.getString("REG_DT"));
				base.setCar_st(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				base.setR_site(rs.getString("R_SITE")==null?"":rs.getString("R_SITE"));
				base.setP_zip(rs.getString("P_ZIP")==null?"":rs.getString("P_ZIP"));
				base.setP_addr(rs.getString("P_ADDR")==null?"":rs.getString("P_ADDR"));
				base.setO_map(rs.getString("O_MAP")==null?"":rs.getString("O_MAP"));
				base.setUse_yn(rs.getString("USE_YN")==null?"":rs.getString("USE_YN"));
				base.setR_site_zip(rs.getString("R_SITE_ZIP")==null?"":rs.getString("R_SITE_ZIP"));
				base.setR_site_addr(rs.getString("R_SITE_ADDR")==null?"":rs.getString("R_SITE_ADDR"));
				base.setDriving_ext(rs.getString("DRIVING_EXT")==null?"":rs.getString("DRIVING_EXT"));
				base.setDriving_age(rs.getString("DRIVING_AGE")==null?"":rs.getString("DRIVING_AGE"));
				base.setLoan_ext(rs.getString("LOAN_EXT")==null?"":rs.getString("LOAN_EXT"));
				base.setOthers(rs.getString("OTHERS")==null?"":rs.getString("OTHERS"));
				base.setCar_ja(rs.getString("CAR_JA")==null?0:Integer.parseInt(rs.getString("CAR_JA")));
				base.setScan_file(rs.getString("SCAN_FILE")==null?"":rs.getString("SCAN_FILE"));
				base.setRent_way(rs.getString("RENT_WAY")==null?"":rs.getString("RENT_WAY"));
				base.setCon_mon(rs.getString("CON_MON")==null?"":rs.getString("CON_MON"));
				base.setRent_start_dt(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				base.setRent_end_dt(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				base.setSanction_id(rs.getString("sanction_id")==null?"":rs.getString("sanction_id"));
				base.setSanction_date(rs.getString("sanction_date")==null?"":rs.getString("sanction_date"));
				base.setSanction(rs.getString("sanction")==null?"":rs.getString("sanction"));
				base.setFine_mm(rs.getString("fine_mm")==null?"":rs.getString("fine_mm"));
				base.setCar_gu(rs.getString("CAR_GU")==null?"":rs.getString("CAR_GU"));
				base.setBus_id3(rs.getString("BUS_ID3")==null?"":rs.getString("BUS_ID3"));
				base.setReg_step(rs.getString("reg_step")==null?"":rs.getString("reg_step"));
				base.setAgent_emp_id(rs.getString("agent_emp_id")==null?"":rs.getString("agent_emp_id"));
				base.setSanction_type(rs.getString("sanction_type")==null?"":rs.getString("sanction_type"));
				base.setLic_no 			(rs.getString("lic_no")==null?"":rs.getString("lic_no"));
				base.setMgr_lic_no 		(rs.getString("mgr_lic_no")==null?"":rs.getString("mgr_lic_no"));
				base.setMgr_lic_emp		(rs.getString("mgr_lic_emp")==null?"":rs.getString("mgr_lic_emp"));
				base.setMgr_lic_rel		(rs.getString("mgr_lic_rel")==null?"":rs.getString("mgr_lic_rel"));
				base.setReject_car		(rs.getString("reject_car")==null?"":rs.getString("reject_car"));
				base.setAgent_users		(rs.getString("agent_users")==null?"":rs.getString("agent_users"));
				base.setTest_lic_emp	(rs.getString("test_lic_emp")==null?"":rs.getString("test_lic_emp"));
				base.setTest_lic_rel	(rs.getString("test_lic_rel")==null?"":rs.getString("test_lic_rel"));
				base.setTest_lic_result	(rs.getString("test_lic_result")==null?"":rs.getString("test_lic_result"));
				base.setTest_lic_emp2	(rs.getString("test_lic_emp2")==null?"":rs.getString("test_lic_emp2"));
				base.setTest_lic_rel2	(rs.getString("test_lic_rel2")==null?"":rs.getString("test_lic_rel2"));
				base.setTest_lic_result2(rs.getString("test_lic_result2")==null?"":rs.getString("test_lic_result2"));
				

			}
			rs.close();    
			pstmt.close(); 

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//계약 수정 : 계약정보 조회(위프레임) (cont,fee)
	public ContBaseBean getContBaseHi(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContBaseBean base = new ContBaseBean();
		String query = "";
		query = " select C.RENT_MNG_ID, C.RENT_L_CD, C.CAR_MNG_ID, C.RENT_ST, C.BUS_ST, C.UPDATE_ID, C.UPDATE_DT, C.AGENT_EMP_ID,"+
				"        decode(C.RENT_DT, '', '', substr(C.RENT_DT, 1, 4) || '-' || substr(C.RENT_DT, 5, 2) || '-'||substr(C.RENT_DT, 7, 2)) RENT_DT,"+
				"        C.BRCH_ID, C.BUS_ID, C.BUS_ID2, C.MNG_ID, C.MNG_ID2, C.DEPT_ID, C.CAR_ST, C.USE_YN,"+
				"        decode(e.RENT_START_DT, '', '', substr(e.RENT_START_DT, 1, 4) || '-' || substr(e.RENT_START_DT, 5, 2) || '-'||substr(e.RENT_START_DT, 7, 2)) RENT_START_DT,"+
				"        F.RENT_WAY, e.CON_MON,"+
				"        decode(e.RENT_END_DT, '', '', substr(e.RENT_END_DT, 1, 4) || '-' || substr(e.RENT_END_DT, 5, 2) || '-'||substr(e.RENT_END_DT, 7, 2)) RENT_END_DT,"+
				"        C.sanction_id, C.sanction_date, C.sanction, C.BUS_ID3, C.car_gu, C.fine_mm , client_id, C.GCP_KD, C.DRIVING_AGE, C.CAR_JA, C.BACDT_KD, C.reject_car, C.agent_users "+
				" from   CONT C, fee F,"+
			    "        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, min(rent_start_dt) rent_start_dt, max(rent_end_dt) rent_end_dt, sum(con_mon) con_mon from fee group by rent_mng_id, rent_l_cd) e "+
				" where  C.RENT_MNG_ID = ? and C.RENT_L_CD = ? and C.rent_mng_id = F.rent_mng_id and C.rent_l_cd = F.rent_l_cd "+
				"        and F.rent_mng_id=e.rent_mng_id and F.rent_l_cd=e.rent_l_cd and F.rent_st=e.rent_st "+
				"        ";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();		
		   	
			while(rs.next())
			{
				base.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setCar_mng_id(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
				base.setRent_st(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				base.setBus_st(rs.getString("BUS_ST")==null?"":rs.getString("BUS_ST"));
				base.setRent_dt(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT"));
				base.setBrch_id(rs.getString("BRCH_ID")==null?"":rs.getString("BRCH_ID"));
				base.setBus_id(rs.getString("BUS_ID")==null?"":rs.getString("BUS_ID"));
				base.setBus_id2(rs.getString("BUS_ID2")==null?"":rs.getString("BUS_ID2"));
				base.setMng_id(rs.getString("MNG_ID")==null?"":rs.getString("MNG_ID"));
				base.setMng_id2(rs.getString("MNG_ID2")==null?"":rs.getString("MNG_ID2"));
				base.setDept_id(rs.getString("DEPT_ID")==null?"":rs.getString("DEPT_ID"));
				base.setCar_st(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				base.setUse_yn(rs.getString("USE_YN")==null?"":rs.getString("USE_YN"));
				//추가
				base.setRent_way(rs.getString("RENT_WAY")==null?"":rs.getString("RENT_WAY"));
				base.setCon_mon(rs.getString("CON_MON")==null?"":rs.getString("CON_MON"));
				base.setRent_start_dt(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				base.setRent_end_dt(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				base.setUpdate_id(rs.getString("UPDATE_ID")==null?"":rs.getString("UPDATE_ID"));
				base.setUpdate_dt(rs.getString("UPDATE_DT")==null?"":rs.getString("UPDATE_DT"));
				//20061228
				base.setSanction_id(rs.getString("sanction_id")==null?"":rs.getString("sanction_id"));
				base.setSanction_date(rs.getString("sanction_date")==null?"":rs.getString("sanction_date"));
				base.setSanction(rs.getString("sanction")==null?"":rs.getString("sanction"));
				base.setBus_id3(rs.getString("BUS_ID3")==null?"":rs.getString("BUS_ID3"));
				base.setCar_gu(rs.getString("CAR_GU")==null?"":rs.getString("CAR_GU"));
				base.setFine_mm(rs.getString("fine_mm")==null?"":rs.getString("fine_mm"));
				base.setClient_id(rs.getString("client_id")==null?"":rs.getString("client_id"));
				//2018.03.22
				base.setGcp_kd(rs.getString("GCP_KD")==null?"":rs.getString("GCP_KD"));
				base.setDriving_age(rs.getString("DRIVING_AGE")==null?"":rs.getString("DRIVING_AGE"));
				base.setCar_ja(rs.getString("CAR_JA")==null?0:Integer.parseInt(rs.getString("CAR_JA")));
				base.setBacdt_kd(rs.getString("BACDT_KD")==null?"":rs.getString("BACDT_KD"));
				base.setAgent_emp_id(rs.getString("agent_emp_id")==null?"":rs.getString("agent_emp_id"));
				base.setReject_car(rs.getString("reject_car")==null?"":rs.getString("reject_car"));
				base.setAgent_users(rs.getString("agent_users")==null?"":rs.getString("agent_users"));

			}
			rs.close();    
			pstmt.close(); 
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBaseHi]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//계약 수정 : 계약정보 조회(아래프레임) (cont,fee)
	public ContBaseBean getContBaseAll(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContBaseBean base = new ContBaseBean();
		String query = "";
		query = " select C.RENT_MNG_ID, C.RENT_L_CD, C.CLIENT_ID, C.CAR_MNG_ID, C.REG_ID, C.CAR_ST,"+
				"        C.RENT_ST, C.R_SITE, C.P_ZIP, C.P_ADDR, C.O_MAP, C.RENT_DT, C.USE_YN,"+
				"        C.R_SITE_ZIP, C.R_SITE_ADDR, C.DRIVING_EXT, C.DRIVING_AGE, C.LOAN_EXT, C.OTHERS, C.CAR_JA, C.SCAN_FILE,"+
				"        decode(C.DLV_DT, '', '', substr(C.DLV_DT, 1, 4) || '-' || substr(C.DLV_DT, 5, 2) || '-'||substr(C.DLV_DT, 7, 2)) DLV_DT,"+
				"        c.gcp_kd GCP_KD, c.bacdt_kd BACDT_KD, c.spr_kd, "+// 보험가입금액-대물배상,자기신체사고 추가부분 -20041221; Yongsoon Kwon.
				"        F.RENT_WAY, e.CON_MON, C.tax_agnt, C.tax_type, C.sanction_id, C.sanction_date, C.sanction, "+
				"        C.BRCH_ID, C.bus_st, C.BUS_ID, C.BUS_ID2, C.BUS_ID3, C.MNG_ID, C.MNG_ID2, C.UPDATE_ID, C.UPDATE_DT,"+
				"        decode(e.RENT_START_DT, '', '', substr(e.RENT_START_DT, 1, 4) || '-' || substr(e.RENT_START_DT, 5, 2) || '-'||substr(e.RENT_START_DT, 7, 2)) RENT_START_DT,"+
				"        decode(e.RENT_END_DT, '', '', substr(e.RENT_END_DT, 1, 4) || '-' || substr(e.RENT_END_DT, 5, 2) || '-'||substr(e.RENT_END_DT, 7, 2)) RENT_END_DT"+
				" from   CONT C, fee F, "+
				"		 (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(rent_start_dt) rent_start_dt, max(rent_end_dt) rent_end_dt from fee group by rent_mng_id, rent_l_cd) e"+
				" where  C.RENT_MNG_ID = ? and C.RENT_L_CD = ? "+
				"	     and C.rent_mng_id = F.rent_mng_id and C.rent_l_cd = F.rent_l_cd "+
				"	     and F.rent_mng_id = e.rent_mng_id and F.rent_l_cd = e.rent_l_cd and F.rent_st=e.rent_st"+
				" ";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();
			while(rs.next())
			{
				base.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setClient_id(rs.getString("CLIENT_ID")==null?"":rs.getString("CLIENT_ID"));
				base.setCar_mng_id(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
				base.setRent_st(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				base.setRent_dt(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT"));
				base.setDlv_dt(rs.getString("DLV_DT")==null?"":rs.getString("DLV_DT"));
				base.setRent_way(rs.getString("RENT_WAY")==null?"":rs.getString("RENT_WAY"));
				base.setCon_mon(rs.getString("CON_MON")==null?"":rs.getString("CON_MON"));
				base.setReg_id(rs.getString("REG_ID")==null?"":rs.getString("REG_ID"));
				base.setCar_st(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				base.setR_site(rs.getString("R_SITE")==null?"":rs.getString("R_SITE"));
				base.setP_zip(rs.getString("P_ZIP")==null?"":rs.getString("P_ZIP"));
				base.setP_addr(rs.getString("P_ADDR")==null?"":rs.getString("P_ADDR"));
				base.setO_map(rs.getString("O_MAP")==null?"":rs.getString("O_MAP"));
				base.setUse_yn(rs.getString("USE_YN")==null?"":rs.getString("USE_YN"));
				//추가
				base.setR_site_zip(rs.getString("R_SITE_ZIP")==null?"":rs.getString("R_SITE_ZIP"));
				base.setR_site_addr(rs.getString("R_SITE_ADDR")==null?"":rs.getString("R_SITE_ADDR"));
				base.setDriving_ext(rs.getString("DRIVING_EXT")==null?"":rs.getString("DRIVING_EXT"));
				base.setDriving_age(rs.getString("DRIVING_AGE")==null?"":rs.getString("DRIVING_AGE"));
				base.setLoan_ext(rs.getString("LOAN_EXT")==null?"":rs.getString("LOAN_EXT"));
				base.setOthers(rs.getString("OTHERS")==null?"":rs.getString("OTHERS"));
				base.setCar_ja(rs.getString("CAR_JA")==null?0:Integer.parseInt(rs.getString("CAR_JA")));
				base.setScan_file(rs.getString("SCAN_FILE")==null?"":rs.getString("SCAN_FILE"));
				//추가
				base.setGcp_kd(rs.getString("GCP_KD")==null?"":rs.getString("GCP_KD"));
				base.setBacdt_kd(rs.getString("BACDT_KD")==null?"":rs.getString("BACDT_KD"));
				//20050826
				base.setSpr_kd(rs.getString("SPR_KD")==null?"":rs.getString("SPR_KD"));
				//20051013
				base.setTax_agnt(rs.getString("tax_agnt")==null?"":rs.getString("tax_agnt"));
				base.setTax_type(rs.getString("tax_type")==null?"":rs.getString("tax_type"));
				//20061228
				base.setSanction_id(rs.getString("sanction_id")==null?"":rs.getString("sanction_id"));
				base.setSanction_date(rs.getString("sanction_date")==null?"":rs.getString("sanction_date"));
				base.setSanction(rs.getString("sanction")==null?"":rs.getString("sanction"));
				//20070608
				base.setBrch_id(rs.getString("BRCH_ID")==null?"":rs.getString("BRCH_ID"));
				base.setBus_id(rs.getString("BUS_ID")==null?"":rs.getString("BUS_ID"));
				base.setBus_id2(rs.getString("BUS_ID2")==null?"":rs.getString("BUS_ID2"));
				base.setMng_id(rs.getString("MNG_ID")==null?"":rs.getString("MNG_ID"));
				base.setMng_id2(rs.getString("MNG_ID2")==null?"":rs.getString("MNG_ID2"));
				base.setBus_st(rs.getString("BUS_ST")==null?"":rs.getString("BUS_ST"));
				base.setRent_start_dt(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				base.setRent_end_dt(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				base.setUpdate_id(rs.getString("UPDATE_ID")==null?"":rs.getString("UPDATE_ID"));
				base.setUpdate_dt(rs.getString("UPDATE_DT")==null?"":rs.getString("UPDATE_DT"));
				base.setBus_id3(rs.getString("BUS_ID3")==null?"":rs.getString("BUS_ID3"));
			}
			rs.close();    
			pstmt.close(); 
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBaseAll]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//계약등록/수정 : 법인고객차량관리자 수정(car_mgr)
	public boolean updateCarMgr(CarMgrBean mgr)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_MGR set "+
						" MGR_ST = rtrim(?), "+
						" MGR_NM = ?, "+
						" MGR_DEPT = ?, "+
						" MGR_TITLE = ?, "+
						" MGR_TEL = ?, "+
						" MGR_M_TEL = ?, "+
						" MGR_EMAIL = ?, "+
						" MGR_ZIP = ?, "+
						" MGR_ADDR = ?, "+
						" EMAIL_YN = ?, "+
						" LIC_NO = ? "+		//운전면허번호추가(20180921)
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and MGR_ID = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mgr.getMgr_st());
			pstmt.setString(2, mgr.getMgr_nm());
			pstmt.setString(3, mgr.getMgr_dept());
			pstmt.setString(4, mgr.getMgr_title());
			pstmt.setString(5, mgr.getMgr_tel());
			pstmt.setString(6, mgr.getMgr_m_tel());
			pstmt.setString(7, mgr.getMgr_email());
			pstmt.setString(8, mgr.getMgr_zip());
			pstmt.setString(9, mgr.getMgr_addr());
			pstmt.setString(10, mgr.getEmail_yn());
			pstmt.setString(11, mgr.getLic_no());		//운전면허번호추가(20180921)
		    pstmt.setString(12, mgr.getRent_mng_id());
			pstmt.setString(13, mgr.getRent_l_cd());
			pstmt.setString(14,mgr.getMgr_id());
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateCarMgr]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약등록/수정 : 법인고객차량관리자 수정(car_mgr)
	public boolean updateCarMgr(CarMgrBean mgr, String client_id, String mgr_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_MGR set "+
						" MGR_NM = ?, "+
						" MGR_DEPT = ?, "+
						" MGR_TITLE = ?, "+
						" MGR_TEL = ?, "+
						" MGR_M_TEL = ?, "+
						" MGR_EMAIL = ?, "+
						" MGR_ZIP = ?, "+
						" MGR_ADDR = ?, "+
						" EMAIL_YN = ?, "+
						" LIC_NO = ? "+		//운전면하반호추가(20180921)
						" where mgr_st = ? and RENT_L_CD in (select rent_l_cd from cont where nvl(use_yn,'Y')='Y' and client_id = ?)";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mgr.getMgr_nm());
			pstmt.setString(2, mgr.getMgr_dept());
			pstmt.setString(3, mgr.getMgr_title());
			pstmt.setString(4, mgr.getMgr_tel());
			pstmt.setString(5, mgr.getMgr_m_tel());
			pstmt.setString(6, mgr.getMgr_email());
			pstmt.setString(7, mgr.getMgr_zip());
			pstmt.setString(8, mgr.getMgr_addr());
			pstmt.setString(9, mgr.getEmail_yn());
			pstmt.setString(10, mgr.getLic_no());	////운전면허번호추가(20180921)
			pstmt.setString(11, mgr_st);
		    pstmt.setString(12, client_id);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateCarMgr(CarMgrBean mgr, String client_id, String mgr_st)]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약등록 : 지급수수료-자동차영업사원 삽입 (commi)
	public boolean insertCommi(CommiBean commi)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into COMMI (RENT_MNG_ID, EMP_ID, RENT_L_CD, AGNT_ST, COMMI, INC_AMT,"+
						" RES_AMT, TOT_AMT, DIF_AMT, SUP_DT, REL, COMMI_ST) values"+
						"(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, commi.getRent_mng_id());
			pstmt.setString(2, commi.getEmp_id());
			pstmt.setString(3, commi.getRent_l_cd());
			pstmt.setString(4, commi.getAgnt_st());
			pstmt.setInt   (5, commi.getCommi());
			pstmt.setInt   (6, commi.getInc_amt());
			pstmt.setInt   (7, commi.getRes_amt());
			pstmt.setInt   (8, commi.getTot_amt());
			pstmt.setInt   (9, commi.getDif_amt());
			pstmt.setString(10, commi.getSup_dt());
			pstmt.setString(11, commi.getRel());
			pstmt.setString(12, commi.getCommi_st());
		    pstmt.executeUpdate();
		    pstmt.close();
			conn.commit();

	  	}
	  	catch(Exception e)
	  	{
			System.out.println("[AddContDatabase:insertCommi]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 이행보증보험 수정 (gua_ins)
	public boolean updateGiIns(ContGiInsBean gins)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " update GUA_INS set "+
						"        GI_NO=?, GI_AMT=?, GI_FEE=?,"+
						"        GI_START_DT=replace(?, '-', ''), GI_END_DT=replace(?, '-', ''),"+
						"        GI_DAY=?, GI_DT=replace(?, '-', ''), "+
						"		 GI_MONTH=? "+		//보증보험 가입기간(개월수) (2018.03.16)
						" where  rent_mng_id=? and rent_l_cd=? and rent_st=? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  gins.getGi_no		().trim());
			pstmt.setInt   (2,  gins.getGi_amt		());
			pstmt.setInt   (3,  gins.getGi_fee		());
			pstmt.setString(4,  gins.getGi_start_dt	().trim());
			pstmt.setString(5,  gins.getGi_end_dt	().trim());
			pstmt.setString(6,  gins.getGi_day		().trim());
			pstmt.setString(7,  gins.getGi_dt		().trim());
			pstmt.setString(8,  gins.getGi_month	().trim());
			pstmt.setString(9,  gins.getRent_mng_id	().trim());
			pstmt.setString(10, gins.getRent_l_cd	().trim());
			pstmt.setString(11, gins.getRent_st		().trim());
		    pstmt.executeUpdate();	
			pstmt.close();	
			conn.commit();
			
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateGiIns]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 계약구분 수정(연장재계약)
	public boolean updateContRentst(String m_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update cont set rent_st=? where rent_mng_id=? and rent_l_cd=?";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_st);
			pstmt.setString(2, m_id);
			pstmt.setString(3, l_cd);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContRentst]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 계약구분 수정(연장재계약)
	public boolean updateContRentst(String m_id, String l_cd, String rent_st, String rent_end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update cont set rent_st=?, rent_end_dt=replace(?, '-', '') where rent_mng_id=? and rent_l_cd=?";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_st);
			pstmt.setString(2, rent_end_dt);
			pstmt.setString(3, m_id);
			pstmt.setString(4, l_cd);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContRentst]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 계약구분 수정(연장재계약)
	public boolean updateContRentst(String m_id, String l_cd, String rent_st, String rent_end_dt, int con_mon)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update cont set rent_st=?, rent_end_dt=replace(?, '-', '') where rent_mng_id=? and rent_l_cd=?";

		if(con_mon < 6)	rent_st = "5";
		if(con_mon >= 6)	rent_st = "2";

		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_st);
			pstmt.setString(2, rent_end_dt);
			pstmt.setString(3, m_id);
			pstmt.setString(4, l_cd);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContRentst]\n"+e);
			e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 차량정보 조회 (car_etc,car_nm,code)
	public ContCarBean getContCar(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCarBean car = new ContCarBean();
		String query = "";
		query = " select a.RENT_MNG_ID, a.RENT_L_CD, a.CAR_ID, a.COLO, a.EX_GAS, a.IMM_AMT, a.OPT, a.LPG_YN, a.LPG_SETTER, a.LPG_PRICE,"+
				" decode(a.LPG_PAY_DT, '','', substr(a.LPG_PAY_DT, 1, 4) || '-' || substr(a.LPG_PAY_DT, 5, 2) || '-'||substr(LPG_PAY_DT, 7, 2)) LPG_PAY_DT,"+
				" a.CAR_CS_AMT, a.CAR_CV_AMT, a.CAR_FS_AMT, a.CAR_FV_AMT, a.OPT_CS_AMT, a.OPT_CV_AMT, a.OPT_FS_AMT,"+
				" a.OPT_FV_AMT, a.CLR_CS_AMT, a.CLR_CV_AMT, a.CLR_FS_AMT, a.CLR_FV_AMT, a.SD_CS_AMT, a.SD_CV_AMT, a.SD_FS_AMT,"+
				" a.SD_FV_AMT, a.DC_CS_AMT, a.DC_CV_AMT, a.DC_FS_AMT, a.DC_FV_AMT, c.NM as CAR_COMP_NM,"+
				" a.CAR_EXT, a.PURC_GU, a.BAE4, a.GI_ST, a.ADD_OPT, a.OPT_CODE, a.CAR_SEQ, d.dlv_dt, a.in_col, "+
				" e.lkas_yn, e.ldws_yn, e.aeb_yn, e.fcw_yn, e.hook_yn, e.ev_yn, e.others_device "+
				" from CAR_ETC a, CAR_NM b, CODE c, cont d, cont_etc e"+
				" where a.RENT_MNG_ID = ? and a.RENT_L_CD = ? "+
				" and e.RENT_MNG_ID = ? and e.RENT_L_CD = ? "+
				" and a.CAR_ID = b.CAR_ID"+
				" and b.CAR_COMP_ID = c.CODE"+
				" and c.C_ST='0001' and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd";
		try{
						
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, m_id);
			pstmt.setString(4, l_cd);
		   	rs = pstmt.executeQuery();
    	
			while(rs.next())
			{
				car.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				car.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				car.setCar_id(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
				car.setColo(rs.getString("COLO")==null?"":rs.getString("COLO"));
				car.setEx_gas(rs.getString("EX_GAS")==null?"":rs.getString("EX_GAS"));
				car.setImm_amt(rs.getString("IMM_AMT")==null?0:Integer.parseInt(rs.getString("IMM_AMT")));
				car.setOpt(rs.getString("OPT")==null?"":rs.getString("OPT"));
				car.setLpg_yn(rs.getString("LPG_YN")==null?"":rs.getString("LPG_YN"));
				car.setLpg_setter(rs.getString("LPG_SETTER")==null?"":rs.getString("LPG_SETTER"));
				car.setLpg_price(rs.getString("LPG_PRICE")==null?0:Integer.parseInt(rs.getString("LPG_PRICE")));
				car.setLpg_pay_dt(rs.getString("LPG_PAY_DT")==null?"":rs.getString("LPG_PAY_DT"));
				car.setCar_cs_amt(rs.getString("CAR_CS_AMT")==null?0:Integer.parseInt(rs.getString("CAR_CS_AMT")));
				car.setCar_cv_amt(rs.getString("CAR_CV_AMT")==null?0:Integer.parseInt(rs.getString("CAR_CV_AMT")));
				car.setCar_fs_amt(rs.getString("CAR_FS_AMT")==null?0:Integer.parseInt(rs.getString("CAR_FS_AMT")));
				car.setCar_fv_amt(rs.getString("CAR_FV_AMT")==null?0:Integer.parseInt(rs.getString("CAR_FV_AMT")));
				car.setOpt_cs_amt(rs.getString("OPT_CS_AMT")==null?0:Integer.parseInt(rs.getString("OPT_CS_AMT")));
				car.setOpt_cv_amt(rs.getString("OPT_CV_AMT")==null?0:Integer.parseInt(rs.getString("OPT_CV_AMT")));
				car.setOpt_fs_amt(rs.getString("OPT_FS_AMT")==null?0:Integer.parseInt(rs.getString("OPT_FS_AMT")));
				car.setOpt_fv_amt(rs.getString("OPT_FV_AMT")==null?0:Integer.parseInt(rs.getString("OPT_FV_AMT")));
				car.setClr_cs_amt(rs.getString("CLR_CS_AMT")==null?0:Integer.parseInt(rs.getString("CLR_CS_AMT")));
				car.setClr_cv_amt(rs.getString("CLR_CV_AMT")==null?0:Integer.parseInt(rs.getString("CLR_CV_AMT")));
				car.setClr_fs_amt(rs.getString("CLR_FS_AMT")==null?0:Integer.parseInt(rs.getString("CLR_FS_AMT")));
				car.setClr_fv_amt(rs.getString("CLR_FV_AMT")==null?0:Integer.parseInt(rs.getString("CLR_FV_AMT")));
				car.setSd_cs_amt(rs.getString("SD_CS_AMT")==null?0:Integer.parseInt(rs.getString("SD_CS_AMT")));
				car.setSd_cv_amt(rs.getString("SD_CV_AMT")==null?0:Integer.parseInt(rs.getString("SD_CV_AMT")));
				car.setSd_fs_amt(rs.getString("SD_FS_AMT")==null?0:Integer.parseInt(rs.getString("SD_FS_AMT")));
				car.setSd_fv_amt(rs.getString("SD_FV_AMT")==null?0:Integer.parseInt(rs.getString("SD_FV_AMT")));
				car.setDc_cs_amt(rs.getString("DC_CS_AMT")==null?0:Integer.parseInt(rs.getString("DC_CS_AMT")));
				car.setDc_cv_amt(rs.getString("DC_CV_AMT")==null?0:Integer.parseInt(rs.getString("DC_CV_AMT")));
				car.setDc_fs_amt(rs.getString("DC_FS_AMT")==null?0:Integer.parseInt(rs.getString("DC_FS_AMT")));
				car.setDc_fv_amt(rs.getString("DC_FV_AMT")==null?0:Integer.parseInt(rs.getString("DC_FV_AMT")));
				car.setCar_comp_nm(rs.getString("CAR_COMP_NM")==null?"":rs.getString("CAR_COMP_NM"));
				car.setCar_ext(rs.getString("CAR_EXT")==null?"":rs.getString("CAR_EXT"));
				car.setPurc_gu(rs.getString("PURC_GU")==null?"":rs.getString("PURC_GU"));
				car.setBae4(rs.getString("BAE4")==null?"":rs.getString("BAE4"));
				car.setGi_st(rs.getString("GI_ST")==null?"":rs.getString("GI_ST"));
				car.setAdd_opt(rs.getString("ADD_OPT")==null?"":rs.getString("ADD_OPT"));
				car.setOpt_code(rs.getString("OPT_CODE")==null?"":rs.getString("OPT_CODE"));
				car.setCar_seq(rs.getString("CAR_SEQ")==null?"":rs.getString("CAR_SEQ"));
				car.setDlv_dt(rs.getString("dlv_dt")==null?"":rs.getString("dlv_dt"));
				car.setIn_col(rs.getString("in_col")==null?"":rs.getString("in_col"));
				car.setLkas_yn(rs.getString("LKAS_YN")==null?"":rs.getString("LKAS_YN"));
				car.setLdws_yn(rs.getString("LDWS_YN")==null?"":rs.getString("LDWS_YN"));
				car.setAeb_yn(rs.getString("AEB_YN")==null?"":rs.getString("AEB_YN"));
				car.setFcw_yn(rs.getString("FCW_YN")==null?"":rs.getString("FCW_YN"));
				car.setHook_yn(rs.getString("HOOK_YN")==null?"":rs.getString("HOOK_YN"));
				car.setEv_yn(rs.getString("EV_YN")==null?"":rs.getString("EV_YN"));
				car.setOthers_device(rs.getString("others_device")==null?"":rs.getString("others_device"));
			}
			rs.close();    
			pstmt.close(); 
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCar]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return car;
		}				
	}

	//계약수정 : 이행보증보험 조회 
	public ContGiInsBean getContGiIns(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContGiInsBean gins = new ContGiInsBean();
		String query = "";
		query = " select * from gua_ins where RENT_MNG_ID=? and RENT_L_CD=?";
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				gins.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				gins.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				gins.setGi_no		(rs.getString("GI_NO")==null?"":rs.getString("GI_NO"));
				gins.setGi_amt		(rs.getString("GI_AMT")==null?0:Integer.parseInt(rs.getString("GI_AMT")));
				gins.setGi_fee		(rs.getString("GI_FEE")==null?0:Integer.parseInt(rs.getString("GI_FEE")));
				gins.setGi_start_dt	(rs.getString("GI_START_DT")==null?"":rs.getString("GI_START_DT"));
				gins.setGi_end_dt	(rs.getString("GI_END_DT")==null?"":rs.getString("GI_END_DT"));
				gins.setGi_day		(rs.getString("GI_DAY")==null?"":rs.getString("GI_DAY"));
				gins.setGi_dt		(rs.getString("GI_DT")==null?"":rs.getString("GI_DT"));
				gins.setRent_st		(rs.getString("RENT_ST")==null?"1":rs.getString("RENT_ST"));
				gins.setGi_month	(rs.getString("GI_MONTH")==null?"":rs.getString("GI_MONTH"));	//보증보험 가입기간(개월수) (2018.03.16)
			}
			rs.close();    
			pstmt.close(); 
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContGiIns]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return gins;
		}				
	}

	//계약 수정 : 법인고객차량관리자 조회 (car_mgr)
	public Vector getCarMgr(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector rtn = new Vector();
		String query = " select RENT_MNG_ID, RENT_L_CD, MGR_ID, rtrim(MGR_ST) MGR_ST, MGR_NM, MGR_DEPT, MGR_TITLE, MGR_TEL, MGR_M_TEL, MGR_EMAIL, EMAIL_YN, LIC_NO, LIC_ST, COM_NM, LIC_RESULT "+
						" from CAR_MGR"+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and mgr_st<>'대표이사'"+
						" order by MGR_ID";
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		    rs = pstmt.executeQuery();
    	
			while(rs.next())
			{
				CarMgrBean car_mgr = new CarMgrBean();
				car_mgr.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				car_mgr.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));	
				car_mgr.setMgr_id(rs.getString("MGR_ID")==null?"":rs.getString("MGR_ID"));
				car_mgr.setMgr_st(rs.getString("MGR_ST")==null?"":rs.getString("MGR_ST"));
				car_mgr.setMgr_nm(rs.getString("MGR_NM")==null?"":rs.getString("MGR_NM"));
				car_mgr.setMgr_dept(rs.getString("MGR_DEPT")==null?"":rs.getString("MGR_DEPT"));
				car_mgr.setMgr_title(rs.getString("MGR_TITLE")==null?"":rs.getString("MGR_TITLE"));
				car_mgr.setMgr_tel(rs.getString("MGR_TEL")==null?"":rs.getString("MGR_TEL"));
				car_mgr.setMgr_m_tel(rs.getString("MGR_M_TEL")==null?"":rs.getString("MGR_M_TEL"));
				car_mgr.setMgr_email(rs.getString("MGR_EMAIL")==null?"":rs.getString("MGR_EMAIL"));
				car_mgr.setEmail_yn(rs.getString("EMAIL_YN")==null?"":rs.getString("EMAIL_YN"));
				car_mgr.setLic_no		(rs.getString("LIC_NO")==null?"":rs.getString("LIC_NO"));
				car_mgr.setLic_st		(rs.getString("LIC_ST")==null?"":rs.getString("LIC_ST"));
				car_mgr.setCom_nm		(rs.getString("COM_NM")==null?"":rs.getString("COM_NM"));
				car_mgr.setLic_result	(rs.getString("LIC_RESULT")==null?"":rs.getString("LIC_RESULT"));
				rtn.add(car_mgr);
			}
			rs.close();    
			pstmt.close(); 
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarMgr]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtn;
		}			
	}

	//계약 수정 : 법인고객차량관리자 개별 조회 (car_mgr)
	public CarMgrBean getCarMgr(String mng_id, String l_cd, String mgr_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		CarMgrBean car_mgr = new CarMgrBean();

		String query = "  select RENT_MNG_ID, RENT_L_CD, MGR_ID, rtrim(MGR_ST) MGR_ST, MGR_NM, MGR_DEPT, MGR_TITLE, MGR_TEL, MGR_M_TEL, MGR_EMAIL, MGR_ZIP, MGR_ADDR, "+
						"        LIC_NO, LIC_ST, SSN, ETC, COM_NM, LIC_RESULT "+
						" from   CAR_MGR"+
						" where  RENT_MNG_ID = ? and RENT_L_CD = ? and mgr_st = ?";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, mgr_st);
		    rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				car_mgr.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				car_mgr.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));	
				car_mgr.setMgr_id(rs.getString("MGR_ID")==null?"":rs.getString("MGR_ID"));
				car_mgr.setMgr_st(rs.getString("MGR_ST")==null?"":rs.getString("MGR_ST"));
				car_mgr.setMgr_nm(rs.getString("MGR_NM")==null?"":rs.getString("MGR_NM"));
				car_mgr.setMgr_dept(rs.getString("MGR_DEPT")==null?"":rs.getString("MGR_DEPT"));
				car_mgr.setMgr_title(rs.getString("MGR_TITLE")==null?"":rs.getString("MGR_TITLE"));
				car_mgr.setMgr_tel(rs.getString("MGR_TEL")==null?"":rs.getString("MGR_TEL"));
				car_mgr.setMgr_m_tel(rs.getString("MGR_M_TEL")==null?"":rs.getString("MGR_M_TEL"));
				car_mgr.setMgr_email(rs.getString("MGR_EMAIL")==null?"":rs.getString("MGR_EMAIL"));
				car_mgr.setMgr_zip(rs.getString("MGR_ZIP")==null?"":rs.getString("MGR_ZIP"));
				car_mgr.setMgr_addr(rs.getString("MGR_ADDR")==null?"":rs.getString("MGR_ADDR"));
				car_mgr.setLic_no		(rs.getString("LIC_NO")==null?"":rs.getString("LIC_NO"));
				car_mgr.setLic_st		(rs.getString("LIC_ST")==null?"":rs.getString("LIC_ST"));
				car_mgr.setSsn			(rs.getString("SSN")==null?"":rs.getString("SSN"));
				car_mgr.setEtc			(rs.getString("ETC")==null?"":rs.getString("ETC"));
				car_mgr.setCom_nm		(rs.getString("COM_NM")==null?"":rs.getString("COM_NM"));
				car_mgr.setLic_result	(rs.getString("LIC_RESULT")==null?"":rs.getString("LIC_RESULT"));
			}
			rs.close();    
			pstmt.close(); 
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarMgr]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return car_mgr;
		}			
	}

	//계약 수정 : 지급수수료관련 사원 정보 조회 (car_off_emp, car_off, commi, code)
	public Hashtable getCommiNInfo(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		ResultSet rs1 = null;
		ResultSet rs2 = null;
		Hashtable rtn = new Hashtable();
		String qry_bus = "";
		String qry_dlv = "";

		qry_bus = " select"+
					" e.car_off_id, e.EMP_ID, e.EMP_NM NM, e.EMP_M_TEL TEL, e.EMP_POS POS, e.EMP_EMAIL,"+
					" o.car_comp_id COMP_ID, o.car_off_nm, o.CAR_OFF_ST, o.CAR_OFF_TEL O_TEL, o.CAR_OFF_FAX FAX,"+
					" 'BUS' AGNT_ST, c.REL, d.nm COM_NM, c.commi"+
					" from car_off_emp e, car_off o, commi c, code d"+
					" where nvl(c.commi_st,'1')='1' and "+
					" e.car_off_id = o.car_off_id and"+
					" c.emp_id = e.emp_id and"+
					" c.rent_mng_id = ? and"+
					" c.rent_l_cd = ? and"+
					" c.agnt_st = '1' and"+	//영업
					" d.code = o.car_comp_id and"+
					" d.c_st = '0001'";

		qry_dlv = " select"+
					" e.car_off_id, e.EMP_ID, e.EMP_NM NM, e.EMP_M_TEL TEL, e.EMP_POS POS, e.EMP_EMAIL,"+
					" o.car_comp_id COMP_ID, o.car_off_nm, o.CAR_OFF_ST, o.CAR_OFF_TEL O_TEL, o.CAR_OFF_FAX FAX,"+
					" 'BUS' AGNT_ST, c.REL, d.nm COM_NM, c.commi"+
					" from car_off_emp e, car_off o, commi c, code d"+
					" where nvl(c.commi_st,'1')='1' and "+
					" e.car_off_id = o.car_off_id and"+
					" c.emp_id = e.emp_id and"+
					" c.rent_mng_id = ? and"+
					" c.rent_l_cd = ? and"+
					" c.agnt_st = '2' and"+	//출고
					" d.code = o.car_comp_id and"+
					" d.c_st = '0001'";
		try{	
			pstmt1 = conn.prepareStatement(qry_bus);
			pstmt1.setString(1, mng_id);
			pstmt1.setString(2, l_cd);
		    rs1 = pstmt1.executeQuery();
	    	ResultSetMetaData rsmd1 = rs1.getMetaData();
	    	Hashtable ht1 = new Hashtable();    	
			while(rs1.next())
			{				
				for(int pos =1; pos <= rsmd1.getColumnCount();pos++)
				{
					 String columnName = rsmd1.getColumnName(pos);
					 ht1.put(columnName, (rs1.getString(columnName))==null?"":rs1.getString(columnName).trim());
				}
			}
			rtn.put("BUS", ht1);

			rs1.close();   
			pstmt1.close();

			pstmt2 = conn.prepareStatement(qry_dlv);
			pstmt2.setString(1, mng_id);
			pstmt2.setString(2, l_cd);
		    rs2 = pstmt2.executeQuery();
	    	ResultSetMetaData rsmd2 = rs2.getMetaData();
	    	Hashtable ht2 = new Hashtable();    	
			while(rs2.next())
			{				
				for(int pos =1; pos <= rsmd2.getColumnCount();pos++)
				{
					 String columnName = rsmd2.getColumnName(pos);
					 ht2.put(columnName, (rs2.getString(columnName))==null?"":rs2.getString(columnName));
				}
			}
			rtn.put("DLV", ht2);

			rs2.close();   
			pstmt2.close();

		}catch (SQLException e){
			System.out.println("[AddContDatabase:getCommiNInfo]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs1 != null )		rs1.close();
                if(pstmt1 != null)		pstmt1.close();
                if(rs2 != null )		rs2.close();
                if(pstmt2 != null)		pstmt2.close();
			}catch(Exception ignore){}
				closeConnection();			
				return rtn;
		}		
	}

	//계약수정 : 대여차량 구매내역 조회 (car_pur,cont)
	public ContPurBean getContPur(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContPurBean pur = new ContPurBean();
		String query = "";
		query = " select"+
				" P.RENT_MNG_ID, P.RENT_L_CD, P.RPT_NO, P.DLV_BRCH,"+
				" decode(P.REG_EXT_DT, '', '', substr(P.REG_EXT_DT, 1, 4) || '-' || substr(P.REG_EXT_DT, 5, 2) || '-'||substr(P.REG_EXT_DT, 7, 2)) REG_EXT_DT,"+
				" decode(P.DLV_CON_DT, '', '', substr(P.DLV_CON_DT, 1, 4) || '-' || substr(P.DLV_CON_DT, 5, 2) || '-'||substr(P.DLV_CON_DT, 7, 2)) DLV_CON_DT,"+
				" decode(P.DLV_EST_DT, '', '', substr(P.DLV_EST_DT, 1, 4) || '-' || substr(P.DLV_EST_DT, 5, 2) || '-'||substr(P.DLV_EST_DT, 7, 2)) DLV_EST_DT, substr(P.dlv_est_dt,9,2) dlv_est_h,"+
				" P.TMP_DRV_NO, P.GDS_YN, P.PUR_ST, P.CON_AMT,"+
				" decode(P.CON_PAY_DT, '', '', substr(P.CON_PAY_DT, 1, 4) || '-' || substr(P.CON_PAY_DT, 5, 2) || '-'||substr(P.CON_PAY_DT, 7, 2)) CON_PAY_DT,"+
				" P.TRF_AMT1,"+
				" decode(P.TRF_PAY_DT1, '', '', substr(P.TRF_PAY_DT1, 1, 4) || '-' || substr(P.TRF_PAY_DT1, 5, 2) || '-'||substr(P.TRF_PAY_DT1, 7, 2)) TRF_PAY_DT1,"+
				" P.TRF_AMT2,"+
				" decode(P.TRF_PAY_DT2, '', '', substr(P.TRF_PAY_DT2, 1, 4) || '-' || substr(P.TRF_PAY_DT2, 5, 2) || '-'||substr(P.TRF_PAY_DT2, 7, 2)) TRF_PAY_DT2,"+
				" P.TRF_AMT3,"+
				" decode(P.TRF_PAY_DT3, '', '', substr(P.TRF_PAY_DT3, 1, 4) || '-' || substr(P.TRF_PAY_DT3, 5, 2) || '-'||substr(P.TRF_PAY_DT3, 7, 2)) TRF_PAY_DT3,"+
				" P.TRF_AMT4,"+
				" decode(P.TRF_PAY_DT4, '', '', substr(P.TRF_PAY_DT4, 1, 4) || '-' || substr(P.TRF_PAY_DT4, 5, 2) || '-'||substr(P.TRF_PAY_DT4, 7, 2)) TRF_PAY_DT4,"+
				" decode(P.TMP_DRV_ST, '', '', substr(P.TMP_DRV_ST, 1, 4) || '-' || substr(P.TMP_DRV_ST, 5, 2) || '-'||substr(P.TMP_DRV_ST, 7, 2)) TMP_DRV_ST,"+
				" decode(P.TMP_DRV_ET, '', '', substr(P.TMP_DRV_ET, 1, 4) || '-' || substr(P.TMP_DRV_ET, 5, 2) || '-'||substr(P.TMP_DRV_ET, 7, 2)) TMP_DRV_ET,"+
				" decode(P.PUR_PAY_DT, '', '', substr(P.PUR_PAY_DT, 1, 4) || '-' || substr(P.PUR_PAY_DT, 5, 2) || '-'||substr(P.PUR_PAY_DT, 7, 2)) PUR_PAY_DT,"+
				" decode(C.DLV_DT, '', '', substr(C.DLV_DT, 1, 4) || '-' || substr(C.DLV_DT, 5, 2) || '-'||substr(C.DLV_DT, 7, 2)) DLV_CON_DT,"+
				" P.dlv_ext, P.udt_st, P.udt_est_dt, P.udt_dt, P.cons_st, P.off_id, P.off_nm, P.cons_amt1, P.cons_amt2, P.jan_amt, P.con_est_dt, P.rent_ext,"+
				" P.trf_st1, P.trf_st2, P.trf_st3, P.trf_st4, P.card_kind1, P.card_kind2, P.card_kind3, P.card_kind4, P.cardno1, P.cardno2, P.cardno3, P.cardno4,"+
				" P.trf_cont1, P.trf_cont2, P.trf_cont3, P.trf_cont4, P.pur_est_dt, P.est_car_no, P.car_num, P.req_code, "+
				" P.autodocu_write_date, P.autodocu_data_no, P.dlv_ext_ven_code, P.car_off_ven_code, P.card_com_ven_code, P.one_self, P.con_amt_cont, "+
				" P.acc_st1, P.acc_st2, P.acc_st3, P.acc_st4, P.con_bank, P.con_acc_no, P.con_acc_nm, P.acq_cng_yn, P.cpt_cd, "+
				" P.com_tint, P.com_film_st, P.com_tint_coupon_no, P.com_tint_coupon_dt, P.com_tint_coupon_pay_dt, P.com_tint_coupon_reg_id, P.delay_cont, "+
				" P.dir_pur_yn, P.pur_req_dt, P.pur_bus_st, P.pur_req_yn, P.pur_com_firm, P.ecar_loc_st, "+
				" P.trf_st5, P.trf_amt5, P.card_kind5, P.cardno5, P.trf_cont5, P.trf_pay_dt5, P.acc_st5, P.con_amt_pay_req, P.trf_amt_pay_req, P.hcar_loc_st, P.trf_st0, P.acc_st0, P.trf_est_dt5 "+
				" from CAR_PUR P, cont C"+
				" where P.rent_mng_id = C.rent_mng_id and"+
				" P.rent_l_cd = C.rent_l_cd and"+
				" P.RENT_MNG_ID = ? and P.RENT_L_CD = ? ";
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
	    	rs = pstmt.executeQuery();    	
			while(rs.next())
			{
				pur.setRent_mng_id			(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				pur.setRent_l_cd			(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				pur.setRpt_no				(rs.getString("RPT_NO")==null?"":rs.getString("RPT_NO"));
				pur.setDlv_brch				(rs.getString("DLV_BRCH")==null?"":rs.getString("DLV_BRCH"));
				pur.setReg_ext_dt			(rs.getString("REG_EXT_DT")==null?"":rs.getString("REG_EXT_DT"));
				pur.setDlv_con_dt			(rs.getString("DLV_CON_DT")==null?"":rs.getString("DLV_CON_DT"));
				pur.setDlv_est_dt			(rs.getString("DLV_EST_DT")==null?"":rs.getString("DLV_EST_DT"));
				pur.setDlv_est_h			(rs.getString("DLV_EST_H")==null?"":rs.getString("DLV_EST_H"));
				pur.setTmp_drv_no			(rs.getString("TMP_DRV_NO")==null?"":rs.getString("TMP_DRV_NO"));
				pur.setGds_yn				(rs.getString("GDS_YN")==null?"":rs.getString("GDS_YN"));
				pur.setPur_st				(rs.getString("PUR_ST")==null?"":rs.getString("PUR_ST"));
				pur.setCon_amt				(rs.getString("CON_AMT")==null?0:Integer.parseInt(rs.getString("CON_AMT")));
				pur.setCon_pay_dt			(rs.getString("CON_PAY_DT")==null?"":rs.getString("CON_PAY_DT"));
				pur.setTrf_amt1				(rs.getString("TRF_AMT1")==null?0:Integer.parseInt(rs.getString("TRF_AMT1")));
				pur.setTrf_pay_dt1			(rs.getString("TRF_PAY_DT1")==null?"":rs.getString("TRF_PAY_DT1"));
				pur.setTrf_amt2				(rs.getString("TRF_AMT2")==null?0:Integer.parseInt(rs.getString("TRF_AMT2")));
				pur.setTrf_pay_dt2			(rs.getString("TRF_PAY_DT2")==null?"":rs.getString("TRF_PAY_DT2"));
				pur.setTrf_amt3				(rs.getString("TRF_AMT3")==null?0:Integer.parseInt(rs.getString("TRF_AMT3")));
				pur.setTrf_pay_dt3			(rs.getString("TRF_PAY_DT3")==null?"":rs.getString("TRF_PAY_DT3"));
				pur.setTrf_amt4				(rs.getString("TRF_AMT4")==null?0:Integer.parseInt(rs.getString("TRF_AMT4")));
				pur.setTrf_pay_dt4			(rs.getString("TRF_PAY_DT4")==null?"":rs.getString("TRF_PAY_DT4"));
				pur.setTmp_drv_st			(rs.getString("TMP_DRV_ST")==null?"":rs.getString("TMP_DRV_ST"));
				pur.setTmp_drv_et			(rs.getString("TMP_DRV_ET")==null?"":rs.getString("TMP_DRV_ET"));
				pur.setPur_pay_dt			(rs.getString("PUR_PAY_DT")==null?"":rs.getString("PUR_PAY_DT"));		
				pur.setDlv_ext				(rs.getString("dlv_ext")	==null?"":rs.getString("dlv_ext"));
				pur.setUdt_st				(rs.getString("udt_st")		==null?"":rs.getString("udt_st"));
				pur.setUdt_est_dt			(rs.getString("udt_est_dt")	==null?"":rs.getString("udt_est_dt"));
				pur.setUdt_dt				(rs.getString("udt_dt")		==null?"":rs.getString("udt_dt"));
				pur.setCons_st				(rs.getString("cons_st")	==null?"":rs.getString("cons_st"));
				pur.setOff_id				(rs.getString("off_id")		==null?"":rs.getString("off_id"));
				pur.setOff_nm				(rs.getString("off_nm")		==null?"":rs.getString("off_nm"));
				pur.setCons_amt1			(rs.getString("cons_amt1")	==null?0:Integer.parseInt(rs.getString("cons_amt1")));
				pur.setCons_amt2			(rs.getString("cons_amt2")	==null?0:Integer.parseInt(rs.getString("cons_amt2")));
				pur.setJan_amt				(rs.getString("jan_amt")	==null?0:Integer.parseInt(rs.getString("jan_amt")));
				pur.setCon_est_dt			(rs.getString("con_est_dt")	==null?"":rs.getString("con_est_dt"));
				pur.setRent_ext				(rs.getString("rent_ext")	==null?"":rs.getString("rent_ext"));
				pur.setTrf_st1				(rs.getString("trf_st1")==null?"":rs.getString("trf_st1"));
				pur.setTrf_st2				(rs.getString("trf_st2")==null?"":rs.getString("trf_st2"));
				pur.setTrf_st3				(rs.getString("trf_st3")==null?"":rs.getString("trf_st3"));		
				pur.setTrf_st4				(rs.getString("trf_st4")==null?"":rs.getString("trf_st4"));
				pur.setCard_kind1			(rs.getString("card_kind1")==null?"":rs.getString("card_kind1"));
				pur.setCard_kind2			(rs.getString("card_kind2")==null?"":rs.getString("card_kind2"));		
				pur.setCard_kind3			(rs.getString("card_kind3")==null?"":rs.getString("card_kind3"));
				pur.setCard_kind4			(rs.getString("card_kind4")==null?"":rs.getString("card_kind4"));
				pur.setCardno1				(rs.getString("cardno1")==null?"":rs.getString("cardno1"));		
				pur.setCardno2				(rs.getString("cardno2")==null?"":rs.getString("cardno2"));
				pur.setCardno3				(rs.getString("cardno3")==null?"":rs.getString("cardno3"));
				pur.setCardno4				(rs.getString("cardno4")==null?"":rs.getString("cardno4"));		
				pur.setTrf_cont1			(rs.getString("trf_cont1")==null?"":rs.getString("trf_cont1"));
				pur.setTrf_cont2			(rs.getString("trf_cont2")==null?"":rs.getString("trf_cont2"));
				pur.setTrf_cont3			(rs.getString("trf_cont3")==null?"":rs.getString("trf_cont3"));		
				pur.setTrf_cont4			(rs.getString("trf_cont4")==null?"":rs.getString("trf_cont4"));
				pur.setPur_est_dt			(rs.getString("pur_est_dt")==null?"":rs.getString("pur_est_dt"));	
				pur.setEst_car_no			(rs.getString("est_car_no")==null?"":rs.getString("est_car_no"));	
				pur.setCar_num				(rs.getString("car_num")==null?"":rs.getString("car_num"));	
				pur.setReq_code				(rs.getString("req_code")==null?"":rs.getString("req_code"));	
				pur.setAutodocu_write_date	(rs.getString("autodocu_write_date")==null?"":rs.getString("autodocu_write_date"));	
				pur.setAutodocu_data_no		(rs.getString("autodocu_data_no")==null?"":rs.getString("autodocu_data_no"));	
				pur.setDlv_ext_ven_code		(rs.getString("dlv_ext_ven_code")==null?"":rs.getString("dlv_ext_ven_code"));	
				pur.setCar_off_ven_code		(rs.getString("car_off_ven_code")==null?"":rs.getString("car_off_ven_code"));	
				pur.setCard_com_ven_code	(rs.getString("card_com_ven_code")==null?"":rs.getString("card_com_ven_code"));	
				pur.setOne_self				(rs.getString("one_self")==null?"":rs.getString("one_self"));	
				pur.setCon_amt_cont			(rs.getString("con_amt_cont")==null?"":rs.getString("con_amt_cont"));	
				pur.setAcc_st1				(rs.getString("acc_st1")==null?"":rs.getString("acc_st1"));
				pur.setAcc_st2				(rs.getString("acc_st2")==null?"":rs.getString("acc_st2"));
				pur.setAcc_st3				(rs.getString("acc_st3")==null?"":rs.getString("acc_st3"));		
				pur.setAcc_st4				(rs.getString("acc_st4")==null?"":rs.getString("acc_st4"));
				pur.setCon_bank				(rs.getString("con_bank")==null?"":rs.getString("con_bank"));
				pur.setCon_acc_no			(rs.getString("con_acc_no")==null?"":rs.getString("con_acc_no"));
				pur.setCon_acc_nm			(rs.getString("con_acc_nm")==null?"":rs.getString("con_acc_nm"));
				pur.setAcq_cng_yn			(rs.getString("acq_cng_yn")==null?"":rs.getString("acq_cng_yn"));
				pur.setCpt_cd				(rs.getString("cpt_cd")==null?"":rs.getString("cpt_cd"));
				pur.setCom_tint				(rs.getString("com_tint")==null?"":rs.getString("com_tint"));
				pur.setCom_film_st			(rs.getString("com_film_st")==null?"":rs.getString("com_film_st"));
				pur.setCom_tint_coupon_no	(rs.getString("com_tint_coupon_no")==null?"":rs.getString("com_tint_coupon_no"));		
				pur.setCom_tint_coupon_dt	(rs.getString("com_tint_coupon_dt")==null?"":rs.getString("com_tint_coupon_dt"));
				pur.setCom_tint_coupon_pay_dt	(rs.getString("com_tint_coupon_pay_dt")==null?"":rs.getString("com_tint_coupon_pay_dt"));
				pur.setCom_tint_coupon_reg_id	(rs.getString("com_tint_coupon_reg_id")==null?"":rs.getString("com_tint_coupon_reg_id"));
				pur.setDelay_cont			(rs.getString("delay_cont")==null?"":rs.getString("delay_cont"));
				pur.setDir_pur_yn			(rs.getString("dir_pur_yn")==null?"":rs.getString("dir_pur_yn"));
				pur.setPur_req_dt			(rs.getString("pur_req_dt")==null?"":rs.getString("pur_req_dt"));
				pur.setPur_bus_st			(rs.getString("pur_bus_st")==null?"":rs.getString("pur_bus_st"));
				pur.setPur_req_yn			(rs.getString("pur_req_yn")==null?"":rs.getString("pur_req_yn"));
				pur.setPur_com_firm			(rs.getString("pur_com_firm")==null?"":rs.getString("pur_com_firm"));
				pur.setEcar_loc_st			(rs.getString("ecar_loc_st")==null?"":rs.getString("ecar_loc_st"));
				pur.setTrf_st5				(rs.getString("trf_st5")	==null?"":rs.getString("trf_st5"));
				pur.setTrf_amt5				(rs.getString("trf_amt5")	==null?0:Integer.parseInt(rs.getString("trf_amt5")));
				pur.setCard_kind5			(rs.getString("card_kind5")	==null?"":rs.getString("card_kind5"));
				pur.setCardno5				(rs.getString("cardno5")	==null?"":rs.getString("cardno5"));
				pur.setTrf_cont5			(rs.getString("trf_cont5")	==null?"":rs.getString("trf_cont5"));
				pur.setTrf_pay_dt5			(rs.getString("trf_pay_dt5")==null?"":rs.getString("trf_pay_dt5"));
				pur.setAcc_st5				(rs.getString("acc_st5")	==null?"":rs.getString("acc_st5"));
				pur.setCon_amt_pay_req		(rs.getString("con_amt_pay_req")==null?"":rs.getString("con_amt_pay_req"));
				pur.setTrf_amt_pay_req		(rs.getString("trf_amt_pay_req")==null?"":rs.getString("trf_amt_pay_req"));
				pur.setHcar_loc_st			(rs.getString("hcar_loc_st")==null?"":rs.getString("hcar_loc_st"));
				pur.setTrf_st0				(rs.getString("trf_st0")	==null?"":rs.getString("trf_st0"));
				pur.setAcc_st0				(rs.getString("acc_st0")	==null?"":rs.getString("acc_st0"));
				pur.setTrf_est_dt5			(rs.getString("trf_est_dt5")==null?"":rs.getString("trf_est_dt5"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContPur]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return pur;
		}				
	}

	//계약수정 : 대여차량 구매내역 수정 (car_pur)
	public boolean updateContPur(ContPurBean pur)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_PUR set "+
							" RPT_NO				= UPPER(?), "+
							" DLV_BRCH				= ?, "+
							" REG_EXT_DT			= replace(?, '-', ''),"+
							" DLV_CON_DT			= replace(?, '-', ''),"+
							" DLV_EST_DT			= replace(replace(?, ' ', ''), '-', ''),"+
							" TMP_DRV_NO			= ?, "+
							" GDS_YN				= ?, "+
							" PUR_ST				= ?, "+
							" CON_AMT				= ?, "+
							" CON_PAY_DT			= replace(?, '-', ''), "+
							" TRF_AMT1				= ?, "+
							" TRF_PAY_DT1			= replace(?, '-', ''), "+
							" TRF_AMT2				= ?, "+
							" TRF_PAY_DT2			= replace(?, '-', ''), "+
							" TRF_AMT3				= ?, "+
							" TRF_PAY_DT3			= replace(?, '-', ''), "+
							" TRF_AMT4				= ?, "+
							" TRF_PAY_DT4			= replace(?, '-', ''), "+
							" TMP_DRV_ST			= replace(?, '-', ''), "+
							" TMP_DRV_ET			= replace(?, '-', ''), "+
							" PUR_PAY_DT			= replace(?, '-', ''), "+
							" dlv_ext				= ?, "+
							" udt_st				= ?, "+
							" udt_est_dt			= replace(?, '-', ''), "+
							" udt_dt				= replace(?, '-', ''), "+
							" cons_st				= ?, "+
							" off_id				= ?, "+
							" off_nm				= ?, "+
							" cons_amt1				= ?, "+
							" cons_amt2				= ?, "+
							" jan_amt				= ?, "+
							" con_est_dt			= replace(?, '-', ''), "+
							" rent_ext				= ?, "+
							" trf_st1				= ?, "+
							" trf_st2				= ?, "+
							" trf_st3				= ?, "+
							" trf_st4				= ?, "+
							" card_kind1			= ?, "+
							" card_kind2			= ?, "+
							" card_kind3			= ?, "+
							" card_kind4			= ?, "+
							" cardno1				= ?, "+
							" cardno2				= ?, "+
							" cardno3				= ?, "+
							" cardno4				= ?, "+
							" trf_cont1				= ?, "+
							" trf_cont2				= ?, "+
							" trf_cont3				= ?, "+
							" trf_cont4				= ?, "+
							" pur_est_dt			= replace(?, '-', ''), "+
							" est_car_no			= ?, "+
							" car_num				= ?, "+
							" req_code				= ?, "+
							" dlv_ext_ven_code		= replace(?, ' ', ''), "+
							" car_off_ven_code		= replace(?, ' ', ''), "+
							" card_com_ven_code		= replace(?, ' ', ''), "+
							" autodocu_write_date	= replace(?, '-', ''), "+
							" autodocu_data_no		= ?, "+
							" one_self				= ?, "+
							" con_amt_cont			= ?, "+
							" acc_st1				= ?, "+
							" acc_st2				= ?, "+
							" acc_st3				= ?, "+
							" acc_st4				= ?, "+
							" con_bank 				= ?, "+
							" con_acc_no			= ?, "+
							" con_acc_nm			= ?, "+
							" acq_cng_yn			= ?, "+
							" cpt_cd				= ?, "+
							" com_tint				= ?, "+
							" com_film_st			= ?, "+
							" com_tint_coupon_no	= ?, "+
							" com_tint_coupon_dt	= replace(?, '-', ''), "+
							" com_tint_coupon_pay_dt= replace(?, '-', ''), "+
							" com_tint_coupon_reg_id= ?,  "+
							" dir_pur_yn			= ?,  "+
							" pur_req_dt			= replace(?, '-', ''), "+
							" pur_bus_st			= ?,  "+
							" pur_req_yn			= ?,  "+
							" pur_com_firm			= ?,  "+
							" ecar_loc_st			= ?,  "+

							" trf_st5				= ?, "+
							" TRF_AMT5				= ?, "+
							" card_kind5			= ?, "+
							" cardno5				= ?, "+
							" trf_cont5				= ?, "+
							" TRF_PAY_DT5			= replace(?, '-', ''), "+
							" acc_st5				= ?,  "+
							" hcar_loc_st			= ?,  "+

							" trf_st0				= ?, "+
							" acc_st0				= ?,  "+
							" trf_est_dt5			= replace(?, '-', '') "+
							
							
						" where RENT_MNG_ID = ? and RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  pur.getRpt_no				().trim());
			pstmt.setString(2,  pur.getDlv_brch				());
			pstmt.setString(3,  pur.getReg_ext_dt			());
			pstmt.setString(4,  pur.getDlv_con_dt			());
			pstmt.setString(5,  pur.getDlv_est_dt			());
			pstmt.setString(6,  pur.getTmp_drv_no			());
			pstmt.setString(7,  pur.getGds_yn				());
			pstmt.setString(8,  pur.getPur_st				());
			pstmt.setInt   (9,  pur.getCon_amt				());
			pstmt.setString(10, pur.getCon_pay_dt			());
			pstmt.setInt   (11, pur.getTrf_amt1				());
			pstmt.setString(12, pur.getTrf_pay_dt1			());
			pstmt.setInt   (13, pur.getTrf_amt2				());
			pstmt.setString(14, pur.getTrf_pay_dt2			());
			pstmt.setInt   (15, pur.getTrf_amt3				());
			pstmt.setString(16, pur.getTrf_pay_dt3			());
			pstmt.setInt   (17, pur.getTrf_amt4				());
			pstmt.setString(18, pur.getTrf_pay_dt4			());
			pstmt.setString(19, pur.getTmp_drv_st			());
			pstmt.setString(20, pur.getTmp_drv_et			());
			pstmt.setString(21, pur.getPur_pay_dt			());
			pstmt.setString(22, pur.getDlv_ext				());
			pstmt.setString(23, pur.getUdt_st				());
			pstmt.setString(24, pur.getUdt_est_dt			());
			pstmt.setString(25, pur.getUdt_dt				());
			pstmt.setString(26, pur.getCons_st				());
			pstmt.setString(27, pur.getOff_id				());
			pstmt.setString(28, pur.getOff_nm				());
			pstmt.setInt   (29, pur.getCons_amt1			());
			pstmt.setInt   (30, pur.getCons_amt2			());
			pstmt.setInt   (31, pur.getJan_amt				());
			pstmt.setString(32, pur.getCon_est_dt			());
			pstmt.setString(33, pur.getRent_ext				());
			pstmt.setString(34, pur.getTrf_st1				());
			pstmt.setString(35, pur.getTrf_st2				());
			pstmt.setString(36, pur.getTrf_st3				());
			pstmt.setString(37, pur.getTrf_st4				());
			pstmt.setString(38, pur.getCard_kind1			());
			pstmt.setString(39, pur.getCard_kind2			());
			pstmt.setString(40, pur.getCard_kind3			());
			pstmt.setString(41, pur.getCard_kind4			());
			pstmt.setString(42, pur.getCardno1				());
			pstmt.setString(43, pur.getCardno2				());
			pstmt.setString(44, pur.getCardno3				());
			pstmt.setString(45, pur.getCardno4				());
			pstmt.setString(46, pur.getTrf_cont1			());
			pstmt.setString(47, pur.getTrf_cont2			());
			pstmt.setString(48, pur.getTrf_cont3			());
			pstmt.setString(49, pur.getTrf_cont4			());
			pstmt.setString(50, pur.getPur_est_dt			());
			pstmt.setString(51, pur.getEst_car_no			());
			pstmt.setString(52, pur.getCar_num				());
			pstmt.setString(53, pur.getReq_code				());
			pstmt.setString(54, pur.getDlv_ext_ven_code		());
			pstmt.setString(55, pur.getCar_off_ven_code		());
			pstmt.setString(56, pur.getCard_com_ven_code	());
			pstmt.setString(57, pur.getAutodocu_write_date	());
			pstmt.setString(58, pur.getAutodocu_data_no		());
		    pstmt.setString(59, pur.getOne_self			    ());
		    pstmt.setString(60, pur.getCon_amt_cont		    ());
			pstmt.setString(61, pur.getAcc_st1				());
			pstmt.setString(62, pur.getAcc_st2				());
			pstmt.setString(63, pur.getAcc_st3				());
			pstmt.setString(64, pur.getAcc_st4				());
			pstmt.setString(65, pur.getCon_bank				());
			pstmt.setString(66, pur.getCon_acc_no			());
			pstmt.setString(67, pur.getCon_acc_nm			());
			pstmt.setString(68, pur.getAcq_cng_yn			());
			pstmt.setString(69, pur.getCpt_cd				());
			pstmt.setString(70, pur.getCom_tint				());
			pstmt.setString(71, pur.getCom_film_st			());
			pstmt.setString(72, pur.getCom_tint_coupon_no	());
			pstmt.setString(73, pur.getCom_tint_coupon_dt	());
			pstmt.setString(74, pur.getCom_tint_coupon_pay_dt());
			pstmt.setString(75, pur.getCom_tint_coupon_reg_id());
		    pstmt.setString(76, pur.getDir_pur_yn			());
			pstmt.setString(77, pur.getPur_req_dt			());
			pstmt.setString(78, pur.getPur_bus_st			());
			pstmt.setString(79, pur.getPur_req_yn			());
			pstmt.setString(80, pur.getPur_com_firm			());
			pstmt.setString(81, pur.getEcar_loc_st			());

			pstmt.setString(82, pur.getTrf_st5				());
			pstmt.setInt   (83, pur.getTrf_amt5				());
			pstmt.setString(84, pur.getCard_kind5			());
			pstmt.setString(85, pur.getCardno5				());
			pstmt.setString(86, pur.getTrf_cont5			());
			pstmt.setString(87, pur.getTrf_pay_dt5			());
			pstmt.setString(88, pur.getAcc_st5				());
			pstmt.setString(89, pur.getHcar_loc_st			());
			
			pstmt.setString(90, pur.getTrf_st0				());
			pstmt.setString(91, pur.getAcc_st0				());
			pstmt.setString(92, pur.getTrf_est_dt5			());

		    pstmt.setString(93, pur.getRent_mng_id			());
			pstmt.setString(94, pur.getRent_l_cd			());

			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();

	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContPur]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	/**
	 * 임시차량번호 수정
	 * 영업관리 > 계출관리 > 납품준비상황 > 차량번호 팝업에서 임시차량번호 수정
	 * 2017. 12. 07
	 */
	public boolean updateTmpDrvNo(String tmp_drv_no, String m_id, String l_cd){
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update car_pur set tmp_drv_no=? where rent_mng_id=? and rent_l_cd=?";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, tmp_drv_no);
			pstmt.setString(2, m_id);
			pstmt.setString(3, l_cd);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateTmpDrvNo]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	
	/** 계약수정 : 대여사항 조회 (fee)
	 *	대여료 Bean 세팅
	 *  gubun - 1: 신규대여료, 2: 연장대여료
	 */
	public ContFeeBean getContFee(String mng_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContFeeBean fee = new ContFeeBean();
		String query = "";
		if(rent_st.equals("")) rent_st = "1";

		query = " select"+
				" RENT_MNG_ID, RENT_L_CD, RENT_ST, RENT_WAY, CAR_ST, CON_MON,"+
				" PRV_DLV_YN, PRV_CAR_MNG_ID,"+
				" decode(RENT_DT, '', '', substr(RENT_DT, 1, 4) || '-' || substr(RENT_DT, 5, 2) || '-'||substr(RENT_DT, 7, 2)) RENT_DT,"+
				" decode(RENT_START_DT, '', '', substr(RENT_START_DT, 1, 4) || '-' || substr(RENT_START_DT, 5, 2) || '-'||substr(RENT_START_DT, 7, 2)) RENT_START_DT,"+
				" decode(RENT_END_DT, '', '', substr(RENT_END_DT, 1, 4) || '-' || substr(RENT_END_DT, 5, 2) || '-'||substr(RENT_END_DT, 7, 2)) RENT_END_DT,"+
				" decode(PRV_START_DT, '', '', substr(PRV_START_DT, 1, 4) || '-' || substr(PRV_START_DT, 5, 2) || '-'||substr(PRV_START_DT, 7, 2)) PRV_START_DT,"+
				" decode(PRV_END_DT, '', '', substr(PRV_END_DT, 1, 4) || '-' || substr(PRV_END_DT, 5, 2) || '-'||substr(PRV_END_DT, 7, 2)) PRV_END_DT,"+
				" GRT_AMT_S, GRT_ETC,"+
				" decode(GRT_EST_DT, '', '', substr(GRT_EST_DT, 1, 4) || '-' || substr(GRT_EST_DT, 5, 2) || '-'||substr(GRT_EST_DT, 7, 2)) GRT_EST_DT,"+
				" GRT_PAY_YN, PP_S_AMT, PP_V_AMT, PP_ETC,"+
				" decode(PP_EST_DT, '', '', substr(PP_EST_DT, 1, 4) || '-' || substr(PP_EST_DT, 5, 2) || '-'||substr(PP_EST_DT, 7, 2)) PP_EST_DT,"+
				" PP_PAY_YN, IFEE_S_AMT, IFEE_V_AMT, IFEE_ETC,"+
				" decode(IFEE_EST_DT, '', '', substr(IFEE_EST_DT, 1, 4) || '-' || substr(IFEE_EST_DT, 5, 2) || '-'||substr(IFEE_EST_DT, 7, 2)) IFEE_EST_DT,"+
				" IFEE_PAY_YN, INV_S_AMT, INV_V_AMT, INV_ETC, OPT_S_AMT, OPT_V_AMT, OPT_YN, OPT_ETC,"+
				" FEE_S_AMT, FEE_V_AMT, FEE_ETC, FEE_ST, FEE_REQ_DAY, FEE_EST_DAY, FEE_BANK, FEE_PAY_ST,"+
				" rtrim(FEE_PAY_TM) FEE_PAY_TM, FEE_FST_AMT, FEE_CDT, EXT_AGNT,"+
				" decode(FEE_PAY_START_DT, '', '', substr(FEE_PAY_START_DT, 1, 4) || '-' || substr(FEE_PAY_START_DT, 5, 2) || '-'||substr(FEE_PAY_START_DT, 7, 2)) FEE_PAY_START_DT,"+
				" decode(FEE_PAY_END_DT, '', '', substr(FEE_PAY_END_DT, 1, 4) || '-' || substr(FEE_PAY_END_DT, 5, 2) || '-'||substr(FEE_PAY_END_DT, 7, 2)) FEE_PAY_END_DT,"+
				" decode(FEE_FST_DT, '', '', substr(FEE_FST_DT, 1, 4) || '-' || substr(FEE_FST_DT, 5, 2) || '-'||substr(FEE_FST_DT, 7, 2)) FEE_FST_DT,"+
				" BR_ID, rtrim(RC_DAY) rc_day, NEXT_YN, OPT_CHK, FEE_SH, PRV_MON_YN, FEE_CHK, OPT_PER, GRT_SUC_YN, IFEE_SUC_YN, leave_day, cls_per"+
				" from FEE "+
				" where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ?";
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_st);
	    	rs = pstmt.executeQuery();    	
			while(rs.next())
			{
				fee.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				fee.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				fee.setRent_st(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				fee.setRent_way(rs.getString("RENT_WAY")==null?"":rs.getString("RENT_WAY"));
				fee.setCar_st(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				fee.setCon_mon(rs.getString("CON_MON")==null?"":rs.getString("CON_MON"));
				fee.setRent_dt(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT"));
				fee.setRent_start_dt(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				fee.setRent_end_dt(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				fee.setPrv_dlv_yn(rs.getString("PRV_DLV_YN")==null?"":rs.getString("PRV_DLV_YN"));
				fee.setPrv_car_mng_id(rs.getString("PRV_CAR_MNG_ID")==null?"":rs.getString("PRV_CAR_MNG_ID"));
				fee.setPrv_start_dt(rs.getString("PRV_START_DT")==null?"":rs.getString("PRV_START_DT"));
				fee.setPrv_end_dt(rs.getString("PRV_END_DT")==null?"":rs.getString("PRV_END_DT"));
				fee.setGrt_amt_s(rs.getString("GRT_AMT_S")==null?0:Integer.parseInt(rs.getString("GRT_AMT_S")));
				fee.setGrt_etc(rs.getString("GRT_ETC")==null?"":rs.getString("GRT_ETC"));
				fee.setGrt_est_dt(rs.getString("GRT_EST_DT")==null?"":rs.getString("GRT_EST_DT"));
				fee.setGrt_pay_yn(rs.getString("GRT_PAY_YN")==null?"":rs.getString("GRT_PAY_YN"));
				fee.setPp_s_amt(rs.getString("PP_S_AMT")==null?0:Integer.parseInt(rs.getString("PP_S_AMT")));
				fee.setPp_v_amt(rs.getString("PP_V_AMT")==null?0:Integer.parseInt(rs.getString("PP_V_AMT")));
				fee.setPp_etc(rs.getString("PP_ETC")==null?"":rs.getString("PP_ETC"));
				fee.setPp_est_dt(rs.getString("PP_EST_DT")==null?"":rs.getString("PP_EST_DT"));
				fee.setPp_pay_yn(rs.getString("PP_PAY_YN")==null?"":rs.getString("PP_PAY_YN"));
				fee.setIfee_s_amt(rs.getString("IFEE_S_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_S_AMT")));
				fee.setIfee_v_amt(rs.getString("IFEE_V_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_V_AMT")));
				fee.setIfee_etc(rs.getString("IFEE_ETC")==null?"":rs.getString("IFEE_ETC"));
				fee.setIfee_est_dt(rs.getString("IFEE_EST_DT")==null?"":rs.getString("IFEE_EST_DT"));
				fee.setIfee_pay_yn(rs.getString("IFEE_PAY_YN")==null?"":rs.getString("IFEE_PAY_YN"));
				fee.setInv_s_amt(rs.getString("INV_S_AMT")==null?0:Integer.parseInt(rs.getString("INV_S_AMT")));
				fee.setInv_v_amt(rs.getString("INV_V_AMT")==null?0:Integer.parseInt(rs.getString("INV_V_AMT")));
				fee.setInv_etc(rs.getString("INV_ETC")==null?"":rs.getString("INV_ETC"));
				fee.setOpt_s_amt(rs.getString("OPT_S_AMT")==null?0:Integer.parseInt(rs.getString("OPT_S_AMT")));
				fee.setOpt_v_amt(rs.getString("OPT_V_AMT")==null?0:Integer.parseInt(rs.getString("OPT_V_AMT")));
				fee.setOpt_etc(rs.getString("OPT_ETC")==null?"":rs.getString("OPT_ETC"));
				fee.setOpt_yn(rs.getString("OPT_YN")==null?"":rs.getString("OPT_YN"));
				fee.setFee_s_amt(rs.getString("FEE_S_AMT")==null?0:Integer.parseInt(rs.getString("FEE_S_AMT")));
				fee.setFee_v_amt(rs.getString("FEE_V_AMT")==null?0:Integer.parseInt(rs.getString("FEE_V_AMT")));
				fee.setFee_etc(rs.getString("FEE_ETC")==null?"":rs.getString("FEE_ETC"));
				fee.setFee_st(rs.getString("FEE_ST")==null?"":rs.getString("FEE_ST"));
				fee.setFee_req_day(rs.getString("FEE_REQ_DAY")==null?"":rs.getString("FEE_REQ_DAY"));
				fee.setFee_est_day(rs.getString("FEE_EST_DAY")==null?"":rs.getString("FEE_EST_DAY"));
				fee.setFee_bank(rs.getString("FEE_BANK")==null?"":rs.getString("FEE_BANK"));
				fee.setFee_pay_st(rs.getString("FEE_PAY_ST")==null?"":rs.getString("FEE_PAY_ST"));
				fee.setFee_pay_tm(rs.getString("FEE_PAY_TM")==null?"":rs.getString("FEE_PAY_TM"));
				fee.setFee_pay_start_dt(rs.getString("FEE_PAY_START_DT")==null?"":rs.getString("FEE_PAY_START_DT"));
				fee.setFee_pay_end_dt(rs.getString("FEE_PAY_END_DT")==null?"":rs.getString("FEE_PAY_END_DT"));
				fee.setFee_fst_dt(rs.getString("FEE_FST_DT")==null?"":rs.getString("FEE_FST_DT"));
				fee.setFee_fst_amt(rs.getString("FEE_FST_AMT")==null?0:Integer.parseInt(rs.getString("FEE_FST_AMT")));
				fee.setFee_cdt(rs.getString("FEE_CDT")==null?"":rs.getString("FEE_CDT"));
				fee.setExt_agnt(rs.getString("EXT_AGNT")==null?"":rs.getString("EXT_AGNT"));
				fee.setBr_id(rs.getString("BR_ID")==null?"":rs.getString("BR_ID"));
				fee.setRc_day(rs.getString("RC_DAY")==null?"":rs.getString("RC_DAY"));
				fee.setNext_yn(rs.getString("NEXT_YN")==null?"":rs.getString("NEXT_YN"));
				fee.setOpt_chk(rs.getString("OPT_CHK")==null?"":rs.getString("OPT_CHK"));
				fee.setFee_sh(rs.getString("FEE_SH")==null?"":rs.getString("FEE_SH"));
				fee.setPrv_mon_yn(rs.getString("PRV_MON_YN")==null?"":rs.getString("PRV_MON_YN"));
				fee.setFee_chk(rs.getString("FEE_CHK")==null?"":rs.getString("FEE_CHK"));
				fee.setOpt_per(rs.getString("OPT_PER")==null?"":rs.getString("OPT_PER"));
				fee.setGrt_suc_yn(rs.getString("GRT_SUC_YN")==null?"":rs.getString("GRT_SUC_YN"));
				fee.setIfee_suc_yn(rs.getString("IFEE_SUC_YN")==null?"":rs.getString("IFEE_SUC_YN"));
				fee.setLeave_day(rs.getString("leave_day")==null?"":rs.getString("leave_day"));
				fee.setCls_per(rs.getString("cls_per")==null?"":rs.getString("cls_per"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFee]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee;
		}
	}

	/*  계약 수정 : 대여료 스케줄 생성 여부
	 *  gubun -  1: 신규대여료, 2: 연장대여료	 */
	public String getFeeScdYn(String m_id, String l_cd, String gubun)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String rtnStr = "";
		String query = " select count(*) "+
						" from SCD_FEE "+
						" where rent_mng_id = ? and rent_l_cd = ? and rent_st = ? and tm_st2!='2'";
		
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, gubun);
		   	rs = pstmt.executeQuery();
			while(rs.next())
			{
				rtnStr = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e){
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtnStr;
		}							
	}

	/*  계약 수정 : 대여료 스케줄 생성 여부
	 *  gubun -  1: 신규대여료, 2: 연장대여료	 */
	public String getFeeScdYn(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String rtnStr = "";
		String query = " select max(rent_st)"+
						" from SCD_FEE "+
						" where rent_mng_id = ? and rent_l_cd = ?";
		
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();
			while(rs.next())
			{
				rtnStr = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e){
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtnStr;
		}							
	}

	/*  계약 수정 : 출고전 대차 대여료 스케줄 생성 여부 */
	public String getFeeScdYn_tae(String m_id, String l_cd, String tae_no)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String rtnStr = "";
		String query = " select count(*) "+
						" from SCD_FEE "+
						" where rent_mng_id = ? and rent_l_cd = ? and tae_no = ? and tm_st2='2'";
		
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, tae_no);
		   	rs = pstmt.executeQuery();
			while(rs.next())
			{
				rtnStr = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e){
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtnStr;
		}							
	}

	//계약수정 : 출고전대차 조회 (taecha,car_reg)
	public Vector getContTaecha(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector taec = new Vector();
		String query = "";
		query = " select"+
				" DISTINCT t.NO, t.RENT_MNG_ID, t.RENT_L_CD, t.CAR_MNG_ID, t.CAR_NO, t.CAR_ID, t.BAE_USER_ID, t.rent_fee_st, t.rent_fee_cls, "+
				" t.CAR_KM, t.BAN_USER_ID, t.RENT_FEE, t.CAR_RENT_TM, f.TM_ST2, t.req_st,"+
				" decode(t.CAR_RENT_DT, '', '', substr(t.CAR_RENT_DT, 1, 4) || '-' || substr(t.CAR_RENT_DT, 5, 2) || '-'||substr(t.CAR_RENT_DT, 7, 2)) CAR_RENT_DT,"+
				" decode(t.CAR_RENT_ST, '', '', substr(t.CAR_RENT_ST, 1, 4) || '-' || substr(t.CAR_RENT_ST, 5, 2) || '-'||substr(t.CAR_RENT_ST, 7, 2)) CAR_RENT_ST,"+
				" decode(t.CAR_RENT_ET, '', '', substr(t.CAR_RENT_ET, 1, 4) || '-' || substr(t.CAR_RENT_ET, 5, 2) || '-'||substr(t.CAR_RENT_ET, 7, 2)) CAR_RENT_ET "+
				" from taecha t, scd_fee f "+
				" where t.RENT_MNG_ID = ?"+
				" and t.RENT_L_CD = ?"+	
				" and t.RENT_MNG_ID = f.RENT_MNG_ID(+)"+
				" and t.RENT_L_CD = f.RENT_L_CD(+)"+
				" and t.NO = f.TAE_NO(+)";
		try {			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
	    	rs = pstmt.executeQuery();    	
			while(rs.next())
			{
				ContTaechaBean taecha = new ContTaechaBean();
				taecha.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				taecha.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				taecha.setNo(rs.getString("NO")==null?"":rs.getString("NO"));
				taecha.setCar_mng_id(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
				taecha.setCar_no(rs.getString("CAR_NO")==null?"":rs.getString("CAR_NO"));
				taecha.setCar_id(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
				taecha.setBae_user_id(rs.getString("BAE_USER_ID")==null?"":rs.getString("BAE_USER_ID"));
				taecha.setCar_km(rs.getString("CAR_KM")==null?"":rs.getString("CAR_KM"));
				taecha.setCar_rent_dt(rs.getString("CAR_RENT_DT")==null?"":rs.getString("CAR_RENT_DT"));
				taecha.setCar_rent_st(rs.getString("CAR_RENT_ST")==null?"":rs.getString("CAR_RENT_ST"));
				taecha.setCar_rent_et(rs.getString("CAR_RENT_ET")==null?"":rs.getString("CAR_RENT_ET"));
				taecha.setBan_user_id(rs.getString("BAN_USER_ID")==null?"":rs.getString("BAN_USER_ID"));
				taecha.setRent_fee(rs.getString("RENT_FEE")==null?"":rs.getString("RENT_FEE"));
				taecha.setCar_rent_tm(rs.getString("CAR_RENT_TM")==null?"":rs.getString("CAR_RENT_TM"));
				taecha.setTm_st2(rs.getString("TM_ST2")==null?"":rs.getString("TM_ST2"));
				taecha.setReq_st(rs.getString("req_st")==null?"":rs.getString("req_st"));
				taecha.setRent_fee_st(rs.getString("RENT_FEE_ST")==null?"":rs.getString("RENT_FEE_ST"));
				taecha.setRent_fee_cls(rs.getString("RENT_FEE_CLS")==null?"":rs.getString("RENT_FEE_CLS"));
				taec.add(taecha);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContTaecha]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return taec;
		}
	}
	
	//계약수정 : 출고전대차 조회 (taecha,car_reg)
	public ContTaechaBean getContTaechaCase(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContTaechaBean taecha = new ContTaechaBean();
		String query = "";
		query = " select"+
				" DISTINCT t.NO, t.RENT_MNG_ID, t.RENT_L_CD, t.CAR_MNG_ID, t.CAR_NO, t.CAR_ID, t.BAE_USER_ID, t.rent_fee_st, t.rent_fee_cls, "+
				" t.CAR_KM, t.BAN_USER_ID, t.RENT_FEE, t.CAR_RENT_TM, f.TM_ST2, t.req_st, t.tae_st,"+
				" decode(t.CAR_RENT_DT, '', '', substr(t.CAR_RENT_DT, 1, 4) || '-' || substr(t.CAR_RENT_DT, 5, 2) || '-'||substr(t.CAR_RENT_DT, 7, 2)) CAR_RENT_DT,"+
				" decode(t.CAR_RENT_ST, '', '', substr(t.CAR_RENT_ST, 1, 4) || '-' || substr(t.CAR_RENT_ST, 5, 2) || '-'||substr(t.CAR_RENT_ST, 7, 2)) CAR_RENT_ST,"+
				" decode(t.CAR_RENT_ET, '', '', substr(t.CAR_RENT_ET, 1, 4) || '-' || substr(t.CAR_RENT_ET, 5, 2) || '-'||substr(t.CAR_RENT_ET, 7, 2)) CAR_RENT_ET, "+
				" t.f_req_yn, t.f_req_dt "+
				" from taecha t, scd_fee f "+
				" where t.RENT_MNG_ID = ?"+
				" and t.RENT_L_CD = ?"+	
				" and t.RENT_MNG_ID = f.RENT_MNG_ID(+)"+
				" and t.RENT_L_CD = f.RENT_L_CD(+)"+
				" and t.NO = f.TAE_NO(+)";
		try {			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
	    	rs = pstmt.executeQuery();    	
			if(rs.next())
			{				
				taecha.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				taecha.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				taecha.setNo(rs.getString("NO")==null?"":rs.getString("NO"));
				taecha.setCar_mng_id(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
				taecha.setCar_no(rs.getString("CAR_NO")==null?"":rs.getString("CAR_NO"));
				taecha.setCar_id(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
				taecha.setBae_user_id(rs.getString("BAE_USER_ID")==null?"":rs.getString("BAE_USER_ID"));
				taecha.setCar_km(rs.getString("CAR_KM")==null?"":rs.getString("CAR_KM"));
				taecha.setCar_rent_dt(rs.getString("CAR_RENT_DT")==null?"":rs.getString("CAR_RENT_DT"));
				taecha.setCar_rent_st(rs.getString("CAR_RENT_ST")==null?"":rs.getString("CAR_RENT_ST"));
				taecha.setCar_rent_et(rs.getString("CAR_RENT_ET")==null?"":rs.getString("CAR_RENT_ET"));
				taecha.setBan_user_id(rs.getString("BAN_USER_ID")==null?"":rs.getString("BAN_USER_ID"));
				taecha.setRent_fee(rs.getString("RENT_FEE")==null?"":rs.getString("RENT_FEE"));
				taecha.setCar_rent_tm(rs.getString("CAR_RENT_TM")==null?"":rs.getString("CAR_RENT_TM"));
				taecha.setTm_st2(rs.getString("TM_ST2")==null?"":rs.getString("TM_ST2"));
				taecha.setReq_st(rs.getString("req_st")==null?"":rs.getString("req_st"));
				taecha.setTae_st(rs.getString("tae_st")==null?"":rs.getString("tae_st"));
				taecha.setF_req_yn(rs.getString("f_req_yn")==null?"":rs.getString("f_req_yn"));
				taecha.setF_req_dt(rs.getString("f_req_dt")==null?"":rs.getString("f_req_dt"));
				taecha.setRent_fee_st(rs.getString("RENT_FEE_ST")==null?"":rs.getString("RENT_FEE_ST"));
				taecha.setRent_fee_cls(rs.getString("RENT_FEE_CLS")==null?"":rs.getString("RENT_FEE_CLS"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContTaechaCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return taecha;
		}
	}
	
	//계약수정 : 출고전대차 조회 (taecha,car_reg)
		public ContTaechaBean getContTaechaCase(String mng_id, String l_cd, String no)
		{
			getConnection();
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			ContTaechaBean taecha = new ContTaechaBean();
			String query = "";
			query = " select"+
					" DISTINCT t.NO, t.RENT_MNG_ID, t.RENT_L_CD, t.CAR_MNG_ID, t.CAR_NO, t.CAR_ID, t.BAE_USER_ID, t.rent_fee_st, t.rent_fee_cls, "+
					" t.CAR_KM, t.BAN_USER_ID, t.RENT_FEE, t.CAR_RENT_TM, f.TM_ST2, t.req_st, t.tae_st,"+
					" decode(t.CAR_RENT_DT, '', '', substr(t.CAR_RENT_DT, 1, 4) || '-' || substr(t.CAR_RENT_DT, 5, 2) || '-'||substr(t.CAR_RENT_DT, 7, 2)) CAR_RENT_DT,"+
					" decode(t.CAR_RENT_ST, '', '', substr(t.CAR_RENT_ST, 1, 4) || '-' || substr(t.CAR_RENT_ST, 5, 2) || '-'||substr(t.CAR_RENT_ST, 7, 2)) CAR_RENT_ST,"+
					" decode(t.CAR_RENT_ET, '', '', substr(t.CAR_RENT_ET, 1, 4) || '-' || substr(t.CAR_RENT_ET, 5, 2) || '-'||substr(t.CAR_RENT_ET, 7, 2)) CAR_RENT_ET, "+
					" t.f_req_yn, t.f_req_dt, t.end_rent_link_sac_id "+
					" from taecha t, scd_fee f "+
					" where t.RENT_MNG_ID = ?"+
					" and t.RENT_L_CD = ? and t.no=? "+	
					" and t.RENT_MNG_ID = f.RENT_MNG_ID(+)"+
					" and t.RENT_L_CD = f.RENT_L_CD(+)"+
					" and t.NO = f.TAE_NO(+)";
			try {			
				pstmt = conn.prepareStatement(query);
				pstmt.setString(1, mng_id);
				pstmt.setString(2, l_cd);
				pstmt.setString(3, no);
		    	rs = pstmt.executeQuery();    	
				if(rs.next())
				{				
					taecha.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
					taecha.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
					taecha.setNo(rs.getString("NO")==null?"":rs.getString("NO"));
					taecha.setCar_mng_id(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
					taecha.setCar_no(rs.getString("CAR_NO")==null?"":rs.getString("CAR_NO"));
					taecha.setCar_id(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
					taecha.setBae_user_id(rs.getString("BAE_USER_ID")==null?"":rs.getString("BAE_USER_ID"));
					taecha.setCar_km(rs.getString("CAR_KM")==null?"":rs.getString("CAR_KM"));
					taecha.setCar_rent_dt(rs.getString("CAR_RENT_DT")==null?"":rs.getString("CAR_RENT_DT"));
					taecha.setCar_rent_st(rs.getString("CAR_RENT_ST")==null?"":rs.getString("CAR_RENT_ST"));
					taecha.setCar_rent_et(rs.getString("CAR_RENT_ET")==null?"":rs.getString("CAR_RENT_ET"));
					taecha.setBan_user_id(rs.getString("BAN_USER_ID")==null?"":rs.getString("BAN_USER_ID"));
					taecha.setRent_fee(rs.getString("RENT_FEE")==null?"":rs.getString("RENT_FEE"));
					taecha.setCar_rent_tm(rs.getString("CAR_RENT_TM")==null?"":rs.getString("CAR_RENT_TM"));
					taecha.setTm_st2(rs.getString("TM_ST2")==null?"":rs.getString("TM_ST2"));
					taecha.setReq_st(rs.getString("req_st")==null?"":rs.getString("req_st"));
					taecha.setTae_st(rs.getString("tae_st")==null?"":rs.getString("tae_st"));
					taecha.setF_req_yn(rs.getString("f_req_yn")==null?"":rs.getString("f_req_yn"));
					taecha.setF_req_dt(rs.getString("f_req_dt")==null?"":rs.getString("f_req_dt"));
					taecha.setRent_fee_st(rs.getString("RENT_FEE_ST")==null?"":rs.getString("RENT_FEE_ST"));
					taecha.setRent_fee_cls(rs.getString("RENT_FEE_CLS")==null?"":rs.getString("RENT_FEE_CLS"));
					taecha.setEnd_rent_link_sac_id(rs.getString("end_rent_link_sac_id")==null?"":rs.getString("end_rent_link_sac_id"));
				}
				rs.close();
				pstmt.close();
			} catch (SQLException e) {
				System.out.println("[AddContDatabase:getContTaechaCase]\n"+e);
		  		e.printStackTrace();
			} finally {
				try{
	                if(rs != null )		rs.close();
	                if(pstmt != null)	pstmt.close();
				}catch(Exception ignore){}
				closeConnection();
				return taecha;
			}
		}

	//계약수정 : 출고전대차 여부 'Y' 선택시 차량 조회
	public Vector getSpareCarList(String car_nm, String car_no)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
		query = " select"+
				" R.car_mng_id ID, R.car_no CAR_NO, R.car_nm CAR_ST, E.car_id CAR_ID, E.colo COL, E.opt OPT,"+
				" decode(R.init_reg_dt, '', '', substr(R.init_reg_dt, 1, 4) || '-' || substr(R.init_reg_dt, 5, 2) || '-'||substr(R.init_reg_dt, 7, 2)) REG_DT"+
				" from"+
				" ("+
					" select car_mng_id, max(rent_mng_id) rent_mng_id"+
			 	  	" from cont"+
					" where car_mng_id is not null and nvl(use_yn,'Y')='Y'"+
					" group by car_mng_id"+
				" ) A, cont C, car_reg R, car_etc E"+
				" where nvl(C.use_yn,'Y')='Y' and C.car_st='2' and A.rent_mng_id = C.rent_mng_id and"+
			    " A.car_mng_id = C.car_mng_id and"+
				" C.rent_mng_id = E.rent_mng_id and"+
				" C.rent_l_cd = E.rent_l_cd and"+
				" C.car_mng_id = R.car_mng_id and"+
				" R.car_no like '%"+ car_no +"%' and"+
				" R.car_nm like upper('%"+ car_nm +"%')";				 
		
		try {
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSpareCarList]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}

	//계약수정 : 출고전대차 삽입 (taecha)
	public boolean insertTaecha(ContTaechaBean taecha)
	{
		getConnection();
		boolean flag = true;
		PreparedStatement pstmt1=null;
		PreparedStatement pstmt2 = null;
		ResultSet rs = null;
		String rtnStr = "";
		String query = " insert into TAECHA (RENT_MNG_ID, RENT_L_CD, NO, CAR_MNG_ID, CAR_NO, "+
						" CAR_ID, BAE_USER_ID, CAR_KM, CAR_RENT_DT, CAR_RENT_ST, CAR_RENT_ET, "+
						" BAN_USER_ID, RENT_FEE, CAR_RENT_TM, REQ_ST, reg_dt, rent_fee_st, rent_fee_cls ) values "+
						"( ?, ?, ?, ?, ?,  ?, ?, ?, replace(?, '-', ''), replace(?, '-', ''), replace(?, '-', ''), ?, ?, ?, ?, sysdate, ?, ? )";

		if(taecha.getNo().equals("")){
			try
			{
				String qry_id = "select nvl(ltrim(to_char(to_number(MAX(no))+1, '0')), '0') ID from TAECHA "+
								" where  RENT_MNG_ID = '"+ taecha.getRent_mng_id()+"' and RENT_L_CD = '"+ taecha.getRent_l_cd() +"'" ;

				conn.setAutoCommit(false);

				pstmt1 = conn.prepareStatement(qry_id);
			   	rs = pstmt1.executeQuery();
				while(rs.next())
				{
					rtnStr = rs.getString(1)==null?"":rs.getString(1);
				}
				taecha.setNo(rtnStr);
				conn.commit();

				rs.close();
				pstmt1.close();

			}catch(Exception e){					
		        try{
					System.out.println("[AddContDatabase:insertTaecha]"+e);
		            conn.rollback();
					e.printStackTrace();	
					flag = false;
		        }catch(SQLException _ignored){}
			}finally{
				try{
	                if(rs != null )		rs.close();
		            if(pstmt1 != null)	pstmt1.close();
					conn.setAutoCommit(true);
				}catch(Exception ignore){}
			}
		}

		try
		{
			conn.setAutoCommit(false);

			pstmt2 = conn.prepareStatement(query);
			pstmt2.setString(1, taecha.getRent_mng_id());
			pstmt2.setString(2, taecha.getRent_l_cd());
			pstmt2.setString(3, taecha.getNo());
			pstmt2.setString(4, taecha.getCar_mng_id());
			pstmt2.setString(5, taecha.getCar_no());
			pstmt2.setString(6, taecha.getCar_id());
			pstmt2.setString(7, taecha.getBae_user_id());
			pstmt2.setString(8, taecha.getCar_km());
			pstmt2.setString(9, taecha.getCar_rent_dt());
			pstmt2.setString(10, taecha.getCar_rent_st());
			pstmt2.setString(11, taecha.getCar_rent_et());
			pstmt2.setString(12, taecha.getBan_user_id());
			pstmt2.setString(13, taecha.getRent_fee());
			pstmt2.setString(14, taecha.getCar_rent_tm());
			pstmt2.setString(15, taecha.getReq_st());
			pstmt2.setString(16, taecha.getRent_fee_st());
			pstmt2.setString(17, taecha.getRent_fee_cls());
			pstmt2.executeUpdate();
			pstmt2.close();

			conn.commit();

	  	}catch(Exception e){
			System.out.println("[AddContDatabase:insertCarMgr:insert]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
	            if(pstmt2 != null)	pstmt2.close();
                if(rs != null )		rs.close();
	            if(pstmt1 != null)	pstmt1.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 출고전대차 스케줄 납입횟수 최고값 조회
	public int getMax_fee_tm(String m_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int fee_tm_count = 0;

		String query =" select max(TO_NUMBER(fee_tm)) from scd_fee "+
						" where rent_mng_id=? and rent_l_cd=?";
		
		if(!rent_st.equals(""))		query += " and rent_st=?";
		else						query += " and tm_st2='2'";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			if(!rent_st.equals("")){
				pstmt.setString(3, rent_st);
			}
			rs = pstmt.executeQuery();
			if(rs.next())
			{
				fee_tm_count = Integer.parseInt(rs.getString(1)==null?"0":rs.getString(1));
			}
			rs.close();
			pstmt.close();
			
    	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getTaecha_fee_tm]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee_tm_count;
		}
	}
	
	//계약수정 : 출고전대차 스케줄 납입횟수 최고값 조회
	public int getScdCount(String m_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int fee_tm_count = 0;

		String query =" select count(0) from scd_fee "+
						" where rent_mng_id=? and rent_l_cd=?";
		
		if(!rent_st.equals(""))		query += " and rent_st=?";
		else						query += " and tm_st2='2'";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			if(!rent_st.equals("")){
				pstmt.setString(3, rent_st);
			}
			rs = pstmt.executeQuery();
			if(rs.next())
			{
				fee_tm_count = Integer.parseInt(rs.getString(1)==null?"0":rs.getString(1));
			}
			rs.close();
			pstmt.close();
						
    	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getScdCount]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee_tm_count;
		}
	}	
	
	//계약수정 : 출고전대차 스케줄 납입횟수 최고값 조회
	public int getMax_fee_tm(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int fee_tm_count = 0;

		String query =" select max(TO_NUMBER(fee_tm)) from scd_fee "+
						" where rent_mng_id=?";


		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			rs = pstmt.executeQuery();
			if(rs.next())
			{
				fee_tm_count = Integer.parseInt(rs.getString(1)==null?"0":rs.getString(1));
			}
			rs.close();
			pstmt.close();
    	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getTaecha_fee_tm]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee_tm_count;
		}
	}

	//계약수정 : 출고전대차 스케줄 납입횟수 최고값 조회
	public int getMax_fee_tm(String m_id, String l_cd, String rent_st, String tm_st1)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int fee_tm_count = 0;

		String query =" select max(TO_NUMBER(fee_tm)) from scd_fee "+
						" where rent_mng_id=? and rent_l_cd=?";
		
		if(!rent_st.equals(""))		query += " and rent_st=?";
		else						query += " and tm_st2='2'";

		if(!tm_st1.equals(""))		query += " and tm_st1=?";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			if(!rent_st.equals("")){
				pstmt.setString(3, rent_st);
				pstmt.setString(4, tm_st1);
			}else{
				pstmt.setString(3, tm_st1);
			}
			rs = pstmt.executeQuery();
			if(rs.next())
			{
				fee_tm_count = Integer.parseInt(rs.getString(1)==null?"0":rs.getString(1));
			}
			rs.close();
			pstmt.close();
    	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getTaecha_fee_tm]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee_tm_count;
		}
	}

	//계약수정 : 출고전대차 수정 (taecha)
	public boolean updateTaecha(ContTaechaBean taecha)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update TAECHA set "+
						" BAE_USER_ID = ?, "+
						" CAR_KM = ?, "+
						" CAR_RENT_DT = replace(?, '-', ''), "+
						" CAR_RENT_ST = replace(?, '-', ''), "+
						" CAR_RENT_ET = replace(?, '-', ''), "+
						" BAN_USER_ID = ?, "+
						" RENT_FEE = ?, "+
						" CAR_RENT_TM = ?, "+
						" REQ_ST = ?, "+
						" RENT_FEE_ST = ?, "+
						" RENT_FEE_CLS = ? "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and NO = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, taecha.getBae_user_id());
			pstmt.setString(2, taecha.getCar_km());
			pstmt.setString(3, taecha.getCar_rent_dt());
			pstmt.setString(4, taecha.getCar_rent_st());
			pstmt.setString(5, taecha.getCar_rent_et());
			pstmt.setString(6, taecha.getBan_user_id());
			pstmt.setString(7, taecha.getRent_fee());
			pstmt.setString(8, taecha.getCar_rent_tm());
			pstmt.setString(9, taecha.getReq_st());
			pstmt.setString(10, taecha.getRent_fee_st());
			pstmt.setString(11, taecha.getRent_fee_cls());
		    pstmt.setString(12, taecha.getRent_mng_id());
			pstmt.setString(13, taecha.getRent_l_cd());
			pstmt.setString(14,taecha.getNo());
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateTaech]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	
	
	//계약수정 : 출고전대차 삭제 (taecha)
	public boolean deleteTaecha(ContTaechaBean taecha)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " delete from TAECHA "+
							" where RENT_MNG_ID = ? and RENT_L_CD = ? and NO = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
		    pstmt.setString(1, taecha.getRent_mng_id());
			pstmt.setString(2, taecha.getRent_l_cd());
			pstmt.setString(3,taecha.getNo());
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:deleteTaech]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약 수정 : car_reg 조회
	public Hashtable getCarRegFee(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";
		query = " select"+
				" CAR_MNG_ID, CAR_NO, CAR_NUM, LOAN_S_AMT, REG_AMT, ACQ_AMT, STAMP_AMT, ETC, CAR_Y_FORM,"+
				" decode(INIT_REG_DT, '','', substr(INIT_REG_DT, 1, 4) || '-' || substr(INIT_REG_DT, 5, 2) || '-'||substr(INIT_REG_DT, 7, 2)) INIT_REG_DT"+
				" from CAR_REG"+
				" where CAR_MNG_ID =("+
					" select CAR_MNG_ID"+
					" from CONT"+
					" where RENT_MNG_ID = ?"+
					" and RENT_L_CD = ?"+
				" )";
		try{	
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		}catch (SQLException e){
			System.out.println("[AddContDatabase:getCarRegFee]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();			
			return ht;
		}
	}

	//계약 수정 : 계약관리번호 변경시 수정 (cont)
	public boolean updateRent_l_cd(String m_id, String l_cd, String new_l_cd)
	{
		getConnection();
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		PreparedStatement pstmt4 = null;
		PreparedStatement pstmt5 = null;
		PreparedStatement pstmt6 = null;
		PreparedStatement pstmt7 = null;
		PreparedStatement pstmt8 = null;
		PreparedStatement pstmt9 = null;
		PreparedStatement pstmt10 = null;
		PreparedStatement pstmt11 = null;
		PreparedStatement pstmt12 = null;
		PreparedStatement pstmt13 = null;
		PreparedStatement pstmt14 = null;
		PreparedStatement pstmt15 = null;
		PreparedStatement pstmt16 = null;		
		boolean flag = true;

		try 
		{
			conn.setAutoCommit(false);

			//CONT 계약관리
			String cont_query = "update CONT set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt1 = conn.prepareStatement(cont_query);
			pstmt1.setString(1, new_l_cd);			
			pstmt1.setString(2, m_id);
			pstmt1.setString(3, l_cd);
			pstmt1.executeUpdate();
			pstmt1.close();  

			//CAR_MGR 법인고객차량관리자
			String car_mgr_query = "update CAR_MGR set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt2 = conn.prepareStatement(car_mgr_query);
			pstmt2.setString(1, new_l_cd);			
			pstmt2.setString(2, m_id);
			pstmt2.setString(3, l_cd);
			pstmt2.executeUpdate();
			pstmt2.close();  

			//COMMI 지급수수료-자동차영업소사원관리
			String commi_query = "update COMMI set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt3 = conn.prepareStatement(commi_query);
			pstmt3.setString(1, new_l_cd);			
			pstmt3.setString(2, m_id);
			pstmt3.setString(3, l_cd);
			pstmt3.executeUpdate();
			pstmt3.close();  

			//CAR_PUR 차량구매관리
			String car_pur_query = "update CAR_PUR set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt4 = conn.prepareStatement(car_pur_query);
			pstmt4.setString(1, new_l_cd);			
			pstmt4.setString(2, m_id);
			pstmt4.setString(3, l_cd);
			pstmt4.executeUpdate();
			pstmt4.close();  

			//CAR_ETC 차량관리
			String car_etc_query = "update CAR_ETC set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt5 = conn.prepareStatement(car_etc_query);
			pstmt5.setString(1, new_l_cd);			
			pstmt5.setString(2, m_id);
			pstmt5.setString(3, l_cd);
			pstmt5.executeUpdate();
			pstmt5.close();  

			//FEE 대여료관리
			String fee_query = "update FEE set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt6 = conn.prepareStatement(fee_query);
			pstmt6.setString(1, new_l_cd);			
			pstmt6.setString(2, m_id);
			pstmt6.setString(3, l_cd);
			pstmt6.executeUpdate();
			pstmt6.close();  

			//TAECHA 출고전대차관리
			String taecha_query = "update TAECHA set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt7 = conn.prepareStatement(taecha_query);
			pstmt7.setString(1, new_l_cd);			
			pstmt7.setString(2, m_id);
			pstmt7.setString(3, l_cd);
			pstmt7.executeUpdate();
			pstmt7.close();  

			//SCD_FEE 대여료스케줄관리
			String scd_fee_query = "update SCD_FEE set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt8 = conn.prepareStatement(scd_fee_query);
			pstmt8.setString(1, new_l_cd);			
			pstmt8.setString(2, m_id);
			pstmt8.setString(3, l_cd);
			pstmt8.executeUpdate();
			pstmt8.close();  

			//SCD_EXT 선납금,보증금,개시대여료스케줄관리
			String scd_ext_query = "update SCD_EXT set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt9 = conn.prepareStatement(scd_ext_query);
			pstmt9.setString(1, new_l_cd);			
			pstmt9.setString(2, m_id);
			pstmt9.setString(3, l_cd);
			pstmt9.executeUpdate();
			pstmt9.close();  

			//ALLOT 자동차보험관리
			String allot_query = "update ALLOT set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt10 = conn.prepareStatement(allot_query);
			pstmt10.setString(1, new_l_cd);			
			pstmt10.setString(2, m_id);
			pstmt10.setString(3, l_cd);
			pstmt10.executeUpdate();
			pstmt10.close();  

			//CLTR 근저당설정관리
			String cltr_query = "update CLTR set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt11 = conn.prepareStatement(cltr_query);
			pstmt11.setString(1, new_l_cd);			
			pstmt11.setString(2, m_id);
			pstmt11.setString(3, l_cd);
			pstmt11.executeUpdate();
			pstmt11.close();  
			
			//ACCIDENT 사고기록
			String accident_query = "update ACCIDENT set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt12 = conn.prepareStatement(accident_query);
			pstmt12.setString(1, new_l_cd);			
			pstmt12.setString(2, m_id);
			pstmt12.setString(3, l_cd);
			pstmt12.executeUpdate();
			pstmt12.close();  

			//FINE 과태료/범칙금
			String fine_query = "update FINE set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt13 = conn.prepareStatement(fine_query);
			pstmt13.setString(1, new_l_cd);			
			pstmt13.setString(2, m_id);
			pstmt13.setString(3, l_cd);
			pstmt13.executeUpdate();
			pstmt13.close();  

			//TAX 세금계산서
			String tax_query = "update TAX set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt14 = conn.prepareStatement(tax_query);
			pstmt14.setString(1, new_l_cd);			
			pstmt14.setString(2, m_id);
			pstmt14.setString(3, l_cd);
			pstmt14.executeUpdate();
			pstmt14.close();  

			//DIY_MM 연체메모
			String dly_mm_query = "update DLY_MM set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt15 = conn.prepareStatement(dly_mm_query);
			pstmt15.setString(1, new_l_cd);			
			pstmt15.setString(2, m_id);
			pstmt15.setString(3, l_cd);
			pstmt15.executeUpdate();
			pstmt15.close();  

			//SERVICE 정비점검
			String service_query = "update SERVICE set RENT_L_CD = ? where RENT_MNG_ID = ? and RENT_L_CD = ?";
			pstmt16 = conn.prepareStatement(service_query);
			pstmt16.setString(1, new_l_cd);			
			pstmt16.setString(2, m_id);
			pstmt16.setString(3, l_cd);
			pstmt16.executeUpdate();
			pstmt16.close();  
			
			conn.commit();

		} catch (Exception e) {
			System.out.println("[AddContDatabase:updateRent_l_cd]\n"+e);
			e.printStackTrace();
	  		flag = false;
			try{
                conn.rollback();
            }catch(SQLException _ignored){}
		} finally {
			try{
				conn.setAutoCommit(true);
                if(pstmt1 != null)		pstmt1.close();
                if(pstmt2 != null)		pstmt2.close();
                if(pstmt3 != null)		pstmt3.close();
                if(pstmt4 != null)		pstmt4.close();
                if(pstmt5 != null)		pstmt5.close();
                if(pstmt6 != null)		pstmt6.close();
                if(pstmt7 != null)		pstmt7.close();
                if(pstmt8 != null)		pstmt8.close();
                if(pstmt9 != null)		pstmt9.close();
                if(pstmt10 != null)		pstmt10.close();
                if(pstmt11 != null)		pstmt11.close();
                if(pstmt12 != null)		pstmt12.close();
                if(pstmt13 != null)		pstmt13.close();
                if(pstmt14 != null)		pstmt14.close();
                if(pstmt15 != null)		pstmt15.close();
                if(pstmt16 != null)		pstmt16.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 수정 : 계약 기초정보 수정 (cont)
	public boolean updateContBase(ContBaseBean base)
	{
		getConnection();
		Statement stmt = null;
		boolean flag = true;
		String query = " update CONT set "+
						" CLIENT_ID = '"+base.getClient_id()+"',"+
						" CAR_MNG_ID = '"+base.getCar_mng_id()+"',"+
						" RENT_ST = '"+base.getRent_st()+"',"+
						" BUS_ST = '"+base.getBus_st()+"',"+
						" RENT_DT = replace ('"+base.getRent_dt()+"', '-', ''),"+
						" DLV_DT = replace ('"+base.getDlv_dt()+"', '-', ''),"+
						" RENT_START_DT = replace ('"+base.getRent_start_dt()+"', '-', ''),"+
						" BUS_ID = '"+base.getBus_id()+"',"+
						" BRCH_ID = '"+base.getBrch_id()+"',"+
						" NOTE = '"+base.getNote()+"',"+
						" MNG_ID = '"+base.getMng_id()+"',"+
						" REG_ID = '"+base.getReg_id()+"',"+
						" REG_DT = replace ('"+base.getReg_dt()+"', '-', ''),"+
						" CAR_ST = '"+base.getCar_st()+"',"+
						" R_SITE = '"+base.getR_site()+"',"+
						" P_ZIP = '"+base.getP_zip()+"',"+
						" P_ADDR = '"+base.getP_addr()+"',"+
						" O_MAP = '"+base.getO_map()+"',"+
						" USE_YN = '"+base.getUse_yn()+"',"+
						" R_SITE_ZIP = '"+base.getR_site_zip()+"',"+
						" R_SITE_ADDR = '"+base.getR_site_addr()+"',"+
						" DRIVING_EXT = '"+base.getDriving_ext()+"',"+
						" DRIVING_AGE = '"+base.getDriving_age()+"',"+
						" LOAN_EXT = '"+base.getLoan_ext()+"',"+
						" OTHERS = '"+base.getOthers()+"',"+
						" CAR_JA = '"+base.getCar_ja()+"',"+
						" BUS_ID2 = '"+base.getBus_id2()+"',"+
						" MNG_ID2 = '"+base.getMng_id2()+"',"+
						" DEPT_ID = '"+base.getDept_id()+"',"+
						" SCAN_FILE = '"+base.getScan_file()+"',"+
						" UPDATE_ID = '"+base.getUpdate_id()+"',"+
						" UPDATE_DT = to_char(sysdate,'YYYYMMDD'),"+
						" RENT_END_DT = replace ('"+base.getRent_end_dt()+"', '-', ''), "+
						" GCP_KD = '"+base.getGcp_kd()+"',"+
						" BACDT_KD = '"+base.getBacdt_kd()+"', "+
						" SPR_KD = '"+base.getSpr_kd()+"', "+
						" TAX_AGNT = '"+base.getTax_agnt()+"', "+
						" TAX_TYPE = '"+base.getTax_type()+"' "+
						" where"+
						" RENT_MNG_ID = '"+base.getRent_mng_id()+"' and"+
						" RENT_L_CD = '"+base.getRent_l_cd()+"'";
		try 
		{
			conn.setAutoCommit(false);

			stmt = conn.createStatement();
			stmt.executeUpdate(query);
			stmt.close();
			conn.commit();
		    
		} catch (Exception e) {
            try{
				System.out.println("[AddContDatabase:updateContBase]"+e);
                conn.rollback();
            }catch(SQLException _ignored){}
			e.printStackTrace();
	  		flag = false;
		} finally {
			try{
				conn.setAutoCommit(true);
                if(stmt != null)		stmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 수정 : 지급수수료 관련 영업소사원 수정(commi)
	public boolean updateCommi(CommiBean commi)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update COMMI set "+
						" EMP_ID = ?, "+
						" REL = ?, COMMI_ST=? "+						
						" where "+
						" RENT_MNG_ID = ? and RENT_L_CD = ? and AGNT_ST = ?";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, commi.getEmp_id().trim());
			pstmt.setString(2, commi.getRel());
			pstmt.setString(3, commi.getCommi_st());
		    pstmt.setString(4, commi.getRent_mng_id());
			pstmt.setString(5, commi.getRent_l_cd());
			pstmt.setString(6, commi.getAgnt_st());
		    pstmt.executeUpdate();
		    pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	
	//계약 수정 : 지급수수료 관련 영엽소사원 삭제 (commi)
	public boolean deleteCommi(String m_id, String l_cd, String agnt_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " delete from COMMI where RENT_MNG_ID = ? and RENT_L_CD = ? and AGNT_ST = ? ";
		try
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, agnt_st);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	
	
	public boolean updateContCar(ContCarBean car)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_ETC set "+
						" CAR_ID = ?, "+
						" COLO= ?, "+
						" EX_GAS= ?, "+
						" IMM_AMT= ?, "+
						" OPT= ?, "+
						" LPG_YN= ?, "+
						" LPG_SETTER= ?, "+
						" LPG_PRICE= ?, "+
						" LPG_PAY_DT = replace(?, '-', ''), "+ 
						" CAR_CS_AMT = ?, "+ 
						" CAR_CV_AMT = ?, "+ 
						" CAR_FS_AMT = ?, "+ 
						" CAR_FV_AMT = ?, "+ 
						" OPT_CS_AMT = ?, "+ 
						" OPT_CV_AMT = ?, "+ 
						" OPT_FS_AMT = ?, "+ 
						" OPT_FV_AMT = ?, "+ 
						" CLR_CS_AMT = ?, "+ 
						" CLR_CV_AMT = ?, "+ 
						" CLR_FS_AMT = ?, "+ 
						" CLR_FV_AMT = ?, "+ 
						" SD_CS_AMT = ?, "+
						" SD_CV_AMT = ?, "+
						" SD_FS_AMT = ?, "+
						" SD_FV_AMT = ?, "+
						" DC_CS_AMT = ?, "+
						" DC_CV_AMT = ?, "+
						" DC_FS_AMT = ?, "+
						" DC_FV_AMT = ?, "+
						" PURC_GU	= ?, "+
						" CAR_EXT 	= ?, "+
						" BAE4	 	= ?, "+												
						" GI_ST	 	= ?, "+												
						" ADD_OPT	= ?, "+
						" OPT_CODE	= ?, "+
						" CAR_SEQ	= ?  "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1, car.getCar_id());
			pstmt.setString(2, car.getColo());
			pstmt.setString(3, car.getEx_gas());
			pstmt.setInt   (4, car.getImm_amt());
			pstmt.setString(5, car.getOpt());
			pstmt.setString(6, car.getLpg_yn());
			pstmt.setString(7, car.getLpg_setter());
			pstmt.setInt   (8, car.getLpg_price());
			pstmt.setString(9, car.getLpg_pay_dt());
			pstmt.setInt   (10, car.getCar_cs_amt());
			pstmt.setInt   (11, car.getCar_cv_amt());
			pstmt.setInt   (12, car.getCar_fs_amt());
			pstmt.setInt   (13, car.getCar_fv_amt());
			pstmt.setInt   (14, car.getOpt_cs_amt());
			pstmt.setInt   (15, car.getOpt_cv_amt());
			pstmt.setInt   (16, car.getOpt_fs_amt());
			pstmt.setInt   (17, car.getOpt_fv_amt());
			pstmt.setInt   (18, car.getClr_cs_amt());
			pstmt.setInt   (19, car.getClr_cv_amt());
			pstmt.setInt   (20, car.getClr_fs_amt());
			pstmt.setInt   (21, car.getClr_fv_amt());
			pstmt.setInt   (22, car.getSd_cs_amt());
			pstmt.setInt   (23, car.getSd_cv_amt());
			pstmt.setInt   (24, car.getSd_fs_amt());
			pstmt.setInt   (25, car.getSd_fv_amt());
			pstmt.setInt   (26, car.getDc_cs_amt());
			pstmt.setInt   (27, car.getDc_cv_amt());
			pstmt.setInt   (28, car.getDc_fs_amt());
			pstmt.setInt   (29, car.getDc_fv_amt());
			pstmt.setString(30, car.getPurc_gu());
			pstmt.setString(31, car.getCar_ext());
			pstmt.setString(32, car.getBae4());
			pstmt.setString(33, car.getGi_st());
			pstmt.setString(34, car.getAdd_opt());
			pstmt.setString(35, car.getOpt_code());
			pstmt.setString(36, car.getCar_seq());
			pstmt.setString(37, car.getRent_mng_id());			
			pstmt.setString(38, car.getRent_l_cd());			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateContCar]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}		

	public boolean updateContFee(ContFeeBean fee)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE set "+
						" RENT_WAY			= ?, "+
						" CAR_ST			= ?, "+
						" CON_MON			= ?, "+
						" RENT_START_DT		= replace(?, '-', ''),"+
						" RENT_END_DT		= replace(?, '-', ''), "+
						" PRV_DLV_YN		= ?, "+
						" PRV_CAR_MNG_ID	= ?, "+
						" PRV_START_DT		= replace(?, '-', ''), "+
						" PRV_END_DT		= replace(?, '-', ''), "+
						" GRT_AMT_S			= ?, "+
						" GRT_ETC			= ?, "+
						" GRT_EST_DT		= replace(?, '-', ''), "+
						" GRT_PAY_YN		= ?, "+
						" PP_S_AMT			= ?, "+
						" PP_V_AMT			= ?, "+
						" PP_ETC			= ?, "+
						" PP_EST_DT			= replace(?, '-', ''), "+
						" PP_PAY_YN			= ?, "+
						" IFEE_S_AMT		= ?, "+
						" IFEE_V_AMT		= ?, "+
						" IFEE_ETC			= ?, "+
						" IFEE_EST_DT		= replace(?, '-', ''), "+
						" IFEE_PAY_YN		= ?, "+
						" INV_S_AMT			= ?, "+
						" INV_V_AMT			= ?, "+
						" INV_ETC			= ?, "+
						" OPT_S_AMT			= ?, "+
						" OPT_V_AMT			= ?, "+
						" OPT_YN			= ?, "+
						" OPT_ETC			= ?, "+
						" FEE_S_AMT			= ?, "+
						" FEE_V_AMT			= ?, "+
						" FEE_ETC			= ?, "+
						" FEE_ST			= ?, "+
						" FEE_REQ_DAY		= ?, "+
						" FEE_EST_DAY		= ?, "+
						" FEE_BANK			= ?, "+
						" FEE_PAY_ST		= ?, "+
						" FEE_PAY_TM		= ?, "+
						" FEE_PAY_START_DT	= replace(?, '-', ''),"+ 
						" FEE_PAY_END_DT	= replace(?, '-', ''),"+
						" FEE_FST_DT		= replace(?, '-', ''),"+
						" FEE_FST_AMT		= ?, "+
						" FEE_CDT			= ?, "+
						" EXT_AGNT			= ?, "+
						" BR_ID				= ?, "+
						" RC_DAY			= ?, "+
						" NEXT_YN			= ?, "+
						" OPT_CHK			= ?, "+
						" FEE_SH			= ?, "+
						" PRV_MON_YN		= ?, "+
						" FEE_CHK			= ?, "+
						" OPT_PER			= ?, "+
						" RENT_DT			= replace(?, '-', ''),"+
						" GRT_SUC_YN		= ?, "+
						" IFEE_SUC_YN		= ?, "+
						" RENT_EST_DT		= replace(?, '-', ''),"+
						" LEAVE_DAY			= ?, "+
						" CLS_PER			= ?, "+
						" gur_per			= ?, "+     
						" gur_p_per			= ?, "+     
						" pere_per			= ?, "+     
						" pere_r_per		= ?, "+     
						" pere_mth			= ?, "+     
						" pere_r_mth		= ?, "+     
						" max_ja			= ?, "+     
						" app_ja			= ?, "+     
						" opt_st			= ?, "+     
						" dc_ra				= ?, "+     
						" bas_dt			= replace(?, '-', ''),"+
						" fee_sac_id		= ?, "+     
						" def_st			= ?, "+     
						" def_remark		= ?, "+     
						" def_sac_id		= ?, "+   
						" cls_r_per			= ?, "+   
						" ja_s_amt			= ?, "+   
						" ja_v_amt			= ?, "+  
						" credit_per  		= ?, "+   
						" credit_r_per		= ?, "+   			
						" credit_amt  		= ?, "+   
						" credit_r_amt		= ?, "+  
						" ja_r_s_amt		= ?, "+   
						" ja_r_v_amt		= ?, "+  	
						" rtn_st			= ? "+  	
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ? ";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  fee.getRent_way()			);
			pstmt.setString(2,  fee.getCar_st()				);
			pstmt.setString(3,  fee.getCon_mon()			);
			pstmt.setString(4,  fee.getRent_start_dt()		);
			pstmt.setString(5,  fee.getRent_end_dt()		);			
			pstmt.setString(6,  fee.getPrv_dlv_yn()			);
			pstmt.setString(7,  fee.getPrv_car_mng_id()		);
			pstmt.setString(8,  fee.getPrv_start_dt()		);
			pstmt.setString(9,  fee.getPrv_end_dt()			);
			pstmt.setInt   (10, fee.getGrt_amt_s()			);			
			pstmt.setString(11, fee.getGrt_etc()			);
			pstmt.setString(12, fee.getGrt_est_dt()			);
			pstmt.setString(13, fee.getGrt_pay_yn()			);
			pstmt.setInt   (14, fee.getPp_s_amt()			);
			pstmt.setInt   (15, fee.getPp_v_amt()			);			
			pstmt.setString(16, fee.getPp_etc()				);
			pstmt.setString(17, fee.getPp_est_dt()			);
			pstmt.setString(18, fee.getPp_pay_yn()			);
			pstmt.setInt   (19, fee.getIfee_s_amt()			);
			pstmt.setInt   (20, fee.getIfee_v_amt()			);			
			pstmt.setString(21, fee.getIfee_etc()			);
			pstmt.setString(22, fee.getIfee_est_dt()		);
			pstmt.setString(23, fee.getIfee_pay_yn()		);
			pstmt.setInt   (24, fee.getInv_s_amt()			);
			pstmt.setInt   (25, fee.getInv_v_amt()			);			
			pstmt.setString(26, fee.getInv_etc()			);
			pstmt.setInt   (27, fee.getOpt_s_amt()			);
			pstmt.setInt   (28, fee.getOpt_v_amt()			);
			pstmt.setString(29, fee.getOpt_yn()				);
			pstmt.setString(30, fee.getOpt_etc()			);			
			pstmt.setInt   (31, fee.getFee_s_amt()			);
			pstmt.setInt   (32, fee.getFee_v_amt()			);
			pstmt.setString(33, fee.getFee_etc()			);
			pstmt.setString(34, fee.getFee_st()				);
			pstmt.setString(35, fee.getFee_req_day()		);			
			pstmt.setString(36, fee.getFee_est_day()		);
			pstmt.setString(37, fee.getFee_bank()			);
			pstmt.setString(38, fee.getFee_pay_st()			);
			pstmt.setString(39, fee.getFee_pay_tm()			);			
			pstmt.setString(40, fee.getFee_pay_start_dt()	);			
			pstmt.setString(41, fee.getFee_pay_end_dt()		); 
			pstmt.setString(42, fee.getFee_fst_dt()			);
			pstmt.setInt   (43, fee.getFee_fst_amt()		);
			pstmt.setString(44, fee.getFee_cdt()			);
			pstmt.setString(45, fee.getExt_agnt()			);			
			pstmt.setString(46, fee.getBr_id()				);
			pstmt.setString(47, fee.getRc_day()				);
			pstmt.setString(48, fee.getNext_yn()			);
			pstmt.setString(49, fee.getOpt_chk()			);
			pstmt.setString(50, fee.getFee_sh()				);												
			pstmt.setString(51, fee.getPrv_mon_yn()			);
			pstmt.setString(52, fee.getFee_chk()			);
			pstmt.setString(53, fee.getOpt_per()			);
			pstmt.setString(54, fee.getRent_dt()			);
			pstmt.setString(55, fee.getGrt_suc_yn()			);
			pstmt.setString(56, fee.getIfee_suc_yn()		);
			pstmt.setString(57, fee.getRent_est_dt()		);
			pstmt.setString(58, fee.getLeave_day()			);
			pstmt.setString(59, fee.getCls_per()			);
			pstmt.setFloat (60, fee.getGur_per			());
			pstmt.setFloat (61, fee.getGur_p_per		());			
			pstmt.setFloat (62, fee.getPere_per			());
			pstmt.setFloat (63, fee.getPere_r_per		());
			pstmt.setInt   (64, fee.getPere_mth			());
			pstmt.setInt   (65, fee.getPere_r_mth		());
			pstmt.setFloat (66, fee.getMax_ja			());			
			pstmt.setFloat (67, fee.getApp_ja			());
			pstmt.setString(68, fee.getOpt_st			());
			pstmt.setFloat (69, fee.getDc_ra			());
			pstmt.setString(70, fee.getBas_dt			());			
			pstmt.setString(71, fee.getFee_sac_id		());			
			pstmt.setString(72, fee.getDef_st			()); 
			pstmt.setString(73, fee.getDef_remark		());
			pstmt.setString(74, fee.getDef_sac_id		());
			pstmt.setFloat (75, fee.getCls_r_per		());	
			pstmt.setInt   (76, fee.getJa_s_amt			());
			pstmt.setInt   (77, fee.getJa_v_amt			());
			pstmt.setFloat (78, fee.getCredit_per  		());			
			pstmt.setFloat (79, fee.getCredit_r_per		());			
			pstmt.setInt   (80, fee.getCredit_amt  		());
			pstmt.setInt   (81, fee.getCredit_r_amt		());
			pstmt.setInt   (82, fee.getJa_r_s_amt		());
			pstmt.setInt   (83, fee.getJa_r_v_amt		());
			pstmt.setString(84, fee.getRtn_st			());
			pstmt.setString(85, fee.getRent_mng_id		());
			pstmt.setString(86, fee.getRent_l_cd		());
			pstmt.setString(87, fee.getRent_st			());	
		    pstmt.executeUpdate();
		    pstmt.close();
		    conn.commit();
		    	
	  	} catch (Exception e) {
		  	System.out.println("[AddContDatabase:updateContFee]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	/* 재계약 등록 : 재계약 기본 data 등록 */
	public boolean insertReContEtcRows(String rent_mng_id, String old_rent_l_cd, String new_rent_l_cd)
	{

		int flag = 0;

		ContBaseBean base = getContBase(rent_mng_id, old_rent_l_cd);	/*계약기본*/
		base.setRent_l_cd(new_rent_l_cd);
		if(!insertReContBase(base))		flag += 1;

		Vector mgrs = getCarMgr(rent_mng_id, old_rent_l_cd);	//차량관리자
		int mgr_size = mgrs.size();
		for(int i = 0 ; i < mgr_size; i++)
		{
			CarMgrBean mgr = (CarMgrBean)mgrs.elementAt(i);
			mgr.setRent_l_cd(new_rent_l_cd);
			if(!insertCarMgr(mgr))		flag += 1;
		}

		ContPurBean pur = getContPur(rent_mng_id, old_rent_l_cd);	//차량구매
		pur.setRent_l_cd(new_rent_l_cd);
		if(!insertContPur(pur))		flag += 1;
		
		ContCarBean car = getContCar(rent_mng_id, old_rent_l_cd);	//차량기본
		car.setRent_l_cd(new_rent_l_cd);
		if(!insertContCar(car))		flag += 1;
		
		ContFeeBean fee1 = getContFeeNew(rent_mng_id, old_rent_l_cd, "1");	//대여료
		fee1.setRent_l_cd(new_rent_l_cd);
		if(!insertContFee(fee1))		flag += 1;
		
		ContFeeBean fee2 = getContFeeNew(rent_mng_id, old_rent_l_cd, "2");	//연장대여계약 있을경우
		if(!fee2.getRent_mng_id().equals(""))
		{
			fee2.setRent_l_cd(new_rent_l_cd);
			if(!insertContFee(fee2))		flag += 1;
		}

		ContFeeBean fee3 = getContFeeNew(rent_mng_id, old_rent_l_cd, "3");	//연장대여계약 있을경우
		if(!fee3.getRent_mng_id().equals(""))
		{
			fee3.setRent_l_cd(new_rent_l_cd);
			if(!insertContFee(fee3))		flag += 1;
		}
		
		ContDebtBean debt = getContDebt(rent_mng_id, old_rent_l_cd);	//할부
		debt.setRent_l_cd(new_rent_l_cd);
		if(!insertContDebt(debt))	flag += 1;
		if(!updateContDebt(debt))	flag += 1;

		Vector commis = getCommi(rent_mng_id, old_rent_l_cd);	//지급수수료
		int commi_size = commis.size();
		for(int i = 0 ; i < commi_size; i++)
		{
			CommiBean commi = (CommiBean)commis.elementAt(i);
			commi.setRent_l_cd(new_rent_l_cd);
			if(!insertCommi(commi))		flag += 1;
		}
		
		Vector cltrs = getCltrs(rent_mng_id, old_rent_l_cd);	//근저당설정내용
		int cltr_size = cltrs.size();
		for(int i = 0 ; i < cltr_size; i++)
		{
			CltrBean cltr = (CltrBean)cltrs.elementAt(i);
			cltr.setRent_l_cd(new_rent_l_cd);
			if(!insertCltr(cltr))		flag += 1;
		}
		
		if(flag == 0)	return true;
		else			return false;
	}	

	/* 재계약 등록 : 재계약 기본 data 등록 예비차량으로...*/
	public boolean insertReContEtcRows2(String rent_mng_id, String old_rent_l_cd, String new_rent_l_cd, String cls_dt)
	{
		int flag = 0;
		String user_dept_id = "";
		
		String b_user_id = "";
		
		String b_mng_br_id = "";
		
		String car_st = "";
		String loan_st= "";
				
		
		/*계약기본*/
		ContBaseBean base = getCont(rent_mng_id, old_rent_l_cd);
		
		b_user_id = base.getBus_id2();
        car_st = 	base.getCar_st(); //월렌트기존관리 담당자 재배정에 사용		
        user_dept_id = LoginBean.getInstance().getDept_id(b_user_id);	
        loan_st = LoginBean.getInstance().getLoan_st(b_user_id);	
				
		base.setRent_l_cd(new_rent_l_cd);
		base.setClient_id("000228");
		base.setRent_dt(cls_dt);
		base.setCar_st("2");
		base.setCar_gu("0"); //보유차
		base.setUse_yn("Y");
		base.setBus_id("000026");
		base.setBus_id2("000026");	
		
	
		if ( loan_st.equals("1")) {
			base.setMng_id(b_user_id);							
		} else {			
			base.setMng_id("000026"); //본사 - 영업, 부산영업, 대전영업			
		}
		
		//월렌트인경우는 관리담당2
		if (   car_st.equals("4") ) {
			b_user_id = base.getMng_id2();
			base.setMng_id(b_user_id);
		}
		
		base.setMng_id2("");  
		base.setRent_start_dt(cls_dt);
		base.setRent_end_dt("");
				
		base = insertContBaseNew(base);
			
		/*계약기타추가 - 20120919 */
		ContEtcBean etc = getContEtc(rent_mng_id, old_rent_l_cd);
		b_mng_br_id = etc.getMng_br_id();  //별도 관리지점
				
		ContEtcBean etc1 = new ContEtcBean();
		etc1.setRent_mng_id(rent_mng_id);
		etc1.setRent_l_cd(new_rent_l_cd);
		etc1.setMng_br_id(b_mng_br_id);	
		//첨단안전장비 
		etc1.setLkas_yn(etc.getLkas_yn());
		etc1.setLdws_yn(etc.getLdws_yn());
		etc1.setAeb_yn(etc.getAeb_yn());
		etc1.setFcw_yn(etc.getFcw_yn());
		//etc1.setHook_yn(etc.getHook_yn()); 견인고리는 보험할증이므로 굳이 가져갈 필요없다. (추가보험료 발생)
		etc1.setEv_yn(etc.getEv_yn());
		etc1.setOthers_device(etc.getOthers_device());
		if(!insertContEtc(etc1))		flag += 1;
		
		
		
		//관련테이블 삽입
		if(!insertContEtcRows(base.getRent_mng_id(), base.getRent_l_cd())) flag += 1;		

		//차량구매사항 수정
		ContPurBean pur = getContPur(rent_mng_id, old_rent_l_cd);	
		pur.setRent_l_cd(new_rent_l_cd);
		if(!updateContPur(pur))		flag += 1;
		
		//차량기본사항 수정
		ContCarBean car = getContCarNew(rent_mng_id, old_rent_l_cd);
		car.setRent_l_cd(new_rent_l_cd);
		if(!updateContCarNew(car))		flag += 1;
				
		//지급수수료 수정
		CommiBean emp2 	= getCommi(rent_mng_id, old_rent_l_cd, "2");
		if(!emp2.getRent_mng_id().equals("")){
			CommiBean emp = new CommiBean();
			emp.setRent_mng_id	(rent_mng_id);
			emp.setRent_l_cd	(new_rent_l_cd);
			emp.setEmp_id		(emp2.getEmp_id());
			emp.setAgnt_st		("2");
			emp.setRel			("");
			if(!insertCommiNew(emp))		flag += 1;
		}

		//할부
		ContDebtBean debt = getContDebt(rent_mng_id, old_rent_l_cd);	
		debt.setRent_l_cd(new_rent_l_cd);
		if(!updateContDebt(debt))	flag += 1;

		Vector cltrs = getCltrs(rent_mng_id, old_rent_l_cd);	//근저당설정내용
		int cltr_size = cltrs.size();
		for(int i = 0 ; i < cltr_size; i++)
		{
			CltrBean cltr = (CltrBean)cltrs.elementAt(i);
			cltr.setRent_l_cd(new_rent_l_cd);
			if(!insertCltr(cltr))		flag += 1;
		}

		if(flag == 0)	return true;
		else			return false;		
	}	

	//해지 : 할부수정
	public boolean updateContDebt(ContDebtBean debt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String car_id=debt.getCar_mng_id();
		String imsi_chk="0";
		String query = "";
		query = " update ALLOT set "+
				" ALLOT_ST=?, CPT_CD=?,	LEND_INT=?, LEND_PRN=?, ALT_FEE=?,"+
				" RTN_TOT_AMT=?, LOAN_DEBTOR=?,	RTN_CDT=?, RTN_WAY=?, RTN_EST_DT=replace(?,'-',''),"+
				" LEND_NO=?, NTRL_FEE=?, STP_FEE=?, LEND_DT=replace(?,'-',''), LEND_INT_AMT=?,"+
				" ALT_AMT=?, TOT_ALT_TM=?, ALT_START_DT=replace(?,'-',''), ALT_END_DT=replace(?,'-',''), BOND_GET_ST=?,"+
				" FST_PAY_DT=replace(?,'-',''), FST_PAY_AMT=?,"+//22
				" CPT_CD_ST=?, LEND_ID=?, CAR_MNG_ID=?,"+
				" LOAN_ST_DT=replace(?,'-',''), LOAN_SCH_AMT=?, PAY_SCH_AMT=?, DIF_AMT=?, IMSI_CHK=?,"+
				" RTN_SEQ=?, LOAN_ST=?,"+//32
				" BOND_GET_ST_SUB=?, CLS_RTN_DT=replace(?,'-',''), CLS_RTN_AMT=?, CLS_RTN_FEE=?, NOTE=?,"+
				" CLS_RTN_CAU=?, RIMITTER=?,"+	//39	
				" AUTODOC_YN=?, VEN_CODE=?, BANK_CODE=?, DEPOSIT_NO=?, ACCT_CODE=?"+//44
				" where RENT_MNG_ID=? and RENT_L_CD=?";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, debt.getAllot_st());
			pstmt.setString(2, debt.getCpt_cd());
			pstmt.setString(3, debt.getLend_int());
			pstmt.setInt   (4, debt.getLend_prn());
			pstmt.setInt   (5, debt.getAlt_fee());
			pstmt.setInt   (6, debt.getRtn_tot_amt());
			pstmt.setString(7, debt.getLoan_debtor());
			pstmt.setString(8, debt.getRtn_cdt());
			pstmt.setString(9, debt.getRtn_way());
			pstmt.setString(10, debt.getRtn_est_dt());
			pstmt.setString(11, debt.getLend_no());
			pstmt.setInt   (12, debt.getNtrl_fee());
			pstmt.setInt   (13, debt.getStp_fee());
			pstmt.setString(14, debt.getLend_dt());
			pstmt.setInt   (15, debt.getLend_int_amt());
			pstmt.setInt   (16, debt.getAlt_amt());
			pstmt.setString(17, debt.getTot_alt_tm());
			pstmt.setString(18, debt.getAlt_start_dt());
			pstmt.setString(19, debt.getAlt_end_dt());
			pstmt.setString(20, debt.getBond_get_st());
			pstmt.setString(21, debt.getFst_pay_dt());
			pstmt.setInt   (22, debt.getFst_pay_amt());
			pstmt.setString(23, debt.getCpt_cd_st());
			pstmt.setString(24, debt.getLend_id());
			pstmt.setString(25, car_id);			
			pstmt.setString(26, debt.getLoan_st_dt());
			pstmt.setInt   (27, debt.getLoan_sch_amt());
			pstmt.setInt   (28, debt.getPay_sch_amt());
			pstmt.setInt   (29, debt.getDif_amt());
			pstmt.setString(30, imsi_chk);
			pstmt.setString(31, debt.getRtn_seq());
			pstmt.setString(32, debt.getLoan_st());
			pstmt.setString(33, debt.getBond_get_st_sub());
			pstmt.setString(34, debt.getCls_rtn_dt());
			pstmt.setInt   (35, debt.getCls_rtn_amt());
			pstmt.setInt   (36, debt.getCls_rtn_fee());
			pstmt.setString(37, debt.getNote());
			pstmt.setString(38, debt.getCls_rtn_cau());
			pstmt.setString(39, debt.getRimitter());
			pstmt.setString(40, debt.getAutodoc_yn());
			pstmt.setString(41, debt.getVen_code());
			pstmt.setString(42, debt.getBank_code());
			pstmt.setString(43, debt.getDeposit_no());
			pstmt.setString(44, debt.getAcct_code());
			pstmt.setString(45, debt.getRent_mng_id());
			pstmt.setString(46, debt.getRent_l_cd());

		    pstmt.executeUpdate();
			pstmt.close();	
			conn.commit();
		    
	  	} catch (Exception e) {
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	/* 재계약 등록 : 재계약기본 insert*/
	public boolean insertReContBase(ContBaseBean base)
	{
		boolean flag = true;
		getConnection();
		PreparedStatement pstmt = null;
		String query = " insert into CONT "+
						"(RENT_MNG_ID,	RENT_L_CD,	CLIENT_ID,	CAR_MNG_ID,		RENT_ST,		"+
						" BUS_ST,		RENT_DT,	DLV_DT,		RENT_START_DT,	BUS_ID,			"+
						" BRCH_ID,		NOTE,		MNG_ID,		REG_DT,			REG_ID,			"+
						" CAR_ST,		R_SITE,		P_ZIP,		P_ADDR,			O_MAP,			"+
						" USE_YN,		R_SITE_ZIP,	R_SITE_ADDR,DRIVING_EXT,	DRIVING_AGE,	"+
						" LOAN_EXT,		OTHERS,		BUS_ID2,	MNG_ID2,		DEPT_ID ) values"+
						"(?, ?, ?, ?, ?,	"+
						" ?, replace(?, '-', ''), replace(?, '-', ''), replace(?, '-', ''), ?, "+
						" ?, ?, ?, to_char(sysdate,'YYYYMMDD'), ?, "+
						" ?, ?, ?, ?, ?,	"+
						" 'Y', ?, ?, ?, ?,	"+
						" ?, ?, ?, ?, ?)	";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1, base.getRent_mng_id());
			pstmt.setString(2, base.getRent_l_cd());
			pstmt.setString(3, base.getClient_id());
			pstmt.setString(4, base.getCar_mng_id());
			pstmt.setString(5, base.getRent_st());			
			pstmt.setString(6, base.getBus_st());			
			pstmt.setString(7, base.getRent_dt());
			pstmt.setString(8, base.getDlv_dt());
			pstmt.setString(9, base.getRent_start_dt());			
			pstmt.setString(10, base.getBus_id());
			pstmt.setString(11, base.getBrch_id());			
			pstmt.setString(12, base.getNote());
			pstmt.setString(13, base.getMng_id());
			pstmt.setString(14, base.getReg_id());
			pstmt.setString(15, base.getCar_st());			
			pstmt.setString(16, base.getR_site());			
			pstmt.setString(17, base.getP_zip());
			pstmt.setString(18, base.getP_addr());
			pstmt.setString(19, base.getO_map());
			pstmt.setString(20, base.getR_site_zip());
			pstmt.setString(21, base.getR_site_addr());			
			pstmt.setString(22, base.getDriving_ext());
			pstmt.setString(23, base.getDriving_age());
			pstmt.setString(24, base.getLoan_ext());
			pstmt.setString(25, base.getOthers());						
			pstmt.setString(26, base.getBus_id2());						
			pstmt.setString(27, base.getMng_id2());						
			pstmt.setString(28, base.getDept_id());									
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:insertReContBase]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
	  	} catch (Exception e) {
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//재계약 등록 : 할부
	public ContDebtBean getContDebt(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContDebtBean debt = new ContDebtBean();
		String query = "";
		query = " select"+
				"        RENT_MNG_ID, RENT_L_CD, ALLOT_ST, CPT_CD, LEND_INT, LEND_PRN, ALT_FEE, RTN_TOT_AMT, LOAN_DEBTOR,"+
				"        RTN_CDT, RTN_WAY, rtrim(RTN_EST_DT) RTN_EST_DT, LEND_NO, NTRL_FEE, STP_FEE,"+
				"        LEND_INT_AMT, ALT_AMT, TOT_ALT_TM," +
				"        decode(LEND_DT, '', '', substr(LEND_DT, 1, 4) || '-' || substr(LEND_DT, 5, 2) || '-'||substr(LEND_DT, 7, 2)) LEND_DT,"+
				"        decode(ALT_START_DT, '', '', substr(ALT_START_DT, 1, 4) || '-' || substr(ALT_START_DT, 5, 2) || '-'||substr(ALT_START_DT, 7, 2)) ALT_START_DT,"+
				"        decode(ALT_END_DT, '', '', substr(ALT_END_DT, 1, 4) || '-' || substr(ALT_END_DT, 5, 2) || '-'||substr(ALT_END_DT, 7, 2)) ALT_END_DT,"+
				"        BOND_GET_ST, BOND_ST, LOAN_CON_NM, LOAN_CON_SSN, LOAN_CON_REL,"+
				"        LOAN_CON_TEL, LOAN_CON_ADDR, GRTR_NM1, GRTR_SSN1, GRTR_REL1, GRTR_TEL1, GRTR_ADDR1,"+
				"        GRTR_NM2, GRTR_SSN2, GRTR_REL2, GRTR_TEL2, GRTR_ADDR2, GRTR_NM3, GRTR_SSN3," +
				"        GRTR_REL3, GRTR_TEL3, GRTR_ADDR3,"+
				"        decode(FST_PAY_DT, '', '', substr(FST_PAY_DT, 1, 4) || '-' || substr(FST_PAY_DT, 5, 2) || '-'||substr(FST_PAY_DT, 7, 2)) FST_PAY_DT,"+
				"        FST_PAY_AMT,"+
				"        BOND_GET_ST_SUB, CLS_RTN_DT, CLS_RTN_AMT, CLS_RTN_FEE, NOTE, CPT_CD_ST, LEND_ID, CAR_MNG_ID, LOAN_ST_DT,"+
				"        LOAN_SCH_AMT, PAY_SCH_AMT, DIF_AMT, IMSI_CHK, RTN_SEQ, LOAN_ST, cls_rtn_cau, rimitter, etc, lend_int_vat,"+
				"        ven_code, bank_code, deposit_no, acct_code, autodoc_yn, "+
				"        cls_rtn_fee_int, cls_rtn_etc, file_name, file_type, cms_code, alt_etc, alt_etc_amt, alt_etc_tm "+
				" from   ALLOT"+
				" where  RENT_MNG_ID = ? and RENT_L_CD = ?";
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
	    	rs = pstmt.executeQuery();    	
			while(rs.next())
			{
				debt.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				debt.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				debt.setAllot_st(rs.getString("ALLOT_ST")==null?"":rs.getString("ALLOT_ST"));	
				debt.setCpt_cd(rs.getString("CPT_CD")==null?"":rs.getString("CPT_CD"));	
				debt.setLend_int(rs.getString("LEND_INT")==null?"":rs.getString("LEND_INT"));	
				debt.setLend_prn(rs.getString("LEND_PRN")==null?0:Integer.parseInt(rs.getString("LEND_PRN")));			
				debt.setAlt_fee(rs.getString("ALT_FEE")==null?0:Integer.parseInt(rs.getString("ALT_FEE")));			
				debt.setRtn_tot_amt(rs.getString("RTN_TOT_AMT")==null?0:Integer.parseInt(rs.getString("RTN_TOT_AMT")));		
				debt.setLoan_debtor(rs.getString("LOAN_DEBTOR")==null?"":rs.getString("LOAN_DEBTOR"));
				debt.setRtn_cdt(rs.getString("RTN_CDT")==null?"":rs.getString("RTN_CDT"));	
				debt.setRtn_way(rs.getString("RTN_WAY")==null?"":rs.getString("RTN_WAY"));	
				debt.setRtn_est_dt(rs.getString("RTN_EST_DT")==null?"":rs.getString("RTN_EST_DT"));
				debt.setLend_no(rs.getString("LEND_NO")==null?"":rs.getString("LEND_NO"));			
				debt.setNtrl_fee(rs.getString("NTRL_FEE")==null?0:Integer.parseInt(rs.getString("NTRL_FEE")));			
				debt.setStp_fee(rs.getString("STP_FEE")==null?0:Integer.parseInt(rs.getString("STP_FEE")));			
				debt.setLend_dt(rs.getString("LEND_DT")==null?"":rs.getString("LEND_DT"));	
				debt.setLend_int_amt(rs.getString("LEND_INT_AMT")==null?0:Integer.parseInt(rs.getString("LEND_INT_AMT")));		
				debt.setAlt_amt(rs.getString("ALT_AMT")==null?0:Integer.parseInt(rs.getString("ALT_AMT")));			
				debt.setTot_alt_tm(rs.getString("TOT_ALT_TM")==null?"":rs.getString("TOT_ALT_TM"));
				debt.setAlt_start_dt(rs.getString("ALT_START_DT")==null?"":rs.getString("ALT_START_DT"));
				debt.setAlt_end_dt(rs.getString("ALT_END_DT")==null?"":rs.getString("ALT_END_DT"));
				debt.setBond_get_st(rs.getString("BOND_GET_ST")==null?"":rs.getString("BOND_GET_ST"));
				debt.setBond_st(rs.getString("BOND_ST")==null?"":rs.getString("BOND_ST"));	
				debt.setLoan_con_nm(rs.getString("LOAN_CON_NM")==null?"":rs.getString("LOAN_CON_NM"));
				debt.setLoan_con_ssn(rs.getString("LOAN_CON_SSN")==null?"":rs.getString("LOAN_CON_SSN"));
				debt.setLoan_con_rel(rs.getString("LOAN_CON_REL")==null?"":rs.getString("LOAN_CON_REL"));
				debt.setLoan_con_tel(rs.getString("LOAN_CON_TEL")==null?"":rs.getString("LOAN_CON_TEL"));
				debt.setLoan_con_addr(rs.getString("LOAN_CON_ADDR")==null?"":rs.getString("LOAN_CON_ADDR"));
				debt.setGrtr_nm1(rs.getString("GRTR_NM1")==null?"":rs.getString("GRTR_NM1"));	
				debt.setGrtr_ssn1(rs.getString("GRTR_SSN1")==null?"":rs.getString("GRTR_SSN1"));	
				debt.setGrtr_rel1(rs.getString("GRTR_REL1")==null?"":rs.getString("GRTR_REL1"));	
				debt.setGrtr_tel1(rs.getString("GRTR_TEL1")==null?"":rs.getString("GRTR_TEL1"));	
				debt.setGrtr_addr1(rs.getString("GRTR_ADDR1")==null?"":rs.getString("GRTR_ADDR1"));	
				debt.setGrtr_nm2(rs.getString("GRTR_NM2")==null?"":rs.getString("GRTR_NM2"));		
				debt.setGrtr_ssn2(rs.getString("GRTR_SSN2")==null?"":rs.getString("GRTR_SSN2"));	
				debt.setGrtr_rel2(rs.getString("GRTR_REL2")==null?"":rs.getString("GRTR_REL2"));	
				debt.setGrtr_tel2(rs.getString("GRTR_TEL2")==null?"":rs.getString("GRTR_TEL2"));	
				debt.setGrtr_addr2(rs.getString("GRTR_ADDR2")==null?"":rs.getString("GRTR_ADDR2"));	
				debt.setGrtr_nm3(rs.getString("GRTR_NM3")==null?"":rs.getString("GRTR_NM3"));		
				debt.setGrtr_ssn3(rs.getString("GRTR_SSN3")==null?"":rs.getString("GRTR_SSN3"));	
				debt.setGrtr_rel3(rs.getString("GRTR_REL3")==null?"":rs.getString("GRTR_REL3"));	
				debt.setGrtr_tel3(rs.getString("GRTR_TEL3")==null?"":rs.getString("GRTR_TEL3"));	
				debt.setGrtr_addr3(rs.getString("GRTR_ADDR3")==null?"":rs.getString("GRTR_ADDR3"));	
				debt.setFst_pay_dt(rs.getString("FST_PAY_DT")==null?"":rs.getString("FST_PAY_DT"));	
				debt.setFst_pay_amt(rs.getString("FST_PAY_AMT")==null?0:Integer.parseInt(rs.getString("FST_PAY_AMT")));		
				debt.setBond_get_st_sub(rs.getString("BOND_GET_ST_SUB")==null?"":rs.getString("BOND_GET_ST_SUB"));	
				debt.setCls_rtn_dt(rs.getString("CLS_RTN_DT")==null?"":rs.getString("CLS_RTN_DT"));	
				debt.setCls_rtn_amt(rs.getString("CLS_RTN_AMT")==null?0:Integer.parseInt(rs.getString("CLS_RTN_AMT")));			
				debt.setCls_rtn_fee(rs.getString("CLS_RTN_FEE")==null?0:Integer.parseInt(rs.getString("CLS_RTN_FEE")));			
				debt.setNote(rs.getString("NOTE")==null?"":rs.getString("NOTE"));	
				debt.setCpt_cd_st(rs.getString("CPT_CD_ST")==null?"":rs.getString("CPT_CD_ST"));	
				debt.setLend_id(rs.getString("LEND_ID")==null?"":rs.getString("LEND_ID"));	
				debt.setCar_mng_id(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));	
				debt.setLoan_st_dt(rs.getString("LOAN_ST_DT")==null?"":rs.getString("LOAN_ST_DT"));	
				debt.setLoan_sch_amt(rs.getString("LOAN_SCH_AMT")==null?0:Integer.parseInt(rs.getString("LOAN_SCH_AMT")));			
				debt.setPay_sch_amt(rs.getString("PAY_SCH_AMT")==null?0:Integer.parseInt(rs.getString("PAY_SCH_AMT")));			
				debt.setDif_amt(rs.getString("DIF_AMT")==null?0:Integer.parseInt(rs.getString("DIF_AMT")));			
				debt.setImsi_chk(rs.getString("IMSI_CHK")==null?"":rs.getString("IMSI_CHK"));	
				debt.setRtn_seq(rs.getString("RTN_SEQ")==null?"":rs.getString("RTN_SEQ"));	
				debt.setLoan_st(rs.getString("LOAN_ST")==null?"":rs.getString("LOAN_ST"));				
				debt.setCls_rtn_cau(rs.getString("cls_rtn_cau")==null?"":rs.getString("cls_rtn_cau"));				
				debt.setRimitter(rs.getString("rimitter")==null?"":rs.getString("rimitter"));				
				debt.setLend_int_vat(rs.getString("lend_int_vat")==null?0:Integer.parseInt(rs.getString("lend_int_vat")));			
				debt.setVen_code	(rs.getString("ven_code")==null?"":rs.getString("ven_code"));
				debt.setBank_code	(rs.getString("bank_code")==null?"":rs.getString("bank_code"));
				debt.setDeposit_no	(rs.getString("deposit_no")==null?"":rs.getString("deposit_no"));
				debt.setAcct_code	(rs.getString("acct_code")==null?"":rs.getString("acct_code"));
				debt.setAutodoc_yn	(rs.getString("autodoc_yn")==null?"":rs.getString("autodoc_yn"));
				debt.setCls_rtn_fee_int	(rs.getString("cls_rtn_fee_int")==null?"":rs.getString("cls_rtn_fee_int"));
				debt.setCls_rtn_etc		(rs.getString("cls_rtn_etc")==null?"":rs.getString("cls_rtn_etc"));
				debt.setFile_name		(rs.getString("file_name")==null?"":rs.getString("file_name"));
				debt.setFile_type		(rs.getString("file_type")==null?"":rs.getString("file_type"));
				debt.setCms_code		(rs.getString("cms_code")==null?"":rs.getString("cms_code"));				
				debt.setAlt_etc		(rs.getString("alt_etc")==null?"":rs.getString("alt_etc"));
				debt.setAlt_etc_amt (rs.getString("alt_etc_amt")==null?0:Integer.parseInt(rs.getString("alt_etc_amt")));
				debt.setAlt_etc_tm	(rs.getString("alt_etc_tm")==null?"":rs.getString("alt_etc_tm"));

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContDebt]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return debt;
		}
	}	

	/* 재계약 등록 : 지급수수료 bean query*/	
	public Vector getCommi(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector rtn = new Vector();
		String query = "";
		query = " select * from commi"+
				" where RENT_MNG_ID = ? and RENT_L_CD = ?";
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();    	
			while(rs.next())
			{
				CommiBean commi = new CommiBean();
				commi.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				commi.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				commi.setEmp_id			(rs.getString("EMP_ID")==null?"":rs.getString("EMP_ID"));
				commi.setAgnt_st		(rs.getString("AGNT_ST")==null?"":rs.getString("AGNT_ST"));
				commi.setCommi			(rs.getInt   ("COMMI"));
				commi.setInc_amt		(rs.getInt   ("INC_AMT"));
				commi.setRes_amt		(rs.getInt   ("RES_AMT"));
				commi.setTot_amt		(rs.getInt   ("TOT_AMT"));
				commi.setDif_amt		(rs.getInt   ("DIF_AMT"));
				commi.setSup_dt			(rs.getString("SUP_DT")==null?"":rs.getString("SUP_DT"));
				commi.setRel			(rs.getString("REL")==null?"":rs.getString("REL"));
				commi.setComm_rt		(rs.getFloat ("comm_rt"));
				commi.setComm_r_rt		(rs.getFloat ("comm_r_rt"));
				commi.setCh_remark		(rs.getString("ch_remark")==null?"":rs.getString("ch_remark"));
				commi.setCh_sac_id		(rs.getString("ch_sac_id")==null?"":rs.getString("ch_sac_id"));
				commi.setEmp_bank		(rs.getString("emp_bank")==null?"":rs.getString("emp_bank"));
				commi.setEmp_acc_no		(rs.getString("emp_acc_no")==null?"":rs.getString("emp_acc_no"));
				commi.setEmp_acc_nm		(rs.getString("emp_acc_nm")==null?"":rs.getString("emp_acc_nm"));
				commi.setCommi_car_amt	(rs.getInt   ("COMMI_CAR_AMT"));
				commi.setReq_id			(rs.getString("req_id")==null?"":rs.getString("req_id"));
				commi.setReq_dt			(rs.getString("req_dt")==null?"":rs.getString("req_dt"));
				commi.setReq_cont		(rs.getString("req_cont")==null?"":rs.getString("req_cont"));
				commi.setCommi_car_st	(rs.getString("commi_car_st")==null?"":rs.getString("commi_car_st"));
				commi.setRec_incom_yn	(rs.getString("rec_incom_yn")==null?"":rs.getString("rec_incom_yn"));
				commi.setRec_incom_st	(rs.getString("rec_incom_st")==null?"":rs.getString("rec_incom_st"));
				commi.setRec_ssn		(rs.getString("rec_ssn")==null?"":rs.getString("rec_ssn"));
				commi.setRec_zip		(rs.getString("rec_zip")==null?"":rs.getString("rec_zip"));
				commi.setRec_addr		(rs.getString("rec_addr")==null?"":rs.getString("rec_addr"));
				commi.setFile_name1		(rs.getString("file_name1")==null?"":rs.getString("file_name1"));
				commi.setFile_name2		(rs.getString("file_name2")==null?"":rs.getString("file_name2"));
				commi.setAdd_amt1		(rs.getInt   ("add_amt1"));
				commi.setAdd_amt2		(rs.getInt   ("add_amt2"));
				commi.setAdd_amt3		(rs.getInt   ("add_amt3"));
				commi.setAdd_cau1		(rs.getString("add_cau1")==null?"":rs.getString("add_cau1"));
				commi.setAdd_cau2		(rs.getString("add_cau2")==null?"":rs.getString("add_cau2"));
				commi.setAdd_cau3		(rs.getString("add_cau3")==null?"":rs.getString("add_cau3"));
				commi.setInc_per		(rs.getString("inc_per")==null?"":rs.getString("inc_per"));
				commi.setRes_per		(rs.getString("res_per")==null?"":rs.getString("res_per"));
				commi.setTot_per		(rs.getString("tot_per")==null?"":rs.getString("tot_per"));
				commi.setData_no		(rs.getString("data_no")==null?"":rs.getString("data_no"));
				commi.setSeqidx			(rs.getString("seqidx")==null?"":rs.getString("seqidx"));
				commi.setFile_gubun1	(rs.getString("file_gubun1")==null?"":rs.getString("file_gubun1"));
				commi.setFile_gubun2	(rs.getString("file_gubun2")==null?"":rs.getString("file_gubun2"));
				commi.setVat_amt		(rs.getInt   ("VAT_AMT"));
				commi.setVat_per		(rs.getString("vat_per")==null?"":rs.getString("vat_per"));
				commi.setSh_base_dt		(rs.getString("sh_base_dt")==null?"":rs.getString("sh_base_dt"));
				commi.setBank_cd		(rs.getString("bank_cd")==null?"":rs.getString("bank_cd"));
				rtn.add(commi);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCommi]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtn;
		}					
	}	

	/* 재계약 등록 : 근저당 bean query*/	
	public Vector getCltrs(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
		query = " select"+
				" cltr_id, cltr_amt, cltr_per_loan, reg_tax, cltr_f_amt, cltr_exp_cau, mort_lank,"+
				" cltr_user, cltr_office, cltr_offi_man, cltr_offi_tel, cltr_offi_fax,"+
				" set_stp_fee, exp_tax, exp_stp_fee, cltr_st,"+
				" decode(cltr_exp_dt, '', '', substr(cltr_exp_dt, 1, 4) || '-' || substr(cltr_exp_dt, 5, 2) || '-'||substr(cltr_exp_dt, 7, 2)) cltr_exp_dt,"+
				" decode(cltr_set_dt, '', '', substr(cltr_set_dt, 1, 4) || '-' || substr(cltr_set_dt, 5, 2) || '-'||substr(cltr_set_dt, 7, 2)) cltr_set_dt,"+
				" decode(cltr_docs_dt, '', '', substr(cltr_docs_dt, 1, 4) || '-' || substr(cltr_docs_dt, 5, 2) || '-'||substr(cltr_docs_dt, 7, 2)) cltr_docs_dt"+
				" from cltr"+
				" where rent_mng_id=? and rent_l_cd=?";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
	    	rs = pstmt.executeQuery();    	
			while(rs.next())
			{
				CltrBean cltr = new CltrBean();
				cltr.setRent_mng_id(mng_id);
				cltr.setRent_l_cd(l_cd);
				cltr.setCltr_id(rs.getString("CLTR_ID")==null?"":rs.getString("CLTR_ID"));
				cltr.setCltr_amt(rs.getString("CLTR_AMT")==null?0:Integer.parseInt(rs.getString("CLTR_AMT")));
				cltr.setCltr_per_loan(rs.getString("CLTR_PER_LOAN")==null?"":rs.getString("CLTR_PER_LOAN"));
				cltr.setCltr_exp_dt(rs.getString("CLTR_EXP_DT")==null?"":rs.getString("CLTR_EXP_DT"));
				cltr.setCltr_set_dt(rs.getString("CLTR_SET_DT")==null?"":rs.getString("CLTR_SET_DT"));
				cltr.setReg_tax(rs.getString("REG_TAX")==null?0:Integer.parseInt(rs.getString("REG_TAX")));
				cltr.setCltr_docs_dt(rs.getString("CLTR_DOCS_DT")==null?"":rs.getString("CLTR_DOCS_DT"));
				cltr.setCltr_f_amt(rs.getString("CLTR_F_AMT")==null?0:Integer.parseInt(rs.getString("CLTR_F_AMT")));
				cltr.setCltr_exp_cau(rs.getString("CLTR_EXP_CAU")==null?"":rs.getString("CLTR_EXP_CAU"));
				cltr.setMort_lank(rs.getString("MORT_LANK")==null?"":rs.getString("MORT_LANK"));
				cltr.setCltr_user(rs.getString("CLTR_USER")==null?"":rs.getString("CLTR_USER"));
				cltr.setCltr_office(rs.getString("CLTR_OFFICE")==null?"":rs.getString("CLTR_OFFICE"));
				cltr.setCltr_offi_man(rs.getString("CLTR_OFFI_MAN")==null?"":rs.getString("CLTR_OFFI_MAN"));
				cltr.setCltr_offi_tel(rs.getString("CLTR_OFFI_TEL")==null?"":rs.getString("CLTR_OFFI_TEL"));
				cltr.setCltr_offi_fax(rs.getString("CLTR_OFFI_FAX")==null?"":rs.getString("CLTR_OFFI_FAX"));
				cltr.setSet_stp_fee(rs.getString("SET_STP_FEE")==null?0:Integer.parseInt(rs.getString("SET_STP_FEE")));
				cltr.setExp_tax(rs.getString("EXP_TAX")==null?0:Integer.parseInt(rs.getString("EXP_TAX")));
				cltr.setExp_stp_fee(rs.getString("EXP_STP_FEE")==null?0:Integer.parseInt(rs.getString("EXP_STP_FEE")));
				cltr.setCltr_st(rs.getString("CLTR_ST")==null?"":rs.getString("CLTR_ST"));
				vt.add(cltr);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCltrs]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//재계약 등록 : 근저당 insert
	public boolean insertCltr(CltrBean cltr)
	{
		getConnection();
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		boolean flag = true;
		ResultSet rs = null;
		String cltr_id = "";
		String query_id = "select nvl(ltrim(to_char(max(cltr_id)+1, '00')), '01') ID from cltr"+
							" where rent_mng_id ='"+cltr.getRent_mng_id()+"'"+
							" and rent_l_cd='"+cltr.getRent_l_cd()+"'" ;

		String query_i = " insert into CLTR (RENT_MNG_ID, RENT_L_CD, CLTR_ID, CLTR_AMT, CLTR_PER_LOAN, CLTR_EXP_DT,"+
						" CLTR_SET_DT, REG_TAX, CLTR_FEE, CLTR_PAY_DT ) values ("+
						" ?, ?, ?, ?, ?, replace(?, '-', ''), replace(?, '-', ''), ?, ?, replace(?, '-', ''))";						
		
		try{
			conn.setAutoCommit(false);

			pstmt1 = conn.prepareStatement(query_id);
			rs = pstmt1.executeQuery();
			while(rs.next())
			{
				cltr_id = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt1.close();
			
			pstmt2 = conn.prepareStatement(query_i);
			pstmt2.setString(1, cltr.getRent_mng_id());	
			pstmt2.setString(2, cltr.getRent_l_cd());
			pstmt2.setString(3, cltr_id);
			pstmt2.setInt   (4, cltr.getCltr_amt());
			pstmt2.setString(5, cltr.getCltr_per_loan());
			pstmt2.setString(6, cltr.getCltr_exp_dt());
			pstmt2.setString(7, cltr.getCltr_set_dt());
			pstmt2.setInt   (8, cltr.getReg_tax());
			pstmt2.setInt   (9, cltr.getCltr_fee());
			pstmt2.setString(10, cltr.getCltr_pay_dt());
		    pstmt2.executeUpdate();	
			pstmt2.close();

			conn.commit();
		}catch(Exception e){
			System.out.println("[AddContDatabase:insertCltr]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt1 != null)	pstmt1.close();
                if(pstmt2 != null)	pstmt2.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 등록/수정 : 기존차량 선택하면 그 기존차량을 보유했던 계액은 사용안하는 것으로 한다.
	public boolean updateUseyn(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update cont set use_yn='N' where rent_mng_id='"+m_id+"' and rent_l_cd='"+l_cd+"'";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateUseyn]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 등록/수정 : 기존차량 선택하면 그 기존차량을 보유했던 계액은 사용안하는 것으로 한다.
	public boolean updateUseynDt(String m_id, String l_cd, String rent_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update cont set use_yn='N', rent_end_dt=replace('"+rent_dt+"','-','') where car_st='2' and rent_mng_id='"+m_id+"' and rent_l_cd='"+l_cd+"'";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateUseynDt]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	/*  계약 수정 : CMS 등록여부
	 *  gubun -  1: 신규대여료, 2: 연장대여료	 */
	public String getCmsMngSt(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String gubun = "";
		String query = " select decode(a.cms_end_dt, '', decode(a.cms_start_dt, '','1', '2'), '3') gubun"+
						" from cms_mng a, (select rent_mng_id, rent_l_cd, max(seq) seq from cms_mng group by rent_mng_id, rent_l_cd) b"+
						" where a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.seq=b.seq"+
						" and a.rent_mng_id = '"+m_id+"' and a.rent_l_cd = '"+l_cd+"'";
		
		try{
			pstmt = conn.prepareStatement(query);
		   	rs = pstmt.executeQuery();
			while(rs.next())
			{
				gubun = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		}catch(SQLException e){
			System.out.println("[AddContDataase:getCmsMngSt]"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return gubun;
		}							
	}

	/* 계약 수정 : 자동이체 bean query*/	
	public ContCmsBean getCmsMng(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCmsBean bean = new ContCmsBean();
	
		String query = " select a.*, decode(g.cms_status, '0', '신규', '1','신규신청중','2','신규신청불능','3','신청완료','11','해지','12','해지신청중','13','해지완료','14','14','-') cbit "+
						" from cms_mng a, (select rent_mng_id, rent_l_cd, max(seq) seq from cms_mng group by rent_mng_id, rent_l_cd) b, cms.member_user g"+
						" where a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.seq=b.seq and a.rent_l_cd=g.cms_primary_seq(+)"+
						" and a.rent_mng_id = '"+m_id+"' and a.rent_l_cd = '"+l_cd+"'";


		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();    	
			if(rs.next())
			{
				bean.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				bean.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				bean.setSeq			(rs.getString("SEQ")==null?"":rs.getString("SEQ"));
				bean.setCms_st		(rs.getString("CMS_ST")==null?"":rs.getString("CMS_ST"));
				bean.setCms_amt		(rs.getInt   ("CMS_AMT"));
				bean.setCp_st		(rs.getString("CP_ST")==null?"":rs.getString("CP_ST"));
				bean.setCms_start_dt(rs.getString("CMS_START_DT")==null?"":rs.getString("CMS_START_DT"));
				bean.setCms_end_dt	(rs.getString("CMS_END_DT")==null?"":rs.getString("CMS_END_DT"));
				bean.setCms_day		(rs.getString("CMS_DAY")==null?"":rs.getString("CMS_DAY"));
				bean.setCms_bank	(rs.getString("CMS_BANK")==null?"":rs.getString("CMS_BANK"));
				bean.setCms_acc_no	(rs.getString("CMS_ACC_NO")==null?"":rs.getString("CMS_ACC_NO"));
				bean.setCms_dep_nm	(rs.getString("CMS_DEP_NM")==null?"":rs.getString("CMS_DEP_NM"));
				bean.setCms_dep_ssn	(rs.getString("CMS_DEP_SSN")==null?"":rs.getString("CMS_DEP_SSN"));
				bean.setCms_dep_post(rs.getString("CMS_DEP_POST")==null?"":rs.getString("CMS_DEP_POST"));
				bean.setCms_dep_addr(rs.getString("CMS_DEP_ADDR")==null?"":rs.getString("CMS_DEP_ADDR"));
				bean.setCms_etc		(rs.getString("CMS_ETC")==null?"":rs.getString("CMS_ETC"));
				bean.setCms_tel		(rs.getString("CMS_TEL")==null?"":rs.getString("CMS_TEL"));
				bean.setCms_m_tel	(rs.getString("CMS_M_TEL")==null?"":rs.getString("CMS_M_TEL"));
				bean.setCms_email	(rs.getString("CMS_EMAIL")==null?"":rs.getString("CMS_EMAIL"));
				bean.setApp_dt		(rs.getString("APP_DT")==null?"":rs.getString("APP_DT"));
				bean.setReg_dt		(rs.getString("REG_DT")==null?"":rs.getString("REG_DT"));
				bean.setReg_id		(rs.getString("REG_ID")==null?"":rs.getString("REG_ID"));
				bean.setUpdate_dt	(rs.getString("UPDATE_DT")==null?"":rs.getString("UPDATE_DT"));
				bean.setUpdate_id	(rs.getString("UPDATE_ID")==null?"":rs.getString("UPDATE_ID"));
				bean.setReg_st		(rs.getString("REG_ST")==null?"":rs.getString("REG_ST"));				
				bean.setCbit		(rs.getString("cbit")==null?"":rs.getString("cbit"));		
				bean.setApp_id		(rs.getString("APP_ID")==null?"":rs.getString("APP_ID"));
				bean.setCms_bk		(rs.getString("CMS_BK")==null?"":rs.getString("CMS_BK"));
				bean.setBank_cd		(rs.getString("BANK_CD")==null?"":rs.getString("BANK_CD"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCmsMng]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bean;
		}				
	}

	//계약 수정 : 자동이체 insert
	public boolean insertContCmsMng(ContCmsBean bean)
	{
		getConnection();
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		boolean flag = true;
		ResultSet rs = null;
		ResultSet rs1 = null;
		String seq = "";
		String bank_cd = "";
		String cms_bk = "";
		
		String query1 = " select nvl(max(seq)+1, 1) ID from cms_mng"+
							" where rent_mng_id ='"+bean.getRent_mng_id()+"' and rent_l_cd='"+bean.getRent_l_cd()+"'" ;

		String query3 = " select code, cms_bk from code "+
							" where c_st = '0003' and nm_cd ='"+bean.getCms_bank()+"'" ;
							
		String query2 = " insert into cms_mng "+
						" (RENT_MNG_ID, RENT_L_CD, SEQ, CMS_ST, CMS_AMT,"+
						" CP_ST, CMS_START_DT, CMS_END_DT, CMS_DAY, CMS_BANK,"+
						" CMS_ACC_NO, CMS_DEP_NM, CMS_DEP_SSN, CMS_DEP_POST, CMS_DEP_ADDR,"+
						" CMS_ETC, CMS_TEL, CMS_M_TEL, CMS_EMAIL, APP_DT,"+
						" REG_DT, REG_ID, REG_ST, BANK_CD, APP_ID, CMS_BK )"+
						" values ("+
						" ?, ?, ?, ?, ?,"+
						" ?, replace(?, '-', ''), replace(?, '-', ''), ?, ?,"+
						" replace(?, '-', ''), ?, ?, ?, ?,"+
						" ?, ?, ?, ?, replace(?, '-', ''),"+
						" to_char(sysdate,'YYYYMMDD'), ?, ?, ?, ?, ? "+
						")";
		
		try{
			conn.setAutoCommit(false);

			pstmt1 = conn.prepareStatement(query1);
			rs = pstmt1.executeQuery();
			if(rs.next())	seq = rs.getString(1)==null?"":rs.getString(1);
			rs.close();    
			pstmt1.close();
			
			pstmt3 = conn.prepareStatement(query3);
			rs1 = pstmt3.executeQuery();
			if(rs1.next()){
				bank_cd = rs1.getString(1)==null?"":rs1.getString(1);
				cms_bk  = rs1.getString(2)==null?"":rs1.getString(2);
			}
			rs1.close();   
			pstmt3.close();
			
			pstmt2 = conn.prepareStatement(query2);
			pstmt2.setString(1, bean.getRent_mng_id	());	
			pstmt2.setString(2, bean.getRent_l_cd	());
			pstmt2.setString(3, seq                   );
			pstmt2.setString(4, bean.getCms_st		());
			pstmt2.setInt   (5, bean.getCms_amt		());
			pstmt2.setString(6, bean.getCp_st		());
			pstmt2.setString(7, bean.getCms_start_dt());
			pstmt2.setString(8, bean.getCms_end_dt	());
			pstmt2.setString(9, bean.getCms_day		());
			pstmt2.setString(10, bean.getCms_bank	());
			pstmt2.setString(11, bean.getCms_acc_no	());
			pstmt2.setString(12, bean.getCms_dep_nm	());
			pstmt2.setString(13, bean.getCms_dep_ssn());
			pstmt2.setString(14, bean.getCms_dep_post());
			pstmt2.setString(15, bean.getCms_dep_addr());
			pstmt2.setString(16, bean.getCms_etc	());
			pstmt2.setString(17, bean.getCms_tel	());
			pstmt2.setString(18, bean.getCms_m_tel	());
			pstmt2.setString(19, bean.getCms_email	());
			pstmt2.setString(20, bean.getApp_dt		());
			pstmt2.setString(21, bean.getReg_id		());
			pstmt2.setString(22, bean.getReg_st		());	
			pstmt2.setString(23, bank_cd              );			
			pstmt2.setString(24, bean.getApp_id		());
			pstmt2.setString(25, cms_bk               );
		    pstmt2.executeUpdate();	
			pstmt2.close();

			conn.commit();


		}catch(Exception e){
			System.out.println("[AddContDatabase:insertContCmsMng]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(rs1 != null )	rs1.close();
                if(pstmt1 != null)	pstmt1.close();
                if(pstmt2 != null)	pstmt2.close();
                if(pstmt3 != null)	pstmt3.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 수정 : 자동이체 update
	public boolean updateContCmsMng(ContCmsBean bean)
	{
		getConnection();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt3 = null;
		ResultSet rs = null;
		boolean flag = true;
		String query = "";
		String bank_cd = "";
		String cms_bk = "";
		
		String query3 = " select code, cms_bk from code "+
							" where c_st = '0003' and nm_cd ='"+bean.getCms_bank()+"'" ;
							
		query = " update cms_mng set "+
				" CMS_ST=?, CMS_AMT=?, CP_ST=?, CMS_START_DT=replace(?, '-', ''), CMS_END_DT=replace(?, '-', ''),"+
				" CMS_DAY=?, CMS_BANK=?, CMS_ACC_NO=replace(?, '-', ''), CMS_DEP_NM=?, CMS_DEP_SSN=?,"+
				" CMS_DEP_POST=?,  CMS_DEP_ADDR=?, CMS_ETC=?, CMS_TEL=?, CMS_M_TEL=?,"+
				" CMS_EMAIL=?, UPDATE_DT=to_char(sysdate,'YYYYMMDD'), UPDATE_ID=?, REG_ST=?, APP_DT=replace(?, '-', ''), BANK_CD = ?, APP_ID=?, CMS_BK=? "+
				" where rent_mng_id=? and rent_l_cd=? and seq=?";
		
		try{

			conn.setAutoCommit(false);
			
			pstmt3 = conn.prepareStatement(query3);
			rs = pstmt3.executeQuery();
			if(rs.next()){
				bank_cd = rs.getString(1)==null?"":rs.getString(1);
				cms_bk  = rs.getString(2)==null?"":rs.getString(2);
			}
			rs.close();
			pstmt3.close();
						
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, bean.getCms_st());
			pstmt.setInt   (2, bean.getCms_amt());
			pstmt.setString(3, bean.getCp_st());
			pstmt.setString(4, bean.getCms_start_dt());
			pstmt.setString(5, bean.getCms_end_dt());
			pstmt.setString(6, bean.getCms_day());
			pstmt.setString(7, bean.getCms_bank());
			pstmt.setString(8, bean.getCms_acc_no());
			pstmt.setString(9, bean.getCms_dep_nm());
			pstmt.setString(10, bean.getCms_dep_ssn());
			pstmt.setString(11, bean.getCms_dep_post());
			pstmt.setString(12, bean.getCms_dep_addr());
			pstmt.setString(13, bean.getCms_etc());
			pstmt.setString(14, bean.getCms_tel());
			pstmt.setString(15, bean.getCms_m_tel());
			pstmt.setString(16, bean.getCms_email());
			pstmt.setString(17, bean.getUpdate_id());
			pstmt.setString(18, bean.getReg_st());			
			pstmt.setString(19, bean.getApp_dt());
			pstmt.setString(20, bank_cd);			
			pstmt.setString(21, bean.getApp_id());			
			pstmt.setString(22, cms_bk);			
			pstmt.setString(23, bean.getRent_mng_id());	
			pstmt.setString(24, bean.getRent_l_cd());
			pstmt.setString(25, bean.getSeq());				
		    pstmt.executeUpdate();	
			pstmt.close();

			conn.commit();

		}catch(Exception e){
			System.out.println("[AddContDatabase:updateContCmsMng]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
				if(rs != null )		rs.close();
				if(pstmt3 != null)	pstmt3.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 스캔파일 업로드
	public int scanUpLoad(String m_id, String l_cd, String filename)
	{
		getConnection();
		PreparedStatement pstmt = null;
		int count = 0;
		String query = " update cont set scan_file='"+filename+"' "+
							" where RENT_MNG_ID = '"+m_id+"' and RENT_L_CD = '"+l_cd+"'";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
		    count = pstmt.executeUpdate();
		    pstmt.close();
		   	conn.commit();
		   	
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:scanUpLoad]\n"+e);
			e.printStackTrace();
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return count;
		}
	}	

	//납품관리-------------------------------------------------------------------------------------------------------------------------

	//납품관리현황
	public Hashtable getRentEstStat(String br_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
        String query = "";
		String t_dt1 = "to_char(sysdate,'YYYYMMDD')";
		String t_dt2 = "to_char(sysdate+1,'YYYYMMDD')";
		String t_dt3 = "to_char(sysdate+2,'YYYYMMDD')";

		query = " select"+
				" count(decode(substr(nvl(b.dlv_est_dt,'00000000'),1,8), "+t_dt1+",  decode(a.dlv_dt,'',   b.dlv_est_dt))) 	a1,"+				//당일 출고예정 미실시
				" count(decode(substr(nvl(b.dlv_est_dt,'00000000'),1,8), "+t_dt1+",  decode(a.dlv_dt,'','',b.dlv_est_dt))) 	a2,"+ 				//당일 출고예정 실시 
				" count(decode(substr(nvl(b.dlv_est_dt,'00000000'),1,8), "+t_dt2+",  decode(a.dlv_dt,'',   b.dlv_est_dt))) 	a3,"+				//익일 출고예정 미실시
				" count(decode(substr(nvl(b.dlv_est_dt,'00000000'),1,8), "+t_dt2+",  decode(a.dlv_dt,'','',b.dlv_est_dt))) 	a4,"+ 				//익일 출고예정 실시 
				" count(decode(substr(nvl(b.dlv_est_dt,'00000000'),1,8), "+t_dt3+",  decode(a.dlv_dt,'',   b.dlv_est_dt))) 	a5,"+				//명후일 출고예정 미실시
				" count(decode(substr(nvl(b.dlv_est_dt,'00000000'),1,8), "+t_dt3+",  decode(a.dlv_dt,'','',b.dlv_est_dt)))	a6,"+				//명후일 출고예정 실시 
				" count(decode(substr(nvl(e.reg_est_dt,'00000000'),1,8), "+t_dt1+",  decode(c.init_reg_dt,'',   e.reg_est_dt))) 	a7,"+		//당일 등록예정 미실시
				" count(decode(substr(nvl(e.reg_est_dt,'00000000'),1,8), "+t_dt1+",  decode(c.init_reg_dt,'','',e.reg_est_dt))) 	a8,"+ 		//당일 등록예정 실시 
				" count(decode(substr(nvl(e.reg_est_dt,'00000000'),1,8), "+t_dt2+",  decode(c.init_reg_dt,'',   e.reg_est_dt))) 	a9,"+		//익일 등록예정 미실시
				" count(decode(substr(nvl(e.reg_est_dt,'00000000'),1,8), "+t_dt2+",	 decode(c.init_reg_dt,'','',e.reg_est_dt))) 	a10,"+		//익일 등록예정 실시 
				" count(decode(substr(nvl(e.reg_est_dt,'00000000'),1,8), "+t_dt3+",  decode(c.init_reg_dt,'',   e.reg_est_dt))) 	a11,"+		//명후일 등록예정 미실시
				" count(decode(substr(nvl(e.reg_est_dt,'00000000'),1,8), "+t_dt3+",  decode(c.init_reg_dt,'','',e.reg_est_dt))) 	a12,"+		//명후일 등록예정 실시 
				" count(decode(substr(nvl(d.rent_est_dt,'00000000'),1,8), "+t_dt1+", decode(d.rent_start_dt,'',   d.rent_est_dt))) 	a13,"+		//당일 납품예정 미실시
				" count(decode(substr(nvl(d.rent_est_dt,'00000000'),1,8), "+t_dt1+", decode(d.rent_start_dt,'','',d.rent_est_dt))) 	a14,"+		//당일 납품예정 실시 
				" count(decode(substr(nvl(d.rent_est_dt,'00000000'),1,8), "+t_dt2+", decode(d.rent_start_dt,'',   d.rent_est_dt))) 	a15,"+		//익일 납품예정 미실시
				" count(decode(substr(nvl(d.rent_est_dt,'00000000'),1,8), "+t_dt2+", decode(d.rent_start_dt,'','',d.rent_est_dt))) 	a16,"+		//익일 납품예정 실시 
				" count(decode(substr(nvl(d.rent_est_dt,'00000000'),1,8), "+t_dt3+", decode(d.rent_start_dt,'',   d.rent_est_dt))) 	a17,"+		//명후일 납품예정 미실시
				" count(decode(substr(nvl(d.rent_est_dt,'00000000'),1,8), "+t_dt3+", decode(d.rent_start_dt,'','',d.rent_est_dt))) 	a18,"+		//명후일 납품예정 실시 
				" count(decode(b.dlv_est_dt,'',decode(a.dlv_dt,'',a.rent_l_cd))) a19,"+									//출고예정 미관리
				" count(decode(a.dlv_dt,'','',decode(e.reg_est_dt,'',decode(c.init_reg_dt,'',a.rent_l_cd)))) a20,"+		//등록예정 미관리
				" count(decode(a.car_st,'2','',decode(c.init_reg_dt,'','',decode(d.rent_est_dt,'',decode(d.rent_start_dt,'',a.rent_l_cd))))) a21,"+	//납품예정 미관리
				" count(decode(a.dlv_dt,'',decode(c.init_reg_dt,'','',a.rent_l_cd))) a22,"+									//등록차량 출고일자 미입력
				" count(decode(d.rent_start_dt,'',decode(c.init_reg_dt,'','',a.rent_l_cd))) a23,"+							//등록차량 대여개시일 미입력
		    	" count(decode(a.reg_id,'1',decode(a.dlv_dt,'',decode(sign(substr(replace(b.dlv_est_dt, '-', ''),1,8)-to_char(sysdate,'YYYYMMDD')),-1, b.dlv_est_dt))) ) a24,"+	//출고예정 기일경과
				" count(decode(c.init_reg_dt,'',decode(sign(substr(replace(e.reg_est_dt, '-', ''),1,8)-to_char(sysdate,'YYYYMMDD')),-1, e.reg_est_dt)) ) a25,"+	//등록예정 기일경과
				" count(decode(d.rent_start_dt,'',decode(sign(substr(replace(d.rent_est_dt, '-', ''),1,8)-to_char(sysdate,'YYYYMMDD')),-1, d.rent_est_dt)) ) a26"+	//납품예정 기일경과
				" from cont a, car_pur b, car_reg c, fee d, car_etc e"+
				" where nvl(a.use_yn,'Y')='Y' and a.car_st<>'2' and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.car_mng_id=c.car_mng_id(+) and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd and d.rent_st='1' and a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd";



		try {
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentEstStat]"+ e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
	}	

	//납품관리 리스트
	public Vector getRentEstList(String br_id, String gubun, String idx)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
		String t_dt = "";
		String field = "";

		if(idx.equals("1"))		field = ", substr(b.dlv_est_dt,1,8)  as est_dt, substr(b.dlv_est_dt,9,2)  as est_h, a.dlv_dt as atn_dt";
		if(idx.equals("2"))		field = ", substr(f.reg_est_dt,1,8)  as est_dt, substr(f.reg_est_dt,9,2)  as est_h, c.init_reg_dt as atn_dt";
		if(idx.equals("3"))		field = ", substr(d.rent_est_dt,1,8) as est_dt, substr(d.rent_est_dt,9,2) as est_h, d.rent_start_dt as atn_dt";

		query = " select"+
				" a.brch_id, a.rent_mng_id, a.rent_l_cd, a.car_mng_id, nvl(e.firm_nm,e.client_nm) firm_nm, nvl(c.car_no,'미등록') car_no, h.car_nm, g.car_name,"+
				" b.dlv_est_dt, a.dlv_dt, c.reg_est_dt, c.init_reg_dt, d.rent_est_dt, d.rent_start_dt"+field+
				" from cont a, car_pur b, car_reg c, fee d, client e, car_etc f, car_nm g, car_mng h"+
				" where a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.car_mng_id=c.car_mng_id(+) and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd and d.rent_st='1' and a.client_id=e.client_id"+
				" and nvl(a.use_yn,'Y')='Y' and a.car_st<>'2' and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd and f.car_id=g.car_id and f.car_seq=g.car_seq and g.car_comp_id=h.car_comp_id and g.car_cd=h.code";

		if(gubun.equals("D1"))		t_dt = "to_char(sysdate,'YYYYMMDD')";
		if(gubun.equals("D2"))		t_dt = "to_char(sysdate+1,'YYYYMMDD')";
		if(gubun.equals("D3"))		t_dt = "to_char(sysdate+2,'YYYYMMDD')";

		if(!t_dt.equals("")){
			if(idx.equals("1"))		query += " and substr(b.dlv_est_dt,1,8) = "+t_dt;
			if(idx.equals("2"))		query += " and substr(f.reg_est_dt,1,8) = "+t_dt;
			if(idx.equals("3"))		query += " and substr(d.rent_est_dt,1,8) = "+t_dt;
		}else{
			if(gubun.equals("D5")){
				if(idx.equals("1"))		query += " and a.car_gu='1' and a.dlv_dt is null and substr(replace(b.dlv_est_dt, '-', ''),1,8)<to_char(sysdate,'YYYYMMDD')";
				if(idx.equals("2"))		query += " and c.init_reg_dt is null and substr(replace(f.reg_est_dt, '-', ''),1,8)<to_char(sysdate,'YYYYMMDD')";
				if(idx.equals("3"))		query += " and d.rent_start_dt is null and substr(replace(d.rent_est_dt, '-', ''),1,8)<to_char(sysdate,'YYYYMMDD')";
			}else{
				if(idx.equals("1"))		query += " and ((b.dlv_est_dt is null and a.dlv_dt is null) or (c.init_reg_dt is not null and a.dlv_dt is null))";
				if(idx.equals("2"))		query += " and a.dlv_dt is not null and f.reg_est_dt is null and c.init_reg_dt is null";
				if(idx.equals("3"))		query += " and ((c.init_reg_dt is not null and d.rent_est_dt is null and d.rent_start_dt is null) or (c.init_reg_dt is not null and d.rent_start_dt is null))";
			}
		}

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentEstList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//납품관리 수정
	public int updateEstDt(String query)
	{
		getConnection();
		PreparedStatement pstmt = null;
		int count = 0;

		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
		    count = pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateEstDt]\n"+e);
			e.printStackTrace();
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return count;
		}
	}	

	//납품관리
	public Hashtable getRentEst(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
        String query = "";

		query = " select"+
				" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, nvl(e.firm_nm,e.client_nm) firm_nm, e.client_nm, e.o_tel, nvl(c.car_no,'미등록') car_no, h.car_nm, g.car_name,"+
				" nvl(substr(b.dlv_est_dt,1,8),'') dlv_est_dt, substr(b.dlv_est_dt,9,2) dlv_est_h, a.dlv_dt,"+
				" substr(f.reg_est_dt,1,8) reg_est_dt, substr(f.reg_est_dt,9,2) reg_est_h, c.init_reg_dt,"+
				" substr(d.rent_est_dt,1,8) rent_est_dt, substr(d.rent_est_dt,9,2) rent_est_h, d.rent_start_dt,"+
				" decode(b.udt_st,'1','본사','2','부산지점','3','대전지점','4','고객','5','대구지점','6','광주지점','') udt_st,"+
				" i.user_nm as bus_nm, k.user_nm as mng_nm, nvl(b.dlv_brch,l.car_off_nm) dlv_brch,"+
				" l.car_off_tel"+
				" from cont a, car_pur b, car_reg c, fee d, client e, car_etc f, car_nm g, car_mng h, users i, users k,"+
				" (select a.*, c.car_off_nm, c.car_off_tel from commi a, car_off_emp b, car_off c where a.agnt_st='2' and a.emp_id=b.emp_id and b.car_off_id=c.car_off_id) l"+
				" where a.rent_mng_id='"+m_id+"' and a.rent_l_cd='"+l_cd+"' "+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd "+
				" and a.car_mng_id=c.car_mng_id(+) "+
				" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd and d.rent_st='1' "+
				" and a.client_id=e.client_id"+
				" and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd "+
				" and f.car_id=g.car_id and f.car_seq=g.car_seq and g.car_comp_id=h.car_comp_id and g.car_cd=h.code "+
				" and a.bus_id = i.user_id and a.mng_id = k.user_id"+
				" and a.rent_mng_id=l.rent_mng_id(+) and a.rent_l_cd=l.rent_l_cd(+)";

		try {
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim()/**/);
				}
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentEst]"+ e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
	}	

	//계약수정 : 계약해지후 영업담당자 변경
	public boolean updateBusIdChange(String m_id, String l_cd, String bus_id2)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update cont set bus_id2=? where rent_mng_id=? and rent_l_cd=?";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, bus_id2);
			pstmt.setString(2, m_id);
			pstmt.setString(3, l_cd);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateBusIdChange]\n"+e);
			e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}


	//계약 한건 검색 : cont_view 조회
	public String getBus_id2_Auto(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String bus_id2 = "";
		String query = "";

		query = " select  "+
				"        c.min_bus_id2"+
				" from   cont_n_view a, users b,"+
				"        ( select aa.client_id, count(*) cnt, min(aa.bus_id2) min_bus_id2, max(aa.bus_id2) max_bus_id2, min(bb.user_nm) min_user_nm "+
				"          from   cont aa, users bb "+
				"          where  nvl(aa.use_yn,'Y')='Y' and aa.car_st in ('1','3') "+
				"                 and aa.bus_id2=bb.user_id and bb.loan_st='1' "+
				"          group by aa.client_id"+
				"        ) c,"+
				"        ( select rent_mng_id, rent_l_cd, sum(fee_s_amt+fee_v_amt) fee_amt "+
				"          from   scd_fee "+
				"          where  rc_yn='0' and r_fee_est_dt < to_char(sysdate,'YYYYMMDD') "+
				"          group by rent_mng_id, rent_l_cd "+
				"        ) d"+
				" where  nvl(a.use_yn,'Y')='Y' and a.car_st in ('1','3') "+
				"        and a.rent_way_cd='3'"+
				"        and a.bus_id2=b.user_id and b.loan_st='2' and b.dept_id <> '0008'"+
				"        and nvl(a.rent_start_dt,to_char(sysdate,'YYYY-MM-DD')) >= '2005-07-01'"+
				"        and a.client_id=c.client_id"+
				"        and a.rent_mng_id=d.rent_mng_id(+) and a.rent_l_cd=d.rent_l_cd(+)"+
				"        and a.client_id='"+client_id+"'";

		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
			if(rs.next())
			{				
				bus_id2 = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getBus_id2_Auto]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bus_id2;
		}
    }

	//계약 한건 검색 : cont_view 조회
	public String getBus_id2_Auto(String rent_mng_id, String rent_l_cd, String rent_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String bus_id2 = "";
		String query = "";

		query = " select  \n"+
				"        decode(c.cnt,1,c.bus_id2,0,'','999999') bus_id2 \n"+
				" from   cont_n_view a, users b, \n"+
				"        ( select client_id, min(bus_id2) bus_id2, count(*) cnt \n"+
				"          from   ( \n"+
				"                   select aa.client_id, aa.bus_id2 \n"+
				"          			from   cont aa, users bb \n"+
				"          			where  nvl(aa.use_yn,'Y')='Y' and aa.car_st in ('1','3') and aa.bus_id2=bb.user_id and bb.loan_st='1' \n"+
				"          				   and replace(aa.rent_dt,'-','') < replace('"+rent_dt+"','-','') \n"+
				"          				   and aa.client_id = (select client_id from cont where rent_l_cd='"+rent_l_cd+"') \n"+
				"          			group by aa.client_id, aa.bus_id2 \n"+
				"                 ) \n"+
				"          group by client_id \n"+
				"        ) c,"+
				"        ( select rent_mng_id, rent_l_cd, sum(fee_s_amt+fee_v_amt) fee_amt "+
				"          from   scd_fee "+
				"          where  rc_yn='0' and r_fee_est_dt < to_char(sysdate,'YYYYMMDD') "+
				"          group by rent_mng_id, rent_l_cd "+
				"        ) d "+
				" where  nvl(a.use_yn,'Y')='Y' and a.car_st<>'2'"+
				"        and a.rent_way_cd='3'"+
				"        and a.bus_id=b.user_id "+
				"        and b.loan_st='2' "+
				"        and b.dept_id <> '0008'"+
				"        and nvl(a.rent_start_dt,to_char(sysdate,'YYYY-MM-DD')) >= '2005-07-01'"+
				"        and a.client_id=c.client_id"+
				"        and a.rent_mng_id=d.rent_mng_id(+) and a.rent_l_cd=d.rent_l_cd(+)"+
				"        and a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"'";

		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
			if(rs.next())
			{				
				bus_id2 = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getBus_id2_Auto]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bus_id2;
		}
    }

	//계약 한건 검색 : cont_view 조회
	public String getBus_id2_Auto(String rent_mng_id, String rent_l_cd, String rent_dt, String est_area)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String bus_id2 = "";
		String query = "";

		query = " select  \n"+
				"        decode(c.cnt,1,c.bus_id2,0,'','999999') bus_id2 \n"+
				" from   cont_n_view a, users b, \n"+
				"        ( select client_id, min(bus_id2) bus_id2, count(*) cnt \n"+
				"          from   ( \n"+
				"                   select aa.client_id, aa.bus_id2 \n"+
				"          			from   cont aa, users bb, cont_etc cc \n"+
				"          			where  nvl(aa.use_yn,'Y')='Y' and aa.car_st in ('1','3') and aa.bus_id2=bb.user_id and bb.loan_st='1' \n"+
				"          				   and aa.client_id = (select client_id from cont where rent_l_cd='"+rent_l_cd+"') \n"+
				"                          and aa.rent_mng_id=cc.rent_mng_id(+) and aa.rent_l_cd=cc.rent_l_cd(+) \n"+
				"          			group by aa.client_id, aa.bus_id2 \n"+
				"                 ) \n"+
				"          group by client_id \n"+
				"        ) c,"+
				"        ( select rent_mng_id, rent_l_cd, sum(fee_s_amt+fee_v_amt) fee_amt "+
				"          from   scd_fee "+
				"          where  rc_yn='0' and r_fee_est_dt < to_char(sysdate,'YYYYMMDD') "+
				"          group by rent_mng_id, rent_l_cd "+
				"        ) d "+
				" where  nvl(a.use_yn,'Y')='Y' and a.car_st in ('1','3')"+
				"        and a.bus_id=b.user_id "+
				"        and nvl(a.rent_start_dt,to_char(sysdate,'YYYY-MM-DD')) >= '2005-07-01'"+
				"        and a.client_id=c.client_id"+
				"        and a.rent_mng_id=d.rent_mng_id(+) and a.rent_l_cd=d.rent_l_cd(+)"+
				"        and a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"'";

		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
			if(rs.next())
			{				
				bus_id2 = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getBus_id2_Auto]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bus_id2;
		}
    }

	//계약 한건 검색 : cont_view 조회
	public String getBus_id2_Auto(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String bus_id2 = "";
		String query = "";

		query = " select  \n"+
				"        decode(c.cnt,1,c.bus_id2,0,'','999999') bus_id2 \n"+
				" from   cont a, users b, \n"+
				"        ( select client_id, min(bus_id2) bus_id2, count(*) cnt \n"+
				"          from   ( \n"+
				"                   select aa.client_id, aa.bus_id2 \n"+
				"          			from   cont aa, users bb \n"+
				"          			where  aa.client_id = (select client_id from cont where rent_mng_id='"+rent_mng_id+"' and rent_l_cd='"+rent_l_cd+"') "+
				"                          and nvl(aa.use_yn,'Y')='Y' and aa.car_st in ('1','3') and aa.bus_id2=bb.user_id and bb.loan_st='1' \n"+
				"          			group by aa.client_id, aa.bus_id2 \n"+
				"                 ) \n"+
				"          group by client_id \n"+
				"        ) c "+
				" where  a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"' "+
				"        and nvl(a.use_yn,'Y')='Y' and a.car_st in ('1','3')"+
				"        and a.bus_id=b.user_id "+
				"        and a.client_id=c.client_id"+
				"        ";

		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
			if(rs.next())
			{				
				bus_id2 = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getBus_id2_Auto]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bus_id2;
		}
    }


	//계약수정 : 결재처리
	public boolean updateContSanction(String m_id, String l_cd, String gubun, String user_id, String sanction)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update cont set ";
		
		if(gubun.equals("sanction_id"))				query += " sanction_id='"+user_id+"', sanction_date=sysdate ";									//결재
		else if(gubun.equals("sanction_cancel"))	query += " sanction_id='', sanction_date='', sanction='', sanction_req='', use_yn='' ";			//결재취소
		else 										query += " sanction_req='"+user_id+"', sanction=to_char(sysdate,'YYYYMMDD')";					//결재요청
		
		query += " where rent_mng_id=? and rent_l_cd=?";


		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);

			if(!user_id.equals("") || !sanction.equals("")){
				pstmt.executeUpdate();
			}
		    pstmt.close();
		    conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContSanction]\n"+e);
			e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 결재취소처리
	public boolean updateContSanctionCancel(String m_id, String l_cd, String gubun, String user_id, String sanction)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update cont set ";
		
		if(gubun.equals("sanction_req_cancel"))		query += " sanction='' ";													//결재요청취소
		else if(gubun.equals("sanction_cancel"))	query += " sanction_id='', sanction_date='', sanction='', use_yn='' ";		//결재취소&결재요청취소

		
		query += " where rent_mng_id=? and rent_l_cd=?";


		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.executeUpdate();
		    pstmt.close();
		    conn.commit();

	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContSanctionCancel]\n"+e);
			e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 과태료청구메모
	public boolean updateFineMM(String m_id, String l_cd, String fine_mm)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;

		String query = " update cont set fine_mm=? where rent_mng_id=? and rent_l_cd=?";

		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, fine_mm);
			pstmt.setString(2, m_id);
			pstmt.setString(3, l_cd);
			pstmt.executeUpdate();
		   	pstmt.close();
		    conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateFineMM]\n"+e);
			e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	public Hashtable getCarOffEmpInfo(String emp_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = " select O.CAR_OFF_NM CAR_OFF_NM, C.NM COM_NM, E.EMP_ID EMP_ID, E.EMP_NM NM, "+
						" E.EMP_M_TEL TEL, E.EMP_POS POS, E.EMP_EMAIL, O.CAR_OFF_TEL O_TEL, O.CAR_OFF_FAX FAX  "+
						" from CAR_OFF_EMP E, CAR_OFF O, CODE C "+
						" where O.CAR_OFF_ID = E.CAR_OFF_ID and "+
							" C.CODE = O.CAR_COMP_ID and "+
							" C.C_ST = '0001' and "+
							" EMP_ID = ?";
		try{	
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, emp_id);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		}catch (SQLException e){
			System.out.println("[ContDatabase:getCarOffEmpInfo]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();			
			return ht;
		}		
	}

    /**
     * 계약출고현황
     * 1: 상호, 2: 차종, 3:출고일, 4:영업담당자, 5:출고지점
     */
    public Vector getDlvStats(String s_kd, String t_wd, String dt, String t_st_dt, String t_end_dt)
    {
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = " select  b.nm AS nm1, c.nm AS nm2, A.rent_l_cd, decode(A.rent_dt, '', '', substr(A.rent_dt, 1, 4)||'-'||substr(A.rent_dt, 5, 2)||'-'||substr(A.rent_dt, 7, 2)) rent_dt, nvl(A.firm_nm, A.client_nm) firm_nm, A.car_no car_no, A.car_nm car_nm, A.car_name car_name, A.car_num,"+
								" decode(A.dlv_dt, '', '', substr(A.dlv_dt, 1, 4)||'-'||substr(A.dlv_dt, 5, 2)||'-'||substr(A.dlv_dt, 7, 2)) dlv_dt,"+
								" decode(A.init_reg_dt, '', '미등록', substr(A.init_reg_dt, 1, 4)||'-'||substr(A.init_reg_dt, 5, 2)||'-'||substr(A.init_reg_dt, 7, 2)) init_reg_dt,"+
								" A.gds_yn gds_yn, a.lpg_yn lpg_yn, B.car_off_nm bus_off, C.car_off_nm dlv_off, B.emp_nm emp_nm, decode(A.one_self,'Y','자체출고','N','영업사원출고') one_self, "+
								" A.car_f_amt, A.car_fs_amt, A.trf_amt, "+
								" decode(A.pur_bus_st,'1','자체영업','2','영업사원영업','3','실적이관','4','에이전트') pur_bus_st, A.dlv_ext "+
						" from"+
						" ("+
							" select C.car_mng_id, C.rent_mng_id, C.rent_l_cd, C.rent_dt, nvl(L.firm_nm, L.client_nm) firm_nm, L.client_nm, R.car_no, M.car_nm, R.init_reg_dt, R.car_num,"+
									" C.dlv_dt, P.gds_yn, E.lpg_yn, M.car_nm||' '||N.car_name car_name, P.one_self, "+
			                        " (E.car_fs_amt+E.car_fv_amt+E.sd_cs_amt+E.sd_cv_amt-E.dc_cs_amt-E.dc_cv_amt) car_f_amt, "+
                                    " (E.car_fs_amt+E.sd_cs_amt-E.dc_cs_amt) car_fs_amt, "+
                                    " (P.trf_amt1+P.trf_amt2+P.trf_amt3+P.trf_amt4+P.con_amt) trf_amt, "+
									" P.pur_bus_st, P.dlv_ext "+

							" from cont C, client L, car_reg R, car_pur P, car_etc E, car_nm N, car_mng M, (select * from cls_cont where cls_st in ('4','5')) S, cls_cont S2, "+
                            "      (select /*+ index(doc_settle DOC_SETTLE_IDX2  ) */ * from doc_settle where doc_st='4' and doc_step='3') d "+
							" where C.client_id = L.client_id and"+
									" C.car_mng_id = R.car_mng_id(+) and"+
								  	" C.rent_mng_id = P.rent_mng_id and"+
								  	" C.rent_l_cd = P.rent_l_cd and"+
								  	" C.rent_mng_id = E.rent_mng_id and"+
								  	" C.rent_l_cd = E.rent_l_cd and"+
								  	" E.car_id = N.car_id and E.car_seq = N.car_seq and N.car_comp_id = M.car_comp_id and N.car_cd = M.code "+
								  	" and C.rent_mng_id=S.rent_mng_id(+) and C.reg_dt=S.reg_dt(+) and S.rent_l_cd is null"+
									" and C.rent_mng_id=S2.rent_mng_id(+) and C.rent_l_cd=S2.rent_l_cd(+) "+
								  	" and C.dlv_dt is not null and nvl(S2.cls_st,'0')<>'7' and C.car_gu ='1' "+	  
								    " and C.rent_l_cd=d.doc_id "+
						" )A,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_nm , C.nm "+
							" from commi M, car_off_emp E, car_off O, (SELECT * FROM CODE WHERE c_st ='0001') c"+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '1' and"+
								  	" E.car_off_id = O.car_off_id  AND o.CAR_COMP_ID = c.code"+
						" )B,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_nm, C.nm "+
							" from commi M, car_off_emp E, car_off O, (SELECT * FROM CODE WHERE c_st ='0001') c "+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '2' and"+
									" E.car_off_id = O.car_off_id  AND o.CAR_COMP_ID = c.code"+
						" )C"+
						" where A.rent_mng_id = B.rent_mng_id(+) and"+
								" A.rent_l_cd = B.rent_l_cd(+) and"+
							 	" A.rent_mng_id = C.rent_mng_id(+) and"+
								" A.rent_l_cd = C.rent_l_cd(+)";
		
		if(s_kd.equals("1"))		query += " and A.firm_nm like '%"+t_wd+"%'";
		else if(s_kd.equals("2"))	query += " and A.car_nm like '%"+t_wd+"%'";
		else if(s_kd.equals("3"))	query += " and A.dlv_dt like '"+t_wd+"%'";
		else if(s_kd.equals("4"))	query += " and B.emp_nm like '%"+t_wd+"%'";
		else if(s_kd.equals("5"))	query += " and C.car_off_nm like '%"+t_wd+"%'";
		else if(s_kd.equals("6"))	query += " and A.dlv_ext like '%"+t_wd+"%'";
		
		if(dt.equals("0"))			query +=" and a.dlv_dt like to_char(sysdate,'YYYYMM')||'%' and A.dlv_dt <= to_char(sysdate,'yyyymmdd') ";
		else if(dt.equals("1"))		query +=" and A.dlv_dt = to_char(sysdate,'YYYYMMDD') ";
		else if(dt.equals("2"))		query +=" and a.dlv_dt like to_char(sysdate,'YYYYMM')||'%' and A.dlv_dt <= to_char(sysdate,'yyyymmdd')  ";
		else if(dt.equals("4"))		query +=" and a.dlv_dt like to_char(add_months(to_date(to_char(sysdate,'YYYYMMDD')), -1), 'yyyymm')||'%'  ";
   
      else if(dt.equals("9"))		query +=" and  a.dlv_dt is not null and  a.car_mng_id is null and a.rent_l_cd not in ( 'S213KK5R00638' ) "; //출고는 되있는데 미등록인 경우 
   
		else if(dt.equals("3")){
			if(!t_st_dt.equals("") && !t_end_dt.equals("")){	
				query +=" and A.dlv_dt between replace(" + t_st_dt + ",'-','') and replace(" + t_end_dt + ",'-','') ";
			}	
		}
		
		
		query += " order by A.dlv_dt, A.init_reg_dt, A.car_mng_id ";


		try
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[ContDatabase:getDlvStats]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
    }

    /**
     * 계약출고현황
     * 1: 상호, 2: 차종, 3:출고일, 4:영업담당자, 5:출고지점
     */
    public Vector getDlvStats(String s_kd, String t_wd, String dt, String t_st_dt, String t_end_dt, String car_off_id)
    {
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = " select  b.nm AS nm1, c.nm AS nm2, A.rent_l_cd, decode(A.rent_dt, '', '', substr(A.rent_dt, 1, 4)||'-'||substr(A.rent_dt, 5, 2)||'-'||substr(A.rent_dt, 7, 2)) rent_dt, nvl(A.firm_nm, A.client_nm) firm_nm, A.car_no car_no, A.car_nm car_nm, A.car_name car_name, A.car_num,"+
								" decode(A.dlv_dt, '', '', substr(A.dlv_dt, 1, 4)||'-'||substr(A.dlv_dt, 5, 2)||'-'||substr(A.dlv_dt, 7, 2)) dlv_dt,"+
								" decode(A.init_reg_dt, '', '미등록', substr(A.init_reg_dt, 1, 4)||'-'||substr(A.init_reg_dt, 5, 2)||'-'||substr(A.init_reg_dt, 7, 2)) init_reg_dt,"+
								" A.gds_yn gds_yn, a.lpg_yn lpg_yn, B.car_off_nm bus_off, C.car_off_nm dlv_off, B.emp_nm emp_nm, decode(A.one_self,'Y','자체출고') one_self, "+
								" A.car_f_amt, A.car_fs_amt, A.trf_amt, A.rpt_no, A.scanfile, A.file_type, A.pur_com_firm, A.pur_com_enp_no, h2.attach_file_type, h2.attach_file_seq "+
						" from"+
						" ("+
							" select C.car_mng_id, C.rent_mng_id, C.rent_l_cd, C.rent_dt, nvl(L.firm_nm, L.client_nm) firm_nm, L.client_nm, R.car_no, M.car_nm, R.init_reg_dt, R.car_num,"+
									" C.dlv_dt, P.gds_yn, E.lpg_yn, M.car_nm||' '||N.car_name car_name, P.one_self, P.rpt_no, "+
			                        " (E.car_fs_amt+E.car_fv_amt+E.sd_cs_amt+E.sd_cv_amt-E.dc_cs_amt-E.dc_cv_amt) car_f_amt, "+
                                    " (E.car_fs_amt+E.sd_cs_amt-E.dc_cs_amt) car_fs_amt, "+
                                    " (P.trf_amt1+P.trf_amt2+P.trf_amt3+P.trf_amt4+P.con_amt) trf_amt, "+
									" CC.scanfile, CC.file_type, P.pur_com_firm, decode(P.pur_com_firm,L.firm_nm,L.enp_no,'') pur_com_enp_no "+

							" from cont C, client L, car_reg R, car_pur P, car_etc E, car_nm N, car_mng M, "+
							"	   (select * from cls_cont where cls_st in ('4','5')) S, cls_cont S2, "+
                            "      (select /*+ index(doc_settle DOC_SETTLE_IDX2  ) */ * from doc_settle where doc_st='4' and doc_step='3') d, "+
							"	   (select * from car_change where cha_seq='1') CC "+
							" where C.client_id = L.client_id and"+
									" C.car_mng_id = R.car_mng_id(+) and"+
								  	" C.rent_mng_id = P.rent_mng_id and"+
								  	" C.rent_l_cd = P.rent_l_cd and "+ //P.dlv_brch in ('특판팀','법인판촉팀') and 
								  	" C.rent_mng_id = E.rent_mng_id and"+
								  	" C.rent_l_cd = E.rent_l_cd and"+
								  	" E.car_id = N.car_id and E.car_seq = N.car_seq and N.car_comp_id = M.car_comp_id and N.car_cd = M.code "+
								  	" and C.rent_mng_id=S.rent_mng_id(+) and C.reg_dt=S.reg_dt(+) and S.rent_l_cd is null"+
									" and C.rent_mng_id=S2.rent_mng_id(+) and C.rent_l_cd=S2.rent_l_cd(+) "+
								  	" and C.dlv_dt is not null and nvl(S2.cls_st,'0')<>'7' and C.car_gu ='1' "+	  
								    " and C.rent_l_cd=d.doc_id "+
									" and R.car_mng_id=CC.car_mng_id(+) "+
						" )A,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_id, O.car_off_nm, O.car_comp_id, C.nm "+
							" from commi M, car_off_emp E, car_off O, (SELECT * FROM CODE WHERE c_st ='0001') c"+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '1' and"+
								  	" E.car_off_id = O.car_off_id  AND o.CAR_COMP_ID = c.code"+
						" )B,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_id, O.car_off_nm, O.car_comp_id, C.nm "+
							" from commi M, car_off_emp E, car_off O, (SELECT * FROM CODE WHERE c_st ='0001') c "+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '2' and"+
									" E.car_off_id = O.car_off_id  AND o.CAR_COMP_ID = c.code and O.car_off_id in ('03900','00998','01129','03579','03954','04500','03548','02176','00588','00631','00623')"+	// 20190624(현대한강)
						" )C,"+
						//사진
						" (select SUBSTR(content_seq,1,6) car_mng_id, count(0) file_cnt, max(file_type) attach_file_type, max(seq) attach_file_seq, TO_CHAR(MAX(reg_date),'YYYYMMDD') file_reg_dt from ACAR_ATTACH_FILE where ISDELETED = 'N' and content_code='CAR_CHANGE' group by SUBSTR(content_seq,1,6)) h2 "+

						" where A.rent_mng_id = B.rent_mng_id(+) and"+
								" A.rent_l_cd = B.rent_l_cd(+) and"+
							 	" A.rent_mng_id = C.rent_mng_id(+) and"+
								" A.rent_l_cd = C.rent_l_cd"+
								" and A.car_mng_id=h2.car_mng_id(+) ";
		
		if(!car_off_id.equals(""))  query += " and C.car_off_id='"+car_off_id+"'";

		if(!t_wd.equals("")){
			if(s_kd.equals("1"))		query += " and A.firm_nm like '%"+t_wd+"%'";
			else if(s_kd.equals("2"))	query += " and A.car_nm like '%"+t_wd+"%'";
			else if(s_kd.equals("3"))	query += " and A.dlv_dt like '"+t_wd+"%'";
			else if(s_kd.equals("4"))	query += " and B.emp_nm like '%"+t_wd+"%'";
			else if(s_kd.equals("5"))	query += " and C.car_off_nm like '%"+t_wd+"%'";
		}

		if(dt.equals("0"))			query +=" and A.dlv_dt like to_char(sysdate,'YYYYMM')||'%' and A.dlv_dt <= to_char(sysdate,'yyyymmdd') ";
		else if(dt.equals("1"))		query +=" and A.dlv_dt = to_char(sysdate,'YYYYMMDD') ";
		else if(dt.equals("2"))		query +=" and A.dlv_dt like to_char(sysdate,'YYYYMM')||'%' and A.dlv_dt <= to_char(sysdate,'yyyymmdd')  ";
		else if(dt.equals("3"))		query +=" and A.dlv_dt between replace(" + t_st_dt + ",'-','') and replace(" + t_end_dt + ",'-','') ";
		
		
		query += " order by A.dlv_dt, A.init_reg_dt, A.car_mng_id ";


		try
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}

			rs.close();
			pstmt.close();

		} catch (SQLException e) {
			System.out.println("[ContDatabase:getDlvStats(String s_kd, String t_wd, String dt, String t_st_dt, String t_end_dt, String car_comp_id)]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
    }

    /**
     * 계약출고현황
     * 1: 상호, 2: 차종, 3:출고일, 4:영업담당자, 5:출고지점
     */
    public Vector getDlvDtNullStats(String s_kd, String t_wd, String dt, String t_st_dt, String t_end_dt)
    {
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = " select   A.rent_mng_id, A.rent_l_cd, decode(A.rent_dt, '', '', substr(A.rent_dt, 1, 4)||'-'||substr(A.rent_dt, 5, 2)||'-'||substr(A.rent_dt, 7, 2)) rent_dt, nvl(A.firm_nm, A.client_nm) firm_nm, A.car_no car_no, A.car_nm car_nm, A.car_name car_name, A.car_num,"+
								" decode(A.dlv_dt, '', '', substr(A.dlv_dt, 1, 4)||'-'||substr(A.dlv_dt, 5, 2)||'-'||substr(A.dlv_dt, 7, 2)) dlv_dt,"+
								" decode(A.init_reg_dt, '', '미등록', substr(A.init_reg_dt, 1, 4)||'-'||substr(A.init_reg_dt, 5, 2)||'-'||substr(A.init_reg_dt, 7, 2)) init_reg_dt,"+
								" A.gds_yn gds_yn, a.lpg_yn lpg_yn, B.car_off_nm bus_off, C.car_off_nm dlv_off, B.emp_nm emp_nm"+
						" from"+
						" ("+
							" select C.rent_mng_id, C.rent_l_cd, C.rent_dt, nvl(L.firm_nm, L.client_nm) firm_nm, L.client_nm, R.car_no, M.car_nm, R.init_reg_dt, R.car_num,"+
									" C.dlv_dt, P.gds_yn, E.lpg_yn, M.car_nm||' '||N.car_name car_name"+
							" from cont C, client L, car_reg R, car_pur P, car_etc E, car_nm N, car_mng M "+
							" where C.client_id = L.client_id and"+
									" C.car_mng_id = R.car_mng_id(+) and"+
								  	" C.rent_mng_id = P.rent_mng_id and"+
								  	" C.rent_l_cd = P.rent_l_cd and"+
								  	" C.rent_mng_id = E.rent_mng_id and"+
								  	" C.rent_l_cd = E.rent_l_cd and"+
								  	" E.car_id = N.car_id and E.car_seq = N.car_seq and N.car_comp_id = M.car_comp_id and N.car_cd = M.code "+
								  	" and C.dlv_dt is null and R.init_reg_dt is not null and C.use_yn='Y' and C.car_gu='1'"+	  
						" )A,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_nm"+
							" from commi M, car_off_emp E, car_off O"+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '1' and"+
								  	" E.car_off_id = O.car_off_id  "+
						" )B,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_nm"+
							" from commi M, car_off_emp E, car_off O"+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '2' and"+
									" E.car_off_id = O.car_off_id  "+
						" )C"+
						" where A.rent_mng_id = B.rent_mng_id(+) and"+
								" A.rent_l_cd = B.rent_l_cd(+) and"+
							 	" A.rent_mng_id = C.rent_mng_id(+) and"+
								" A.rent_l_cd = C.rent_l_cd(+)";
		
		if(s_kd.equals("1"))		query += " and nvl(A.firm_nm, ' ') like '%"+t_wd+"%'";
		else if(s_kd.equals("2"))	query += " and nvl(A.car_nm, ' ') like '%"+t_wd+"%'";
		else if(s_kd.equals("3"))	query += " and A.dlv_dt like '"+t_wd+"%'";
		else if(s_kd.equals("4"))	query += " and nvl(B.emp_nm, ' ') like '%"+t_wd+"%'";
		else if(s_kd.equals("5"))	query += " and nvl(C.car_off_nm, ' ') like '%"+t_wd+"%'";
		
		
		query += " order by A.init_reg_dt desc ";
		
		try
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[ContDatabase:getDlvDtNullStats]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
    }

	/**
	 *	차량관리자 update(한 업체관련 계약 공통 차량관리자)
	 */
	public boolean updateCarMgrAll(String c_id, CarMgrBean mgr)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean flag = true;
		String query = "select rent_mng_id, rent_l_cd from cont where client_id = ?";

		try 
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, c_id);
		    rs = pstmt.executeQuery();
		    
		    while(rs.next())
		    {
		    	mgr.setRent_mng_id(rs.getString("RENT_MNG_ID"));	
		    	mgr.setRent_l_cd(rs.getString("RENT_L_CD"));
				updateCarMgrAll_IN(mgr);
		    }
			rs.close();
			pstmt.close();
		    
	  	} catch (Exception e) {
	  		System.out.println("[ContDatabase:updateCarMgrAll]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
		} finally {
			try{
                if(rs != null ) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	/**
	 *	차량관리자 update ---> 내부 LOOP(한 업체관련 계약 공통 차량관리자)
	 */
	public boolean updateCarMgrAll_IN(CarMgrBean mgr)
	{
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_MGR set "+
							" MGR_ST = rtrim(?), "+
							" MGR_NM = ?, "+
							" MGR_DEPT = ?, "+
							" MGR_TITLE = ?, "+
							" MGR_TEL = ?, "+
							" MGR_M_TEL = ?, "+
							" MGR_EMAIL = ? "+
							" where RENT_MNG_ID = ? and RENT_L_CD = ? and MGR_ID = ? ";		
		try 
		{
				conn.setAutoCommit(false);
				
				pstmt = conn.prepareStatement(query);
				pstmt.setString(1, mgr.getMgr_st());
				pstmt.setString(2, mgr.getMgr_nm());
				pstmt.setString(3, mgr.getMgr_dept());
				pstmt.setString(4, mgr.getMgr_title());
				pstmt.setString(5, mgr.getMgr_tel());
				pstmt.setString(6, mgr.getMgr_m_tel());
				pstmt.setString(7, mgr.getMgr_email());
			    pstmt.setString(8, mgr.getRent_mng_id());
				pstmt.setString(9, mgr.getRent_l_cd());
				pstmt.setString(10,mgr.getMgr_id());
			    pstmt.executeUpdate();
			    pstmt.close();
			     conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[ContDatabase:updateCarMgrAll_IN]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			return flag;
		}
	}	

	/** 계약수정 : 대여사항 조회 (fee)
	 *	대여료 Bean 세팅
	 *  gubun - 1: 신규대여료, 2: 연장대여료
	 */
	public ContFeeBean getContFee2(String mng_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContFeeBean fee = new ContFeeBean();
		String query = "";
		if(rent_st.equals("")) rent_st = "1";

		query = " select"+
				" RENT_MNG_ID, RENT_L_CD, RENT_ST, RENT_WAY, CAR_ST, CON_MON,"+
				" PRV_DLV_YN, PRV_CAR_MNG_ID,"+
				" decode(RENT_DT, '', '', substr(RENT_DT, 1, 4) || '-' || substr(RENT_DT, 5, 2) || '-'||substr(RENT_DT, 7, 2)) RENT_DT,"+
				" decode(RENT_START_DT, '', '', substr(RENT_START_DT, 1, 4) || '-' || substr(RENT_START_DT, 5, 2) || '-'||substr(RENT_START_DT, 7, 2)) RENT_START_DT,"+
				" decode(RENT_END_DT, '', '', substr(RENT_END_DT, 1, 4) || '-' || substr(RENT_END_DT, 5, 2) || '-'||substr(RENT_END_DT, 7, 2)) RENT_END_DT,"+
				" decode(PRV_START_DT, '', '', substr(PRV_START_DT, 1, 4) || '-' || substr(PRV_START_DT, 5, 2) || '-'||substr(PRV_START_DT, 7, 2)) PRV_START_DT,"+
				" decode(PRV_END_DT, '', '', substr(PRV_END_DT, 1, 4) || '-' || substr(PRV_END_DT, 5, 2) || '-'||substr(PRV_END_DT, 7, 2)) PRV_END_DT,"+
				" GRT_AMT_S, GRT_ETC,"+
				" decode(GRT_EST_DT, '', '', substr(GRT_EST_DT, 1, 4) || '-' || substr(GRT_EST_DT, 5, 2) || '-'||substr(GRT_EST_DT, 7, 2)) GRT_EST_DT,"+
				" PP_S_AMT, PP_V_AMT, PP_ETC,"+
				" decode(PP_EST_DT, '', '', substr(PP_EST_DT, 1, 4) || '-' || substr(PP_EST_DT, 5, 2) || '-'||substr(PP_EST_DT, 7, 2)) PP_EST_DT,"+
				" IFEE_S_AMT, IFEE_V_AMT, IFEE_ETC,"+
				" decode(IFEE_EST_DT, '', '', substr(IFEE_EST_DT, 1, 4) || '-' || substr(IFEE_EST_DT, 5, 2) || '-'||substr(IFEE_EST_DT, 7, 2)) IFEE_EST_DT,"+
				" INV_S_AMT, INV_V_AMT, INV_ETC, OPT_S_AMT, OPT_V_AMT, OPT_YN, OPT_ETC,"+
				" FEE_S_AMT, FEE_V_AMT, FEE_ETC, FEE_ST, FEE_REQ_DAY, FEE_EST_DAY, FEE_BANK, FEE_PAY_ST,"+
				" rtrim(FEE_PAY_TM) FEE_PAY_TM, FEE_FST_AMT, FEE_CDT, EXT_AGNT,"+
				" decode(FEE_PAY_START_DT, '', '', substr(FEE_PAY_START_DT, 1, 4) || '-' || substr(FEE_PAY_START_DT, 5, 2) || '-'||substr(FEE_PAY_START_DT, 7, 2)) FEE_PAY_START_DT,"+
				" decode(FEE_PAY_END_DT, '', '', substr(FEE_PAY_END_DT, 1, 4) || '-' || substr(FEE_PAY_END_DT, 5, 2) || '-'||substr(FEE_PAY_END_DT, 7, 2)) FEE_PAY_END_DT,"+
				" decode(FEE_FST_DT, '', '', substr(FEE_FST_DT, 1, 4) || '-' || substr(FEE_FST_DT, 5, 2) || '-'||substr(FEE_FST_DT, 7, 2)) FEE_FST_DT,"+
				" BR_ID, rtrim(RC_DAY) rc_day, NEXT_YN, OPT_CHK, FEE_SH, PRV_MON_YN, FEE_CHK, OPT_PER, GRT_SUC_YN, IFEE_SUC_YN, leave_day, cls_per,"+
				" decode(grt_amt_s, 0,'',decode(grt_pay_amt, 0,'0',decode(grt_amt_s,            grt_pay_amt, '2','1'))) grt_pay_yn,"+
				" decode(ifee_s_amt,0,'',decode(ifee_pay_amt,0,'0',decode(ifee_s_amt+ifee_v_amt,ifee_pay_amt,'2','1'))) ifee_pay_yn,"+
				" decode(pp_s_amt,  0,'',decode(pp_pay_amt,  0,'0',decode(pp_s_amt+pp_v_amt,    pp_pay_amt,  '2','1'))) pp_pay_yn"+
				" from"+
				"	(select"+
				"	   a.*, b.grt_pay_amt, b.pp_pay_amt, b.ifee_pay_amt"+
				"	   from fee a,"+
				"	   (select rent_mng_id, rent_l_cd, rent_st,"+
				"			sum(decode(ext_st,'0',ext_pay_amt,0)) grt_pay_amt,"+
				"			sum(decode(ext_st,'1',ext_pay_amt,0)) pp_pay_amt,"+
				"			sum(decode(ext_st,'2',ext_pay_amt,0)) ifee_pay_amt"+
				"			from scd_ext where ext_st in ('0','1','2') group by rent_mng_id, rent_l_cd, rent_st) b"+
				"	   where a.rent_mng_id=b.rent_mng_id(+) and a.rent_l_cd=b.rent_l_cd(+)"+
				"	 ) "+
				" where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ?";
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_st);
	    	rs = pstmt.executeQuery();    	
			while(rs.next())
			{
				fee.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				fee.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				fee.setRent_st(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				fee.setRent_way(rs.getString("RENT_WAY")==null?"":rs.getString("RENT_WAY"));
				fee.setCar_st(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				fee.setCon_mon(rs.getString("CON_MON")==null?"":rs.getString("CON_MON"));
				fee.setRent_dt(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT"));
				fee.setRent_start_dt(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				fee.setRent_end_dt(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				fee.setPrv_dlv_yn(rs.getString("PRV_DLV_YN")==null?"":rs.getString("PRV_DLV_YN"));
				fee.setPrv_car_mng_id(rs.getString("PRV_CAR_MNG_ID")==null?"":rs.getString("PRV_CAR_MNG_ID"));
				fee.setPrv_start_dt(rs.getString("PRV_START_DT")==null?"":rs.getString("PRV_START_DT"));
				fee.setPrv_end_dt(rs.getString("PRV_END_DT")==null?"":rs.getString("PRV_END_DT"));
				fee.setGrt_amt_s(rs.getString("GRT_AMT_S")==null?0:Integer.parseInt(rs.getString("GRT_AMT_S")));
				fee.setGrt_etc(rs.getString("GRT_ETC")==null?"":rs.getString("GRT_ETC"));
				fee.setGrt_est_dt(rs.getString("GRT_EST_DT")==null?"":rs.getString("GRT_EST_DT"));
				fee.setGrt_pay_yn(rs.getString("GRT_PAY_YN")==null?"":rs.getString("GRT_PAY_YN"));
				fee.setPp_s_amt(rs.getString("PP_S_AMT")==null?0:Integer.parseInt(rs.getString("PP_S_AMT")));
				fee.setPp_v_amt(rs.getString("PP_V_AMT")==null?0:Integer.parseInt(rs.getString("PP_V_AMT")));
				fee.setPp_etc(rs.getString("PP_ETC")==null?"":rs.getString("PP_ETC"));
				fee.setPp_est_dt(rs.getString("PP_EST_DT")==null?"":rs.getString("PP_EST_DT"));
				fee.setPp_pay_yn(rs.getString("PP_PAY_YN")==null?"":rs.getString("PP_PAY_YN"));
				fee.setIfee_s_amt(rs.getString("IFEE_S_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_S_AMT")));
				fee.setIfee_v_amt(rs.getString("IFEE_V_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_V_AMT")));
				fee.setIfee_etc(rs.getString("IFEE_ETC")==null?"":rs.getString("IFEE_ETC"));
				fee.setIfee_est_dt(rs.getString("IFEE_EST_DT")==null?"":rs.getString("IFEE_EST_DT"));
				fee.setIfee_pay_yn(rs.getString("IFEE_PAY_YN")==null?"":rs.getString("IFEE_PAY_YN"));
				fee.setInv_s_amt(rs.getString("INV_S_AMT")==null?0:Integer.parseInt(rs.getString("INV_S_AMT")));
				fee.setInv_v_amt(rs.getString("INV_V_AMT")==null?0:Integer.parseInt(rs.getString("INV_V_AMT")));
				fee.setInv_etc(rs.getString("INV_ETC")==null?"":rs.getString("INV_ETC"));
				fee.setOpt_s_amt(rs.getString("OPT_S_AMT")==null?0:Integer.parseInt(rs.getString("OPT_S_AMT")));
				fee.setOpt_v_amt(rs.getString("OPT_V_AMT")==null?0:Integer.parseInt(rs.getString("OPT_V_AMT")));
				fee.setOpt_etc(rs.getString("OPT_ETC")==null?"":rs.getString("OPT_ETC"));
				fee.setOpt_yn(rs.getString("OPT_YN")==null?"":rs.getString("OPT_YN"));
				fee.setFee_s_amt(rs.getString("FEE_S_AMT")==null?0:Integer.parseInt(rs.getString("FEE_S_AMT")));
				fee.setFee_v_amt(rs.getString("FEE_V_AMT")==null?0:Integer.parseInt(rs.getString("FEE_V_AMT")));
				fee.setFee_etc(rs.getString("FEE_ETC")==null?"":rs.getString("FEE_ETC"));
				fee.setFee_st(rs.getString("FEE_ST")==null?"":rs.getString("FEE_ST"));
				fee.setFee_req_day(rs.getString("FEE_REQ_DAY")==null?"":rs.getString("FEE_REQ_DAY"));
				fee.setFee_est_day(rs.getString("FEE_EST_DAY")==null?"":rs.getString("FEE_EST_DAY"));
				fee.setFee_bank(rs.getString("FEE_BANK")==null?"":rs.getString("FEE_BANK"));
				fee.setFee_pay_st(rs.getString("FEE_PAY_ST")==null?"":rs.getString("FEE_PAY_ST"));
				fee.setFee_pay_tm(rs.getString("FEE_PAY_TM")==null?"":rs.getString("FEE_PAY_TM"));
				fee.setFee_pay_start_dt(rs.getString("FEE_PAY_START_DT")==null?"":rs.getString("FEE_PAY_START_DT"));
				fee.setFee_pay_end_dt(rs.getString("FEE_PAY_END_DT")==null?"":rs.getString("FEE_PAY_END_DT"));
				fee.setFee_fst_dt(rs.getString("FEE_FST_DT")==null?"":rs.getString("FEE_FST_DT"));
				fee.setFee_fst_amt(rs.getString("FEE_FST_AMT")==null?0:Integer.parseInt(rs.getString("FEE_FST_AMT")));
				fee.setFee_cdt(rs.getString("FEE_CDT")==null?"":rs.getString("FEE_CDT"));
				fee.setExt_agnt(rs.getString("EXT_AGNT")==null?"":rs.getString("EXT_AGNT"));
				fee.setBr_id(rs.getString("BR_ID")==null?"":rs.getString("BR_ID"));
				fee.setRc_day(rs.getString("RC_DAY")==null?"":rs.getString("RC_DAY"));
				fee.setNext_yn(rs.getString("NEXT_YN")==null?"":rs.getString("NEXT_YN"));
				fee.setOpt_chk(rs.getString("OPT_CHK")==null?"":rs.getString("OPT_CHK"));
				fee.setFee_sh(rs.getString("FEE_SH")==null?"":rs.getString("FEE_SH"));
				fee.setPrv_mon_yn(rs.getString("PRV_MON_YN")==null?"":rs.getString("PRV_MON_YN"));
				fee.setFee_chk(rs.getString("FEE_CHK")==null?"":rs.getString("FEE_CHK"));
				fee.setOpt_per(rs.getString("OPT_PER")==null?"":rs.getString("OPT_PER"));
				fee.setGrt_suc_yn(rs.getString("GRT_SUC_YN")==null?"":rs.getString("GRT_SUC_YN"));
				fee.setIfee_suc_yn(rs.getString("IFEE_SUC_YN")==null?"":rs.getString("IFEE_SUC_YN"));
				fee.setLeave_day(rs.getString("leave_day")==null?"":rs.getString("leave_day"));
				fee.setCls_per(rs.getString("cls_per")==null?"":rs.getString("cls_per"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFee2]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee;
		}
	}


	//20071013 업그레이드------------------------------------------------------------------------------------------
	

	//계약 등록 : cont 정보 처음 등록시 insert (cont) : 20070710
	public ContBaseBean insertContBaseNew(ContBaseBean base)
	{
		getConnection();
		PreparedStatement pstmt = null;

		//계약관리번호 생성 (신규계약)
		if (base.getRent_mng_id().equals(""))
		{	
			base.setRent_mng_id(getNextRent_mng_id());  
		}
		
		/* 계약번호 생성 2 (재계약)
		 * 8자인 경우 계약코드생성 method를 이용해 계약코드를 자동부여한다...
		 * <-- 생성1이 아니고 생성1의 조건이 안 맞을 경우 - 재계약시 계약번호 생성		*/
		if (base.getRent_l_cd().length() == 8)
		{
			base.setRent_l_cd(getNextRent_l_cd(base.getRent_l_cd().trim()));
		}

		String query = " insert into CONT "+
						"(RENT_MNG_ID,	RENT_L_CD,	CLIENT_ID,	CAR_MNG_ID, RENT_ST, "+
						" BUS_ST,		RENT_DT,	DLV_DT,		BUS_ID,		BRCH_ID, "+
						" NOTE,			MNG_ID,		REG_DT,		REG_ID,		CAR_ST, "+
						" R_SITE,		P_ZIP,		P_ADDR,		O_MAP,		USE_YN, "+
						" R_SITE_ZIP,	R_SITE_ADDR,DRIVING_EXT,DRIVING_AGE,LOAN_EXT, "+
						" OTHERS, BUS_ID2, RENT_START_DT, CAR_JA, SCAN_FILE, DEPT_ID, "+
						" UPDATE_ID, UPDATE_DT, RENT_END_DT, GCP_KD, BACDT_KD, SPR_KD, TAX_AGNT, TAX_TYPE,"+
						" CAR_GU, BUS_ID3, REG_STEP, MNG_ID2, agent_emp_id, sanction_type, reject_car) values "+
						"(?, ?, ?, ?, ?, "+
						" ?, replace (?, '-', ''), replace (?, '-', ''), ?, ?, "+
						" ?, ?, to_char(sysdate,'YYYYMMDD'), ?, ?,  "+
						" ?, ?, ?, ?, ?, "+
						" ?, ?, ?, ?, ?, "+
						" ?, ?, replace (?, '-', ''), ?, ?, ?, ?, to_char(sysdate,'YYYYMMDD'),replace (?, '-', ''),?,?,?, ?,?,"+
						" ?, ?, ?, ?, ?, ?, ? )";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1, base.getRent_mng_id());
			pstmt.setString(2, base.getRent_l_cd());
			pstmt.setString(3, base.getClient_id());
			pstmt.setString(4, base.getCar_mng_id());
			pstmt.setString(5, base.getRent_st());			
			pstmt.setString(6, base.getBus_st());			
			pstmt.setString(7, base.getRent_dt());
			pstmt.setString(8, base.getDlv_dt());
			pstmt.setString(9, base.getBus_id());
			pstmt.setString(10, base.getBrch_id());			
			pstmt.setString(11, base.getNote());
			pstmt.setString(12, base.getMng_id());
			pstmt.setString(13, base.getReg_id());
			pstmt.setString(14, base.getCar_st());			
			pstmt.setString(15, base.getR_site());			
			pstmt.setString(16, base.getP_zip());
			pstmt.setString(17, base.getP_addr());
			pstmt.setString(18, base.getO_map());
			pstmt.setString(19, base.getUse_yn());
			pstmt.setString(20, base.getR_site_zip());
			pstmt.setString(21, base.getR_site_addr());			
			pstmt.setString(22, base.getDriving_ext());
			pstmt.setString(23, base.getDriving_age());
			pstmt.setString(24, base.getLoan_ext());
			pstmt.setString(25, base.getOthers());						
			pstmt.setString(26, base.getBus_id2());						
			pstmt.setString(27, base.getRent_start_dt());						
			pstmt.setInt   (28, base.getCar_ja());						
			pstmt.setString(29, base.getScan_file());						
			pstmt.setString(30, base.getDept_id());						
			pstmt.setString(31, base.getUpdate_id());						
			pstmt.setString(32, base.getRent_end_dt());						
			pstmt.setString(33, base.getGcp_kd());
			pstmt.setString(34, base.getBacdt_kd());
			pstmt.setString(35, base.getSpr_kd());
			pstmt.setString(36, base.getTax_agnt());
			pstmt.setString(37, base.getTax_type());
			pstmt.setString(38, base.getCar_gu());
			pstmt.setString(39, base.getBus_id3());						
			pstmt.setString(40, base.getReg_step());					
			pstmt.setString(41, base.getMng_id2());									
			pstmt.setString(42, base.getAgent_emp_id());									
			pstmt.setString(43, base.getSanction_type());									
			pstmt.setString(44, base.getReject_car());
			
		    pstmt.executeUpdate();
			pstmt.close();
			
			conn.commit();
	  	} catch (Exception e) {
		  	System.out.println("[AddContDatabase:insertContBaseNew]\n"+e);
	  		e.printStackTrace();
	  		base = null;
			conn.rollback();
			base.setRent_mng_id("");
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//계약등록 : 계약기타 (cont_etc)
	public boolean insertContEtc(ContEtcBean etc)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into CONT_ETC "+
						" (RENT_MNG_ID, RENT_L_CD, MNG_BR_ID, BUS_AGNT_ID, rec_st, ele_tax_st, tax_extra, sanction_st,"+
						"  guar_st, guar_con, guar_sac_id, dec_gr, dec_f_id, dec_f_dt, dec_l_id, dec_l_dt,"+
						"  insur_per, canoisr_yn, cacdt_yn, eme_yn, ja_reason, rea_appr_id, air_ds_yn, air_as_yn, air_cu_yn,"+
						"  auto_yn, abs_yn, rob_yn, sp_car_yn, ac_dae_yn, pro_yn, cyc_yn, main_yn, ma_dae_yn,"+
						"  ip_insur, ip_agent, ip_dam, ip_tel, fin_seq, assest_seq, client_guar_st, dec_etc, guar_est_dt, guar_etc, guar_end_st, rent_suc_commi, rent_suc_dt, "+
						"  grt_suc_m_id, grt_suc_l_cd, grt_suc_c_no, grt_suc_o_amt, grt_suc_r_amt, car_deli_dt, rent_suc_grt_yn, "+
						"  rent_suc_m_id, rent_suc_l_cd, rent_suc_fee_tm, est_area, "+
						"  cacdt_me_amt, cacdt_memin_amt, cacdt_mebase_amt, rent_suc_commi_pay_st, rent_suc_fee_tm_b_dt, county, suc_rent_st, blackbox_yn, rent_suc_exem_cau, rent_suc_exem_id, "+
						"  insurant, rent_suc_route, rent_suc_dist, com_emp_yn, lkas_yn, ldws_yn, aeb_yn, fcw_yn, ev_yn, dlv_con_commi_yn, car_use_addr, cls_etc, dir_pur_commi_yn, view_car_dc, "+
						"  others_device, garnish_yn, hook_yn, legal_yn, car_deli_est_dt, "+  
						"  rent_suc_pp_yn, pp_suc_o_amt, pp_suc_r_amt, rent_suc_ifee_yn, ifee_suc_o_amt, ifee_suc_r_amt, n_mon, n_day, top_cng_yn "+
						"  ) values "+
						" ( ?, ?, ?, ?, ?,   ?, ?, ?, ?, ?,"+
						"   ?, ?, ?, ?, ?,   ?, ?, ?, ?, ?,"+
						"   ?, ?, ?, ?, ?,   ?, ?, ?, ?, ?,"+
						"   ?, ?, ?, ?, ?,   ?, ?, ?, ?, ?,"+
						"   ?, ?, replace(?,'-',''), ?, ?, ?, replace(?,'-',''),"+
						"   ?, ?, ?, ?, ?, replace(?,'-',''), ?, "+
						"   ?, ?, ?, ?,  "+
						"   ?, ?, ?, ?, replace(?,'-',''), ?, ?, ?, ?, "+
						"   ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "+
						"   ?, ?, ?, ?, replace(?,'-',''), "+
						"   ?, ?, ?, ?, ?, ?, ?, ?, ? "+
						"   )";

		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1 , etc.getRent_mng_id			());
			pstmt.setString(2 , etc.getRent_l_cd			());
			pstmt.setString(3 , etc.getMng_br_id			());
			pstmt.setString(4 , etc.getBus_agnt_id			());
			pstmt.setString(5,  etc.getRec_st				());
			pstmt.setString(6,  etc.getEle_tax_st			());
			pstmt.setString(7,  etc.getTax_extra			());
			pstmt.setString(8,  etc.getSanction_st			());

			pstmt.setString(9,  etc.getGuar_st				());
			pstmt.setString(10, etc.getGuar_con				());
			pstmt.setString(11, etc.getGuar_sac_id			());
			pstmt.setString(12, etc.getDec_gr				());
			pstmt.setString(13, etc.getDec_f_id				());
			pstmt.setString(14, etc.getDec_f_dt				());
			pstmt.setString(15, etc.getDec_l_id				());
			pstmt.setString(16, etc.getDec_l_dt				());

			pstmt.setString(17, etc.getInsur_per			());
			pstmt.setString(18, etc.getCanoisr_yn			());
			pstmt.setString(19, etc.getCacdt_yn				());
			pstmt.setString(20, etc.getEme_yn				());
			pstmt.setString(21, etc.getJa_reason			());
			pstmt.setString(22, etc.getRea_appr_id			());
			pstmt.setString(23, etc.getAir_ds_yn			());
			pstmt.setString(24, etc.getAir_as_yn			());
			pstmt.setString(25, etc.getAir_cu_yn			());

			pstmt.setString(26, etc.getAuto_yn				());
			pstmt.setString(27, etc.getAbs_yn				());
			pstmt.setString(28, etc.getRob_yn				());
			pstmt.setString(29, etc.getSp_car_yn			());
			pstmt.setString(30, etc.getAc_dae_yn			());
			pstmt.setString(31, etc.getPro_yn				());
			pstmt.setString(32, etc.getCyc_yn				());
			pstmt.setString(33, etc.getMain_yn				());
			pstmt.setString(34, etc.getMa_dae_yn			());
			pstmt.setString(35, etc.getIp_insur				());
			pstmt.setString(36, etc.getIp_agent				());
			pstmt.setString(37, etc.getIp_dam				());
			pstmt.setString(38, etc.getIp_tel				());
			pstmt.setString(39, etc.getFin_seq				());
			pstmt.setString(40, etc.getAssest_seq			());
			pstmt.setString(41, etc.getClient_guar_st		());
			pstmt.setString(42, etc.getDec_etc				());
			pstmt.setString(43, etc.getGuar_est_dt			());
			pstmt.setString(44, etc.getGuar_etc				());
			pstmt.setString(45, etc.getGuar_end_st			());
			pstmt.setInt   (46, etc.getRent_suc_commi		());
			pstmt.setString(47, etc.getRent_suc_dt			());

			pstmt.setString(48, etc.getGrt_suc_m_id			());
			pstmt.setString(49, etc.getGrt_suc_l_cd			());
			pstmt.setString(50, etc.getGrt_suc_c_no			());
			pstmt.setInt   (51, etc.getGrt_suc_o_amt		());
			pstmt.setInt   (52, etc.getGrt_suc_r_amt		());
			pstmt.setString(53, etc.getCar_deli_dt			());
			pstmt.setString(54, etc.getRent_suc_grt_yn		());
			pstmt.setString(55, etc.getRent_suc_m_id		());
			pstmt.setString(56, etc.getRent_suc_l_cd		());
			pstmt.setString(57, etc.getRent_suc_fee_tm		());
			pstmt.setString(58, etc.getEst_area				());
			pstmt.setInt   (59, etc.getCacdt_me_amt			());
			pstmt.setInt   (60, etc.getCacdt_memin_amt		());
			pstmt.setInt   (61, etc.getCacdt_mebase_amt		());
			pstmt.setString(62, etc.getRent_suc_commi_pay_st());
			pstmt.setString(63, etc.getRent_suc_fee_tm_b_dt	());
			pstmt.setString(64, etc.getCounty				());
			pstmt.setString(65, etc.getSuc_rent_st			());
			pstmt.setString(66, etc.getBlackbox_yn			());
			pstmt.setString(67, etc.getRent_suc_exem_cau	());
			pstmt.setString(68, etc.getRent_suc_exem_id		());
			pstmt.setString(69, etc.getInsurant				());
			pstmt.setString(70, etc.getRent_suc_route		());
			pstmt.setInt     (71, etc.getRent_suc_dist		());
			pstmt.setString(72, etc.getCom_emp_yn			());
			pstmt.setString(73, etc.getLkas_yn				());
			pstmt.setString(74, etc.getLdws_yn				());
			pstmt.setString(75, etc.getAeb_yn				());
			pstmt.setString(76, etc.getFcw_yn				());
			pstmt.setString(77, etc.getEv_yn				());
			pstmt.setString(78, etc.getDlv_con_commi_yn		());
			pstmt.setString(79, etc.getCar_use_addr			());	//차량이용지 주소 추가(2018.03.09)
			pstmt.setString(80, etc.getCls_etc				());
			pstmt.setString(81, etc.getDir_pur_commi_yn		());
			pstmt.setInt   (82, etc.getView_car_dc			());	//20190911
			pstmt.setString(83, etc.getOthers_device		());
			pstmt.setString(84, etc.getGarnish_yn			());
			pstmt.setString(85, etc.getHook_yn				());
			pstmt.setString(86, etc.getLegal_yn				());
			pstmt.setString(87, etc.getCar_deli_est_dt		());
			pstmt.setString(88, etc.getRent_suc_pp_yn		());
			pstmt.setInt   (89, etc.getPp_suc_o_amt			());
			pstmt.setInt   (90, etc.getPp_suc_r_amt			());
			pstmt.setString(91, etc.getRent_suc_ifee_yn		());
			pstmt.setInt   (92, etc.getIfee_suc_o_amt		());
			pstmt.setInt   (93, etc.getIfee_suc_r_amt		());
			pstmt.setString(94, etc.getN_mon				());
			pstmt.setString(95, etc.getN_day				());
			pstmt.setString(96, etc.getTop_cng_yn			());
			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContEtc]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 수정 : 계약 기초정보 수정 (cont)
	public boolean updateContBaseNew(ContBaseBean base)
	{
		getConnection();
		Statement stmt = null;
		boolean flag = true;
		String query = " update CONT set "+
						" CLIENT_ID		= '"+base.getClient_id()+"',"+
						" CAR_MNG_ID	= '"+base.getCar_mng_id()+"',"+
						" RENT_ST		= '"+base.getRent_st()+"',"+
						" BUS_ST		= '"+base.getBus_st()+"',"+
						" RENT_DT		= replace ('"+base.getRent_dt()+"', '-', ''),"+
						" DLV_DT		= replace ('"+base.getDlv_dt()+"', '-', ''),"+
						" RENT_START_DT = replace ('"+base.getRent_start_dt()+"', '-', ''),"+
						" BUS_ID		= '"+base.getBus_id()+"',"+
						" BRCH_ID		= '"+base.getBrch_id()+"',"+
						" NOTE			= '"+base.getNote()+"',"+
						" MNG_ID		= '"+base.getMng_id()+"',"+
						" REG_ID		= '"+base.getReg_id()+"',"+
						" REG_DT		= replace ('"+base.getReg_dt()+"', '-', ''),"+
						" CAR_ST		= '"+base.getCar_st()+"',"+
						" R_SITE		= '"+base.getR_site()+"',"+
						" P_ZIP			= '"+base.getP_zip()+"',"+
						" P_ADDR		= '"+base.getP_addr()+"',"+
						" O_MAP			= '"+base.getO_map()+"',"+
						" USE_YN		= '"+base.getUse_yn()+"',"+
						" R_SITE_ZIP	= '"+base.getR_site_zip()+"',"+
						" R_SITE_ADDR	= '"+base.getR_site_addr()+"',"+
						" DRIVING_EXT	= '"+base.getDriving_ext()+"',"+
						" DRIVING_AGE	= '"+base.getDriving_age()+"',"+
						" LOAN_EXT		= '"+base.getLoan_ext()+"',"+
						" OTHERS		= '"+base.getOthers()+"',"+
						" CAR_JA		= "+base.getCar_ja()+","+
						" BUS_ID2		= '"+base.getBus_id2()+"',"+
						" MNG_ID2		= '"+base.getMng_id2()+"',"+
						" DEPT_ID		= '"+base.getDept_id()+"',"+
						" SCAN_FILE		= '"+base.getScan_file()+"',"+
						" UPDATE_ID		= '"+base.getUpdate_id()+"',"+
						" UPDATE_DT		= to_char(sysdate,'YYYYMMDD'),"+
						" RENT_END_DT	= replace ('"+base.getRent_end_dt()+"', '-', ''), "+
						" GCP_KD		= '"+base.getGcp_kd()+"',"+
						" BACDT_KD		= '"+base.getBacdt_kd()+"', "+
						" SPR_KD		= '"+base.getSpr_kd()+"', "+
						" TAX_AGNT		= '"+base.getTax_agnt()+"', "+
						" TAX_TYPE		= '"+base.getTax_type()+"', "+
						" SANCTION_ID	= '"+base.getSanction_id()+"', "+
						" SANCTION		= '"+base.getSanction()+"', "+
						" FINE_MM		= '"+base.getFine_mm()+"', "+
						" CALL_ST		= '"+base.getCall_st()+"', "+
						" BUS_ID3		= '"+base.getBus_id3()+"', "+
						" REG_STEP		= '"+base.getReg_step()+"', "+
						" agent_emp_id	= '"+base.getAgent_emp_id()+"', "+
						" sanction_type	= '"+base.getSanction_type()+"', "+
						" lic_no		= '"+base.getLic_no()+"', "+
						" mgr_lic_no	= '"+base.getMgr_lic_no()+"', "+
						" mgr_lic_emp	= '"+base.getMgr_lic_emp()+"', "+
						" mgr_lic_rel	= '"+base.getMgr_lic_rel()+"',  "+
						" agent_users	= '"+base.getAgent_users()+"', "+
						" test_lic_emp		= '"+base.getTest_lic_emp()+"', "+
						" test_lic_rel		= '"+base.getTest_lic_rel()+"',  "+
						" test_lic_result	= '"+base.getTest_lic_result()+"',  "+
						" test_lic_emp2		= '"+base.getTest_lic_emp2()+"', "+
						" test_lic_rel2		= '"+base.getTest_lic_rel2()+"',  "+
						" test_lic_result2	= '"+base.getTest_lic_result2()+"'  "+
						" where"+
						" RENT_MNG_ID	= '"+base.getRent_mng_id()+"' and"+
						" RENT_L_CD		= '"+base.getRent_l_cd()+"'";
		try 
		{
			conn.setAutoCommit(false);

			stmt = conn.createStatement();
			stmt.executeUpdate(query);
			stmt.close();
			conn.commit();
		    
		} catch (Exception e) {
            try{
				System.out.println("[AddContDatabase:updateContBaseNew]"+e);
                conn.rollback();
            }catch(SQLException _ignored){}
			e.printStackTrace();
	  		flag = false;
		} finally {
			try{
				conn.setAutoCommit(true);
                if(stmt != null)		stmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	public boolean updateContEtc(ContEtcBean etc)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CONT_ETC set "+
						" mng_br_id			= ?, "+
						" bus_agnt_id		= ?, "+
						" rec_st			= ?, "+
						" ele_tax_st		= ?, "+
						" tax_extra			= ?, "+
						" sanction_st		= ?, "+
						" guar_st			= ?, "+
						" guar_con			= ?, "+ 
						" guar_sac_id		= ?, "+ 
						" dec_gr			= ?, "+ 
						" dec_f_id			= ?, "+ 
						" dec_f_dt			= ?, "+ 
						" dec_l_id			= ?, "+ 
						" dec_l_dt			= ?, "+ 
						" insur_per			= ?, "+ 
						" canoisr_yn		= ?, "+ 
						" cacdt_yn			= ?, "+ 
						" eme_yn			= ?, "+ 
						" ja_reason			= ?, "+ 
						" rea_appr_id		= ?, "+ 
						" air_ds_yn			= ?, "+
						" air_as_yn			= ?, "+
						" air_cu_yn			= ?, "+
						" auto_yn			= ?, "+
						" abs_yn			= ?, "+
						" rob_yn			= ?, "+
						" sp_car_yn			= ?, "+
						" ac_dae_yn			= ?, "+
						" pro_yn			= ?, "+
						" cyc_yn			= ?, "+
						" main_yn			= ?, "+												
						" ma_dae_yn			= ?, "+												
						" ip_insur			= ?, "+
						" ip_agent			= ?, "+
						" ip_dam			= ?, "+
						" ip_tel			= ?, "+
						" fin_seq			= ?, "+
						" assest_seq		= ?, "+
						" client_guar_st	= ?, "+
						" dec_etc			= ?, "+
						" guar_est_dt		= replace (?, '-', ''),"+
						" guar_etc			= ?, "+
						" guar_end_st		= ?, "+
						" rent_suc_commi	= ?, "+
						" rent_suc_dt		= replace (?, '-', ''),"+
						" grt_suc_m_id		= ?, "+
						" grt_suc_l_cd		= ?, "+
						" grt_suc_c_no		= ?, "+
						" grt_suc_o_amt		= ?, "+
						" grt_suc_r_amt		= ?, "+
						" car_deli_dt		= replace (?, '-', ''),"+
						" rent_suc_grt_yn	= ?, "+
						" rent_suc_m_id		= ?, "+
						" rent_suc_l_cd		= ?, "+
						" rent_suc_fee_tm	= ?, "+
						" est_area			= ?, "+
						" cacdt_me_amt		= ?, "+
						" cacdt_memin_amt	= ?, "+
						" cacdt_mebase_amt	= ?, "+
						" rent_suc_commi_pay_st	= ?,  "+
						" car_cng_yn		= ?, "+
						" cash_back_pay_dt	= replace (?, '-', ''), "+
						" county			= ?, "+
						" blackbox_yn		= ?, "+
						" rent_suc_fee_tm_b_dt	= replace (?, '-', ''), "+
						" rent_suc_exem_cau	= ?, "+
						" rent_suc_exem_id	= ?, "+
						" insurant			= ?, "+
						" rent_suc_route	= ?, "+
						" rent_suc_dist 	= ?, "+ 
						" client_share_st	= ?, "+
						" com_emp_yn	    = ?, "+
						" lkas_yn	    	= ?, "+
						" ldws_yn	   		= ?, "+
						" aeb_yn	    	= ?, "+
						" fcw_yn	   		= ?, "+
						" ev_yn	    		= ?, "+
						" dlv_con_commi_yn	= ?, "+
						" car_use_addr		= ?, "+	//차량이용지 주소 추가(2018.03.09)
						" mng_type			= ?, "+	//차량이용지 주소 추가(2018.03.09)
						" cls_etc			= ?, "+
						" dir_pur_commi_yn  = ?, "+
						" view_car_dc 		= ?, "+
						" others_device		= ?, "+	
						" garnish_yn		= ?, "+
						" hook_yn			= ?, "+
						" legal_yn			= ?, "+
						" car_deli_est_dt   = replace (?, '-', ''), "+

						" rent_suc_pp_yn	= ?, "+
						" pp_suc_o_amt		= ?, "+
						" pp_suc_r_amt		= ?, "+						
						" rent_suc_ifee_yn	= ?, "+
						" ifee_suc_o_amt	= ?, "+
						" ifee_suc_r_amt	= ?, "+
						" n_mon				= ?, "+
						" n_day				= ?, "+
						" top_cng_yn		= ?  "+
						
						" where RENT_MNG_ID = ? and RENT_L_CD = ? ";

		try 
		{
			conn.setAutoCommit(false);
				
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  etc.getMng_br_id		());
			pstmt.setString(2,  etc.getBus_agnt_id		());
			pstmt.setString(3,  etc.getRec_st			());
			pstmt.setString(4,  etc.getEle_tax_st		());
			pstmt.setString(5,  etc.getTax_extra		());
			pstmt.setString(6,  etc.getSanction_st		());
			pstmt.setString(7,  etc.getGuar_st			());
			pstmt.setString(8,  etc.getGuar_con			());
			pstmt.setString(9,  etc.getGuar_sac_id		());
			pstmt.setString(10, etc.getDec_gr			());
			pstmt.setString(11, etc.getDec_f_id			());
			pstmt.setString(12, etc.getDec_f_dt			());
			pstmt.setString(13, etc.getDec_l_id			());
			pstmt.setString(14, etc.getDec_l_dt			());
			pstmt.setString(15, etc.getInsur_per		());
			pstmt.setString(16, etc.getCanoisr_yn		());
			pstmt.setString(17, etc.getCacdt_yn			());
			pstmt.setString(18, etc.getEme_yn			());
			pstmt.setString(19, etc.getJa_reason		());
			pstmt.setString(20, etc.getRea_appr_id		());
			pstmt.setString(21, etc.getAir_ds_yn		());
			pstmt.setString(22, etc.getAir_as_yn		());
			pstmt.setString(23, etc.getAir_cu_yn		());
			pstmt.setString(24, etc.getAuto_yn			());
			pstmt.setString(25, etc.getAbs_yn			());
			pstmt.setString(26, etc.getRob_yn			());
			pstmt.setString(27, etc.getSp_car_yn		());
			pstmt.setString(28, etc.getAc_dae_yn		());
			pstmt.setString(29, etc.getPro_yn			());
			pstmt.setString(30, etc.getCyc_yn			());
			pstmt.setString(31, etc.getMain_yn			());
			pstmt.setString(32, etc.getMa_dae_yn		());
			pstmt.setString(33, etc.getIp_insur			());
			pstmt.setString(34, etc.getIp_agent			());
			pstmt.setString(35, etc.getIp_dam			());
			pstmt.setString(36, etc.getIp_tel			());
			pstmt.setString(37, etc.getFin_seq			());
			pstmt.setString(38, etc.getAssest_seq		());
			pstmt.setString(39, etc.getClient_guar_st	());
			pstmt.setString(40, etc.getDec_etc			());
			pstmt.setString(41, etc.getGuar_est_dt		());
			pstmt.setString(42, etc.getGuar_etc			());
			pstmt.setString(43, etc.getGuar_end_st		());
			pstmt.setInt   (44, etc.getRent_suc_commi	());
			pstmt.setString(45, etc.getRent_suc_dt		());
			pstmt.setString(46, etc.getGrt_suc_m_id		());
			pstmt.setString(47, etc.getGrt_suc_l_cd		());
			pstmt.setString(48, etc.getGrt_suc_c_no		());
			pstmt.setInt   (49, etc.getGrt_suc_o_amt	());
			pstmt.setInt   (50, etc.getGrt_suc_r_amt	());
			pstmt.setString(51, etc.getCar_deli_dt		());
			pstmt.setString(52, etc.getRent_suc_grt_yn	());
			pstmt.setString(53, etc.getRent_suc_m_id	());
			pstmt.setString(54, etc.getRent_suc_l_cd	());
			pstmt.setString(55, etc.getRent_suc_fee_tm	());
			pstmt.setString(56, etc.getEst_area			());
			pstmt.setInt   (57, etc.getCacdt_me_amt		());
			pstmt.setInt   (58, etc.getCacdt_memin_amt	());
			pstmt.setInt   (59, etc.getCacdt_mebase_amt	());
			pstmt.setString(60, etc.getRent_suc_commi_pay_st	());
			pstmt.setString(61, etc.getCar_cng_yn		());
			pstmt.setString(62, etc.getCash_back_pay_dt	());
			pstmt.setString(63, etc.getCounty			());
			pstmt.setString(64, etc.getBlackbox_yn		());
			pstmt.setString(65, etc.getRent_suc_fee_tm_b_dt		());
			pstmt.setString(66, etc.getRent_suc_exem_cau());
			pstmt.setString(67, etc.getRent_suc_exem_id	());
			pstmt.setString(68, etc.getInsurant			());
			pstmt.setString(69, etc.getRent_suc_route	());
			pstmt.setInt   (70, etc.getRent_suc_dist	());
			pstmt.setString(71, etc.getClient_share_st	());
			pstmt.setString(72, etc.getCom_emp_yn	    ());
			pstmt.setString(73, etc.getLkas_yn		    ());
			pstmt.setString(74, etc.getLdws_yn	    	());
			pstmt.setString(75, etc.getAeb_yn		    ());
			pstmt.setString(76, etc.getFcw_yn		    ());
			pstmt.setString(77, etc.getEv_yn	    	());
			pstmt.setString(78, etc.getDlv_con_commi_yn	());
			pstmt.setString(79, etc.getCar_use_addr		());	//차량이용지 주소 추가(2018.03.09)
			pstmt.setString(80, etc.getMng_type			());
			pstmt.setString(81, etc.getCls_etc			());
			pstmt.setString(82, etc.getDir_pur_commi_yn	());
			pstmt.setInt   (83, etc.getView_car_dc		());
			pstmt.setString(84, etc.getOthers_device	());
			pstmt.setString(85, etc.getGarnish_yn		());
			pstmt.setString(86, etc.getHook_yn		());
			pstmt.setString(87, etc.getLegal_yn		());
			pstmt.setString(88, etc.getCar_deli_est_dt	());
			
			pstmt.setString(89, etc.getRent_suc_pp_yn	());			
			pstmt.setInt   (90, etc.getPp_suc_o_amt		());
			pstmt.setInt   (91, etc.getPp_suc_r_amt		());
			pstmt.setString(92, etc.getRent_suc_ifee_yn	());			
			pstmt.setInt   (93, etc.getIfee_suc_o_amt	());
			pstmt.setInt   (94, etc.getIfee_suc_r_amt	());
			pstmt.setString(95, etc.getN_mon	    	());
			pstmt.setString(96, etc.getN_day	    	());
			pstmt.setString(97, etc.getTop_cng_yn		());
						
			pstmt.setString(98, etc.getRent_mng_id		());			
			pstmt.setString(99, etc.getRent_l_cd		());
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit(); 
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateContEtc]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}		
	
	// lc_b_s 페이지 영업사원-영업담당 출고보전수당 지급여부 수정용		2017. 12. 06
	public boolean updateContEtcModify(ContEtcBean etc) {
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CONT_ETC set dlv_con_commi_yn = ?, dir_pur_commi_yn = ? where RENT_MNG_ID = ? and RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);
				
			pstmt = conn.prepareStatement(query);						
			pstmt.setString(1, etc.getDlv_con_commi_yn	());
			pstmt.setString(2, etc.getDir_pur_commi_yn	());
			pstmt.setString(3, etc.getRent_mng_id		());			
			pstmt.setString(4, etc.getRent_l_cd			());			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateContEtcModify]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	public boolean updateContCarNew(ContCarBean car)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_ETC set "+
						" CAR_ID		= ?, "+
						" COLO			= ?, "+
						" EX_GAS		= ?, "+
						" IMM_AMT		= ?, "+
						" OPT			= ?, "+
						" LPG_YN		= ?, "+
						" LPG_SETTER	= ?, "+
						" LPG_PRICE		= ?, "+
						" LPG_PAY_DT	= replace(?, '-', ''), "+ 
						" CAR_CS_AMT	= ?, "+ 
						" CAR_CV_AMT	= ?, "+ 
						" CAR_FS_AMT	= ?, "+ 
						" CAR_FV_AMT	= ?, "+ 
						" OPT_CS_AMT	= ?, "+ 
						" OPT_CV_AMT	= ?, "+ 
						" OPT_FS_AMT	= ?, "+ 
						" OPT_FV_AMT	= ?, "+ 
						" CLR_CS_AMT	= ?, "+ 
						" CLR_CV_AMT	= ?, "+ 
						" CLR_FS_AMT	= ?, "+ 
						" CLR_FV_AMT	= ?, "+ 
						" SD_CS_AMT		= ?, "+
						" SD_CV_AMT		= ?, "+
						" SD_FS_AMT		= ?, "+
						" SD_FV_AMT		= ?, "+
						" DC_CS_AMT		= ?, "+
						" DC_CV_AMT		= ?, "+
						" DC_FS_AMT		= ?, "+
						" DC_FV_AMT		= ?, "+
						" PURC_GU		= ?, "+
						" CAR_EXT		= ?, "+
						" BAE4			= ?, "+												
						" GI_ST			= ?, "+												
						" ADD_OPT		= ?, "+
						" OPT_CODE		= ?, "+
						" CAR_SEQ		= ?, "+
						" reg_est_dt	= replace(?, '-', ''), "+
						" sun_per 		= ?, "+
						" extra_set		= ?, "+
						" remark		= ?, "+
						" s_dc1_re		= ?, "+
						" s_dc1_yn		= ?, "+
						" s_dc1_amt 	= ?, "+
						" s_dc2_re		= ?, "+
						" s_dc2_yn		= ?, "+
						" s_dc2_amt 	= ?, "+
						" s_dc3_re		= ?, "+
						" s_dc3_yn		= ?, "+
						" s_dc3_amt 	= ?, "+
						" pay_st		= ?, "+
						" spe_tax 		= ?, "+
						" edu_tax 		= ?, "+
						" car_origin	= ?, "+
						" sh_car_amt	= ?, "+
						" sh_year		= ?, "+
						" sh_month		= ?, "+
						" sh_day		= ?, "+
						" sh_day_bas_dt	= replace(?, '-', ''), "+
						" sh_amt		= ?, "+
						" sh_ja			= ?, "+
						" sh_km			= ?, "+
						" sh_km_bas_dt	= replace(?, '-', ''), "+
						" lpg_kit		= ?, "+
						" add_opt_amt 	= ?, "+
						" s_dc1_re_etc	= ?, "+
						" s_dc2_re_etc	= ?, "+
						" s_dc3_re_etc	= ?, "+
						" s_dc1_per		= ?, "+
						" s_dc2_per		= ?, "+
						" s_dc3_per		= ?, "+
						" car_amt_dt	= replace(?, '-', ''), "+
						" extra_amt		= ?, "+
						" in_col		= ?, "+
						" hipass_yn		= ?, "+
						" bluelink_yn		= ?, "+
						" car_tax_dt	= replace(?, '-', ''), "+
						" import_card_amt		= ?, "+
						" import_cash_back		= ?, "+
						" import_bank_amt		= ?, "+
						" r_import_cash_back	= ?, "+
						" r_import_bank_amt		= ?, "+
						" tint_b_yn				= ?, "+
						" tint_s_yn				= ?, "+
						" tint_s_per			= ?, "+
						" tint_ps_yn			= ?, "+
						" tint_ps_nm			= ?, "+
						" tint_ps_amt			= ?, "+
						" tint_ps_st			= ?, "+
						" tint_n_yn				= ?, "+
						" serv_b_yn				= ?, "+
						" serv_sc_yn			= ?, "+
						" jg_opt_st				= ?, "+
						" jg_col_st				= ?, "+
						" tax_dc_s_amt			= ?, "+
						" tax_dc_v_amt			= ?, "+
						" ecar_pur_sub_amt		= ?, "+
						" ecar_pur_sub_st 		= ?, "+
						" conti_rat             = ?, "+
						" commi_s_amt			= ?, "+
						" commi_v_amt			= ?, "+
						" accid_serv_amt		= ?, "+
						" sh_est_amt			= ?, "+
						" sh_init_reg_dt		= replace(?, '-', ''), "+
						" accid_serv_cont		= ?, "+
						" jg_tuix_st			= ?, "+
						" jg_tuix_opt_st		= ?, "+
						" eco_e_tag				= ?, "+
						" tint_eb_yn			= ?, "+
						" storage_s_amt			= ?, "+
						" storage_v_amt			= ?, "+
						" van_add_opt			= ?,  "+
						" opt_amt_m				= ?,  "+
						" garnish_col			= ?,  "+
						" tint_bn_yn			= ?,  "+
						" new_license_plate		= ?,  "+
						" tint_cons_yn			= ?,  "+
						" tint_cons_amt			= ?,  "+
						" tint_sn_yn			= ?,  "+
						" tint_bn_nm			= ?   "+

						" where RENT_MNG_ID = ? and RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  car.getCar_id			());
			pstmt.setString(2,  car.getColo				());
			pstmt.setString(3,  car.getEx_gas			());
			pstmt.setInt   (4,  car.getImm_amt			());
			pstmt.setString(5,  car.getOpt				());
			pstmt.setString(6,  car.getLpg_yn			());
			pstmt.setString(7,  car.getLpg_setter		());
			pstmt.setInt   (8,  car.getLpg_price		());
			pstmt.setString(9,  car.getLpg_pay_dt		());
			pstmt.setInt   (10, car.getCar_cs_amt		());
			pstmt.setInt   (11, car.getCar_cv_amt		());
			pstmt.setInt   (12, car.getCar_fs_amt		());
			pstmt.setInt   (13, car.getCar_fv_amt		());
			pstmt.setInt   (14, car.getOpt_cs_amt		());
			pstmt.setInt   (15, car.getOpt_cv_amt		());
			pstmt.setInt   (16, car.getOpt_fs_amt		());
			pstmt.setInt   (17, car.getOpt_fv_amt		());
			pstmt.setInt   (18, car.getClr_cs_amt		());
			pstmt.setInt   (19, car.getClr_cv_amt		());
			pstmt.setInt   (20, car.getClr_fs_amt		());
			pstmt.setInt   (21, car.getClr_fv_amt		());
			pstmt.setInt   (22, car.getSd_cs_amt		());
			pstmt.setInt   (23, car.getSd_cv_amt		());
			pstmt.setInt   (24, car.getSd_fs_amt		());
			pstmt.setInt   (25, car.getSd_fv_amt		());
			pstmt.setInt   (26, car.getDc_cs_amt		());
			pstmt.setInt   (27, car.getDc_cv_amt		());
			pstmt.setInt   (28, car.getDc_fs_amt		());
			pstmt.setInt   (29, car.getDc_fv_amt		());
			pstmt.setString(30, car.getPurc_gu			());
			pstmt.setString(31, car.getCar_ext			());
			pstmt.setString(32, car.getBae4				());
			pstmt.setString(33, car.getGi_st			());
			pstmt.setString(34, car.getAdd_opt			());
			pstmt.setString(35, car.getOpt_code			());
			pstmt.setString(36, car.getCar_seq			());
			pstmt.setString(37, car.getReg_est_dt		());
			pstmt.setInt   (38, car.getSun_per			());
			pstmt.setString(39, car.getExtra_set		());
			pstmt.setString(40, car.getRemark			());
			pstmt.setString(41, car.getS_dc1_re			());
			pstmt.setString(42, car.getS_dc1_yn			());
			pstmt.setInt   (43, car.getS_dc1_amt		());
			pstmt.setString(44, car.getS_dc2_re			());
			pstmt.setString(45, car.getS_dc2_yn			());
			pstmt.setInt   (46, car.getS_dc2_amt		());
			pstmt.setString(47, car.getS_dc3_re			());
			pstmt.setString(48, car.getS_dc3_yn			());
			pstmt.setInt   (49, car.getS_dc3_amt		());
			pstmt.setString(50, car.getPay_st			());
			pstmt.setInt   (51, car.getSpe_tax			());
			pstmt.setInt   (52, car.getEdu_tax			());
			pstmt.setString(53, car.getCar_origin		());
			pstmt.setInt   (54, car.getSh_car_amt		());
			pstmt.setString(55, car.getSh_year			());
			pstmt.setString(56, car.getSh_month			());
			pstmt.setString(57, car.getSh_day			());
			pstmt.setString(58, car.getSh_day_bas_dt	());
			pstmt.setInt   (59, car.getSh_amt			());
			pstmt.setFloat (60, car.getSh_ja			());
			pstmt.setInt   (61, car.getSh_km			());
			pstmt.setString(62, car.getSh_km_bas_dt		());
			pstmt.setString(63, car.getLpg_kit			());
			pstmt.setInt   (64, car.getAdd_opt_amt		());
			pstmt.setString(65, car.getS_dc1_re_etc		());
			pstmt.setString(66, car.getS_dc2_re_etc		());
			pstmt.setString(67, car.getS_dc3_re_etc		());
			pstmt.setFloat (68, car.getS_dc1_per		());
			pstmt.setFloat (69, car.getS_dc2_per		());
			pstmt.setFloat (70, car.getS_dc3_per		());
			pstmt.setString(71, car.getCar_amt_dt		());	
			pstmt.setInt   (72, car.getExtra_amt		());			
			pstmt.setString(73, car.getIn_col			());
			pstmt.setString(74, car.getHipass_yn		());
			pstmt.setString(75, car.getBluelink_yn		());
			pstmt.setString(76, car.getCar_tax_dt		());	
			pstmt.setInt   (77, car.getImport_card_amt	());			
			pstmt.setInt   (78, car.getImport_cash_back	());			
			pstmt.setInt   (79, car.getImport_bank_amt	());			
			pstmt.setInt   (80, car.getR_import_cash_back());			
			pstmt.setInt   (81, car.getR_import_bank_amt());	
			pstmt.setString(82, car.getTint_b_yn		());			
			pstmt.setString(83, car.getTint_s_yn		());	
			pstmt.setInt   (84, car.getTint_s_per		());				
			pstmt.setString(85, car.getTint_ps_yn		());
			pstmt.setString(86, car.getTint_ps_nm		());
			pstmt.setInt   (87, car.getTint_ps_amt		());
			pstmt.setString(88, car.getTint_ps_st		());
			pstmt.setString(89, car.getTint_n_yn		());			
			pstmt.setString(90, car.getServ_b_yn		());
			pstmt.setString(91, car.getServ_sc_yn		());
			pstmt.setString(92, car.getJg_opt_st		());			
			pstmt.setString(93, car.getJg_col_st		());			
			pstmt.setInt   (94, car.getTax_dc_s_amt		());			
			pstmt.setInt   (95, car.getTax_dc_v_amt	  	());			
			pstmt.setInt   (96, car.getEcar_pur_sub_amt	());	
			pstmt.setString(97, car.getEcar_pur_sub_st 	());	
			pstmt.setString(98, car.getConti_rat        ());    
			pstmt.setInt   (99, car.getCommi_s_amt		());			
			pstmt.setInt   (100, car.getCommi_v_amt	  	());			
			pstmt.setInt   (101, car.getAccid_serv_amt	());	
			pstmt.setInt   (102, car.getSh_est_amt		());	
			pstmt.setString(103, car.getSh_init_reg_dt	());	
			pstmt.setString(104, car.getAccid_serv_cont ());				
			pstmt.setString(105, car.getJg_tuix_st		());			
			pstmt.setString(106, car.getJg_tuix_opt_st	());
			pstmt.setString(107, car.getEco_e_tag		());
			pstmt.setString(108, car.getTint_eb_yn		());			
			pstmt.setInt   (109, car.getStorage_s_amt	());			
			pstmt.setInt   (110, car.getStorage_v_amt  	());
			pstmt.setString(111, car.getVan_add_opt  	());	
			pstmt.setInt   (112, car.getOpt_amt_m		());			
			pstmt.setString(113, car.getGarnish_col		());			
			pstmt.setString(114, car.getTint_bn_yn		());			
			pstmt.setString(115, car.getNew_license_plate());
			pstmt.setString(116, car.getTint_cons_yn	());
			pstmt.setInt   (117, car.getTint_cons_amt  	());
			pstmt.setString(118, car.getTint_sn_yn  	());
			pstmt.setString(119, car.getTint_bn_nm		());			
			pstmt.setString(120, car.getRent_mng_id		());			
			pstmt.setString(121, car.getRent_l_cd		());
			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateContCarNew]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}		

	public boolean updateContFeeNew(ContFeeBean fee)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE set "+
						" RENT_WAY			= ?, "+
						" CAR_ST			= ?, "+
						" CON_MON			= ?, "+
						" RENT_START_DT		= replace(?, '-', ''),"+
						" RENT_END_DT		= replace(?, '-', ''), "+
						" PRV_DLV_YN		= ?, "+
						" PRV_CAR_MNG_ID	= ?, "+
						" PRV_START_DT		= replace(?, '-', ''), "+
						" PRV_END_DT		= replace(?, '-', ''), "+
						" GRT_AMT_S			= ?, "+
						" GRT_ETC			= ?, "+
						" GRT_EST_DT		= replace(?, '-', ''), "+
						" GRT_PAY_YN		= ?, "+
						" PP_S_AMT			= ?, "+
						" PP_V_AMT			= ?, "+
						" PP_ETC			= ?, "+
						" PP_EST_DT			= replace(?, '-', ''), "+
						" PP_PAY_YN			= ?, "+
						" IFEE_S_AMT		= ?, "+
						" IFEE_V_AMT		= ?, "+
						" IFEE_ETC			= ?, "+
						" IFEE_EST_DT		= replace(?, '-', ''), "+
						" IFEE_PAY_YN		= ?, "+
						" INV_S_AMT			= ?, "+
						" INV_V_AMT			= ?, "+
						" INV_ETC			= ?, "+
						" OPT_S_AMT			= ?, "+
						" OPT_V_AMT			= ?, "+
						" OPT_YN			= ?, "+
						" OPT_ETC			= ?, "+
						" FEE_S_AMT			= ?, "+
						" FEE_V_AMT			= ?, "+
						" FEE_ETC			= ?, "+
						" FEE_ST			= ?, "+
						" FEE_REQ_DAY		= ?, "+
						" FEE_EST_DAY		= ?, "+
						" FEE_BANK			= ?, "+
						" FEE_PAY_ST		= ?, "+
						" FEE_PAY_TM		= ?, "+
						" FEE_PAY_START_DT	= replace(?, '-', ''),"+ 
						" FEE_PAY_END_DT	= replace(?, '-', ''),"+
						" FEE_FST_DT		= replace(?, '-', ''),"+
						" FEE_FST_AMT		= ?, "+
						" FEE_CDT			= ?, "+
						" EXT_AGNT			= ?, "+
						" BR_ID				= ?, "+
						" RC_DAY			= ?, "+
						" NEXT_YN			= ?, "+
						" OPT_CHK			= ?, "+
						" FEE_SH			= ?, "+
						" PRV_MON_YN		= ?, "+
						" FEE_CHK			= ?, "+
						" OPT_PER			= ?, "+
						" RENT_DT			= replace(?, '-', ''),"+
						" GRT_SUC_YN		= ?, "+
						" IFEE_SUC_YN		= ?, "+
						" RENT_EST_DT		= replace(?, '-', ''),"+
						" LEAVE_DAY			= ?, "+
						" CLS_PER			= ?, "+
						" gur_per			= ?, "+     
						" gur_p_per			= replace(?, 'NaN', 0), "+     
						" pere_per			= ?, "+     
						" pere_r_per		= ?, "+     
						" pere_mth			= ?, "+     
						" pere_r_mth		= ?, "+     
						" max_ja			= ?, "+     
						" app_ja			= ?, "+     
						" opt_st			= ?, "+     
						" dc_ra				= ?, "+     
						" bas_dt			= replace(?, '-', ''),"+
						" fee_sac_id		= ?, "+     
						" def_st			= ?, "+     
						" def_remark		= ?, "+     
						" def_sac_id		= ?, "+   
						" cls_r_per			= ?, "+   
						" ja_s_amt			= ?, "+   
						" ja_v_amt			= ?, "+  
						" credit_per  		= ?, "+   
						" credit_r_per		= ?, "+   			
						" credit_amt  		= ?, "+   
						" credit_r_amt		= ?, "+  
						" ja_r_s_amt		= ?, "+   
						" ja_r_v_amt		= ?, "+  	
						" rtn_st			= ?, "+  
						" cls_n_per			= ?, "+  
						" b_max_ja			= ?, "+   	
						" F_OPT_PER			= ?, "+			
						" F_GUR_P_PER		= ?, "+			
						" F_PERE_R_PER		= ?,  "+			
						" INS_S_AMT			= ?,  "+			
						" INS_V_AMT			= ?,  "+			
						" INS_TOTAL_AMT		= ?, "+
						" PP_CHK			= ?  "+			
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ? ";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  fee.getRent_way()			);
			pstmt.setString(2,  fee.getCar_st()				);
			pstmt.setString(3,  fee.getCon_mon()			);
			pstmt.setString(4,  fee.getRent_start_dt()		);
			pstmt.setString(5,  fee.getRent_end_dt()		);			
			pstmt.setString(6,  fee.getPrv_dlv_yn()			);
			pstmt.setString(7,  fee.getPrv_car_mng_id()		);
			pstmt.setString(8,  fee.getPrv_start_dt()		);
			pstmt.setString(9,  fee.getPrv_end_dt()			);
			pstmt.setInt   (10, fee.getGrt_amt_s()			);			
			pstmt.setString(11, fee.getGrt_etc()			);
			pstmt.setString(12, fee.getGrt_est_dt()			);
			pstmt.setString(13, fee.getGrt_pay_yn()			);
			pstmt.setInt   (14, fee.getPp_s_amt()			);
			pstmt.setInt   (15, fee.getPp_v_amt()			);			
			pstmt.setString(16, fee.getPp_etc()				);
			pstmt.setString(17, fee.getPp_est_dt()			);
			pstmt.setString(18, fee.getPp_pay_yn()			);
			pstmt.setInt   (19, fee.getIfee_s_amt()			);
			pstmt.setInt   (20, fee.getIfee_v_amt()			);			
			pstmt.setString(21, fee.getIfee_etc()			);
			pstmt.setString(22, fee.getIfee_est_dt()		);
			pstmt.setString(23, fee.getIfee_pay_yn()		);
			pstmt.setInt   (24, fee.getInv_s_amt()			);
			pstmt.setInt   (25, fee.getInv_v_amt()			);			
			pstmt.setString(26, fee.getInv_etc()			);
			pstmt.setInt   (27, fee.getOpt_s_amt()			);
			pstmt.setInt   (28, fee.getOpt_v_amt()			);
			pstmt.setString(29, fee.getOpt_yn()				);
			pstmt.setString(30, fee.getOpt_etc()			);			
			pstmt.setInt   (31, fee.getFee_s_amt()			);
			pstmt.setInt   (32, fee.getFee_v_amt()			);
			pstmt.setString(33, fee.getFee_etc()			);
			pstmt.setString(34, fee.getFee_st()				);
			pstmt.setString(35, fee.getFee_req_day()		);			
			pstmt.setString(36, fee.getFee_est_day()		);
			pstmt.setString(37, fee.getFee_bank()			);
			pstmt.setString(38, fee.getFee_pay_st()			);
			pstmt.setString(39, fee.getFee_pay_tm()			);			
			pstmt.setString(40, fee.getFee_pay_start_dt()	);			
			pstmt.setString(41, fee.getFee_pay_end_dt()		); 
			pstmt.setString(42, fee.getFee_fst_dt()			);
			pstmt.setInt   (43, fee.getFee_fst_amt()		);
			pstmt.setString(44, fee.getFee_cdt()			);
			pstmt.setString(45, fee.getExt_agnt()			);			
			pstmt.setString(46, fee.getBr_id()				);
			pstmt.setString(47, fee.getRc_day()				);
			pstmt.setString(48, fee.getNext_yn()			);
			pstmt.setString(49, fee.getOpt_chk()			);
			pstmt.setString(50, fee.getFee_sh()				);												
			pstmt.setString(51, fee.getPrv_mon_yn()			);
			pstmt.setString(52, fee.getFee_chk()			);
			pstmt.setString(53, fee.getOpt_per()			);
			pstmt.setString(54, fee.getRent_dt()			);
			pstmt.setString(55, fee.getGrt_suc_yn()			);
			pstmt.setString(56, fee.getIfee_suc_yn()		);
			pstmt.setString(57, fee.getRent_est_dt()		);
			pstmt.setString(58, fee.getLeave_day()			);
			pstmt.setString(59, fee.getCls_per()			);
			pstmt.setFloat (60, fee.getGur_per			  ());
			pstmt.setFloat (61, fee.getGur_p_per		  ());			
			pstmt.setFloat (62, fee.getPere_per			  ());
			pstmt.setFloat (63, fee.getPere_r_per		  ());
			pstmt.setInt   (64, fee.getPere_mth			  ());
			pstmt.setInt   (65, fee.getPere_r_mth		  ());
			pstmt.setFloat (66, fee.getMax_ja			  ());			
			pstmt.setFloat (67, fee.getApp_ja			  ());
			pstmt.setString(68, fee.getOpt_st			  ());

			if(fee.getFee_s_amt() == 0 || fee.getInv_s_amt() == 0) fee.setDc_ra(0);

			pstmt.setFloat (69, fee.getDc_ra			  ());
			pstmt.setString(70, fee.getBas_dt			  ());			
			pstmt.setString(71, fee.getFee_sac_id		  ());			
			pstmt.setString(72, fee.getDef_st			  ()); 
			pstmt.setString(73, fee.getDef_remark		  ());
			pstmt.setString(74, fee.getDef_sac_id		  ());
			pstmt.setFloat (75, fee.getCls_r_per		  ());	
			pstmt.setInt   (76, fee.getJa_s_amt			  ());
			pstmt.setInt   (77, fee.getJa_v_amt			  ());
			pstmt.setFloat (78, fee.getCredit_per  		  ());
			pstmt.setFloat (79, fee.getCredit_r_per		  ());			
			pstmt.setInt   (80, fee.getCredit_amt  		  ());
			pstmt.setInt   (81, fee.getCredit_r_amt		  ());
			pstmt.setInt   (82, fee.getJa_r_s_amt		  ());
			pstmt.setInt   (83, fee.getJa_r_v_amt		  ());
			pstmt.setString(84, fee.getRtn_st			  ());
			pstmt.setFloat (85, fee.getCls_n_per		  ());
			pstmt.setFloat (86, fee.getB_max_ja			  ());			
			pstmt.setString(87, fee.getF_opt_per		  ());
			pstmt.setString(88, fee.getF_gur_p_per		  ());
			pstmt.setString(89, fee.getF_pere_r_per		  ());
			pstmt.setInt   (90, fee.getIns_s_amt		  ());
			pstmt.setInt   (91, fee.getIns_v_amt		  ());
			pstmt.setInt   (92, fee.getIns_total_amt	  ());			
			pstmt.setString(93, fee.getPp_chk()				);
			pstmt.setString(94, fee.getRent_mng_id		  ());
			pstmt.setString(95, fee.getRent_l_cd		  ());
			pstmt.setString(96, fee.getRent_st			  ());	
		    pstmt.executeUpdate();
		    pstmt.close();
		    conn.commit();
		    	
	  	} catch (Exception e) {
		  	System.out.println("[AddContDatabase:updateContFeeNew]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	public boolean updateContFeeAdd(ContFeeBean fee)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE_ADD set "+
						" RENT_WAY			= ?, "+
						" CAR_ST			= ?, "+
						" CON_MON			= ?, "+
						" RENT_START_DT		= replace(?, '-', ''),"+
						" RENT_END_DT		= replace(?, '-', ''), "+
						" PRV_DLV_YN		= ?, "+
						" PRV_CAR_MNG_ID	= ?, "+
						" PRV_START_DT		= replace(?, '-', ''), "+
						" PRV_END_DT		= replace(?, '-', ''), "+
						" GRT_AMT_S			= ?, "+
						" GRT_ETC			= ?, "+
						" GRT_EST_DT		= replace(?, '-', ''), "+
						" GRT_PAY_YN		= ?, "+
						" PP_S_AMT			= ?, "+
						" PP_V_AMT			= ?, "+
						" PP_ETC			= ?, "+
						" PP_EST_DT			= replace(?, '-', ''), "+
						" PP_PAY_YN			= ?, "+
						" IFEE_S_AMT		= ?, "+
						" IFEE_V_AMT		= ?, "+
						" IFEE_ETC			= ?, "+
						" IFEE_EST_DT		= replace(?, '-', ''), "+
						" IFEE_PAY_YN		= ?, "+
						" INV_S_AMT			= ?, "+
						" INV_V_AMT			= ?, "+
						" INV_ETC			= ?, "+
						" OPT_S_AMT			= ?, "+
						" OPT_V_AMT			= ?, "+
						" OPT_YN			= ?, "+
						" OPT_ETC			= ?, "+
						" FEE_S_AMT			= ?, "+
						" FEE_V_AMT			= ?, "+
						" FEE_ETC			= ?, "+
						" FEE_ST			= ?, "+
						" FEE_REQ_DAY		= ?, "+
						" FEE_EST_DAY		= ?, "+
						" FEE_BANK			= ?, "+
						" FEE_PAY_ST		= ?, "+
						" FEE_PAY_TM		= ?, "+
						" FEE_PAY_START_DT	= replace(?, '-', ''),"+ 
						" FEE_PAY_END_DT	= replace(?, '-', ''),"+
						" FEE_FST_DT		= replace(?, '-', ''),"+
						" FEE_FST_AMT		= ?, "+
						" FEE_CDT			= ?, "+
						" EXT_AGNT			= ?, "+
						" BR_ID				= ?, "+
						" RC_DAY			= ?, "+
						" NEXT_YN			= ?, "+
						" OPT_CHK			= ?, "+
						" FEE_SH			= ?, "+
						" PRV_MON_YN		= ?, "+
						" FEE_CHK			= ?, "+
						" OPT_PER			= ?, "+
						" RENT_DT			= replace(?, '-', ''),"+
						" GRT_SUC_YN		= ?, "+
						" IFEE_SUC_YN		= ?, "+
						" RENT_EST_DT		= replace(?, '-', ''),"+
						" LEAVE_DAY			= ?, "+
						" CLS_PER			= ?, "+
						" gur_per			= ?, "+     
						" gur_p_per			= replace(?, 'NaN', 0), "+     
						" pere_per			= ?, "+     
						" pere_r_per		= ?, "+     
						" pere_mth			= ?, "+     
						" pere_r_mth		= ?, "+     
						" max_ja			= ?, "+     
						" app_ja			= ?, "+     
						" opt_st			= ?, "+     
						" dc_ra				= ?, "+     
						" bas_dt			= replace(?, '-', ''),"+
						" fee_sac_id		= ?, "+     
						" def_st			= ?, "+     
						" def_remark		= ?, "+     
						" def_sac_id		= ?, "+   
						" cls_r_per			= ?, "+   
						" ja_s_amt			= ?, "+   
						" ja_v_amt			= ?, "+  
						" credit_per  		= ?, "+   
						" credit_r_per		= ?, "+   			
						" credit_amt  		= ?, "+   
						" credit_r_amt		= ?, "+  
						" ja_r_s_amt		= ?, "+   
						" ja_r_v_amt		= ?, "+  	
						" rtn_st			= ?, "+  
						" cls_n_per			= ?, "+  
						" b_max_ja			= ?, "+   	
						" F_OPT_PER			= ?, "+			
						" F_GUR_P_PER		= ?, "+			
						" F_PERE_R_PER		= ?,  "+			
						" INS_S_AMT			= ?,  "+			
						" INS_V_AMT			= ?,  "+			
						" INS_TOTAL_AMT		= ?, "+
						" PP_CHK			= ?  "+		
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ? ";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  fee.getRent_way()			);
			pstmt.setString(2,  fee.getCar_st()				);
			pstmt.setString(3,  fee.getCon_mon()			);
			pstmt.setString(4,  fee.getRent_start_dt()		);
			pstmt.setString(5,  fee.getRent_end_dt()		);			
			pstmt.setString(6,  fee.getPrv_dlv_yn()			);
			pstmt.setString(7,  fee.getPrv_car_mng_id()		);
			pstmt.setString(8,  fee.getPrv_start_dt()		);
			pstmt.setString(9,  fee.getPrv_end_dt()			);
			pstmt.setInt   (10, fee.getGrt_amt_s()			);			
			pstmt.setString(11, fee.getGrt_etc()			);
			pstmt.setString(12, fee.getGrt_est_dt()			);
			pstmt.setString(13, fee.getGrt_pay_yn()			);
			pstmt.setInt   (14, fee.getPp_s_amt()			);
			pstmt.setInt   (15, fee.getPp_v_amt()			);			
			pstmt.setString(16, fee.getPp_etc()				);
			pstmt.setString(17, fee.getPp_est_dt()			);
			pstmt.setString(18, fee.getPp_pay_yn()			);
			pstmt.setInt   (19, fee.getIfee_s_amt()			);
			pstmt.setInt   (20, fee.getIfee_v_amt()			);			
			pstmt.setString(21, fee.getIfee_etc()			);
			pstmt.setString(22, fee.getIfee_est_dt()		);
			pstmt.setString(23, fee.getIfee_pay_yn()		);
			pstmt.setInt   (24, fee.getInv_s_amt()			);
			pstmt.setInt   (25, fee.getInv_v_amt()			);			
			pstmt.setString(26, fee.getInv_etc()			);
			pstmt.setInt   (27, fee.getOpt_s_amt()			);
			pstmt.setInt   (28, fee.getOpt_v_amt()			);
			pstmt.setString(29, fee.getOpt_yn()				);
			pstmt.setString(30, fee.getOpt_etc()			);			
			pstmt.setInt   (31, fee.getFee_s_amt()			);
			pstmt.setInt   (32, fee.getFee_v_amt()			);
			pstmt.setString(33, fee.getFee_etc()			);
			pstmt.setString(34, fee.getFee_st()				);
			pstmt.setString(35, fee.getFee_req_day()		);			
			pstmt.setString(36, fee.getFee_est_day()		);
			pstmt.setString(37, fee.getFee_bank()			);
			pstmt.setString(38, fee.getFee_pay_st()			);
			pstmt.setString(39, fee.getFee_pay_tm()			);			
			pstmt.setString(40, fee.getFee_pay_start_dt()	);			
			pstmt.setString(41, fee.getFee_pay_end_dt()		); 
			pstmt.setString(42, fee.getFee_fst_dt()			);
			pstmt.setInt   (43, fee.getFee_fst_amt()		);
			pstmt.setString(44, fee.getFee_cdt()			);
			pstmt.setString(45, fee.getExt_agnt()			);			
			pstmt.setString(46, fee.getBr_id()				);
			pstmt.setString(47, fee.getRc_day()				);
			pstmt.setString(48, fee.getNext_yn()			);
			pstmt.setString(49, fee.getOpt_chk()			);
			pstmt.setString(50, fee.getFee_sh()				);												
			pstmt.setString(51, fee.getPrv_mon_yn()			);
			pstmt.setString(52, fee.getFee_chk()			);
			pstmt.setString(53, fee.getOpt_per()			);
			pstmt.setString(54, fee.getRent_dt()			);
			pstmt.setString(55, fee.getGrt_suc_yn()			);
			pstmt.setString(56, fee.getIfee_suc_yn()		);
			pstmt.setString(57, fee.getRent_est_dt()		);
			pstmt.setString(58, fee.getLeave_day()			);
			pstmt.setString(59, fee.getCls_per()			);
			pstmt.setFloat (60, fee.getGur_per			  ());
			pstmt.setFloat (61, fee.getGur_p_per		  ());			
			pstmt.setFloat (62, fee.getPere_per			  ());
			pstmt.setFloat (63, fee.getPere_r_per		  ());
			pstmt.setInt   (64, fee.getPere_mth			  ());
			pstmt.setInt   (65, fee.getPere_r_mth		  ());
			pstmt.setFloat (66, fee.getMax_ja			  ());			
			pstmt.setFloat (67, fee.getApp_ja			  ());
			pstmt.setString(68, fee.getOpt_st			  ());

			if(fee.getFee_s_amt() == 0 || fee.getInv_s_amt() == 0) fee.setDc_ra(0);

			pstmt.setFloat (69, fee.getDc_ra			  ());
			pstmt.setString(70, fee.getBas_dt			  ());			
			pstmt.setString(71, fee.getFee_sac_id		  ());			
			pstmt.setString(72, fee.getDef_st			  ()); 
			pstmt.setString(73, fee.getDef_remark		  ());
			pstmt.setString(74, fee.getDef_sac_id		  ());
			pstmt.setFloat (75, fee.getCls_r_per		  ());	
			pstmt.setInt   (76, fee.getJa_s_amt			  ());
			pstmt.setInt   (77, fee.getJa_v_amt			  ());
			pstmt.setFloat (78, fee.getCredit_per  		  ());
			pstmt.setFloat (79, fee.getCredit_r_per		  ());			
			pstmt.setInt   (80, fee.getCredit_amt  		  ());
			pstmt.setInt   (81, fee.getCredit_r_amt		  ());
			pstmt.setInt   (82, fee.getJa_r_s_amt		  ());
			pstmt.setInt   (83, fee.getJa_r_v_amt		  ());
			pstmt.setString(84, fee.getRtn_st			  ());
			pstmt.setFloat (85, fee.getCls_n_per		  ());
			pstmt.setFloat (86, fee.getB_max_ja			  ());			
			pstmt.setString(87, fee.getF_opt_per		  ());
			pstmt.setString(88, fee.getF_gur_p_per		  ());
			pstmt.setString(89, fee.getF_pere_r_per		  ());
			pstmt.setInt   (90, fee.getIns_s_amt		  ());
			pstmt.setInt   (91, fee.getIns_v_amt		  ());
			pstmt.setInt   (92, fee.getIns_total_amt	  ());
			pstmt.setString(93, fee.getPp_chk()				);
			pstmt.setString(94, fee.getRent_mng_id		  ());
			pstmt.setString(95, fee.getRent_l_cd		  ());
			pstmt.setString(96, fee.getRent_st			  ());	
		    pstmt.executeUpdate();
		    pstmt.close();
		    conn.commit();
		    	
	  	} catch (Exception e) {
		  	System.out.println("[AddContDatabase:updateContFeeAdd]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약기본 조회
	public Hashtable getContNew(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";
		query = " select * from cont where RENT_MNG_ID = ? and RENT_L_CD = ?";

		try{	
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		}catch (SQLException e){
			System.out.println("[AddContDatabase:getContNew]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();			
			return ht;
		}
	}

	//계약기타 조회
	public Hashtable getContEtcNew(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";
		query = " select * from cont_etc where RENT_MNG_ID = ? and RENT_L_CD = ?";

		try{	
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		}catch (SQLException e){
			System.out.println("[AddContDatabase:getContEtcNew]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();			
			return ht;
		}
	}

	//계약기타정보 조회
	public ContEtcBean getContEtc(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEtcBean base = new ContEtcBean();
		String query = "";
		query = " select * from cont_etc where rent_mng_id=? and rent_l_cd=?";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id					(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd					(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setMng_br_id					(rs.getString("mng_br_id")==null?"":rs.getString("mng_br_id"));
				base.setBus_agnt_id					(rs.getString("bus_agnt_id")==null?"":rs.getString("bus_agnt_id"));
				base.setRec_st						(rs.getString("rec_st")==null?"":rs.getString("rec_st"));
				base.setEle_tax_st					(rs.getString("ele_tax_st")==null?"":rs.getString("ele_tax_st"));
				base.setTax_extra					(rs.getString("tax_extra")==null?"":rs.getString("tax_extra"));
				base.setSanction_st					(rs.getString("sanction_st")==null?"":rs.getString("sanction_st"));
				base.setGuar_st						(rs.getString("guar_st")==null?"":rs.getString("guar_st").trim());
				base.setGuar_con					(rs.getString("guar_con")==null?"":rs.getString("guar_con"));
				base.setGuar_sac_id					(rs.getString("guar_sac_id")==null?"":rs.getString("guar_sac_id"));
				base.setDec_gr						(rs.getString("dec_gr")==null?"":rs.getString("dec_gr"));
				base.setDec_f_id					(rs.getString("dec_f_id")==null?"":rs.getString("dec_f_id"));
				base.setDec_f_dt					(rs.getString("dec_f_dt")==null?"":rs.getString("dec_f_dt"));
				base.setDec_l_id					(rs.getString("dec_l_id")==null?"":rs.getString("dec_l_id"));
				base.setDec_l_dt					(rs.getString("dec_l_dt")==null?"":rs.getString("dec_l_dt"));
				base.setInsur_per					(rs.getString("insur_per")==null?"":rs.getString("insur_per"));
				base.setCanoisr_yn					(rs.getString("canoisr_yn")==null?"":rs.getString("canoisr_yn"));
				base.setCacdt_yn					(rs.getString("cacdt_yn")==null?"":rs.getString("cacdt_yn"));
				base.setEme_yn						(rs.getString("eme_yn")==null?"":rs.getString("eme_yn"));
				base.setJa_reason					(rs.getString("ja_reason")==null?"":rs.getString("ja_reason"));
				base.setRea_appr_id					(rs.getString("rea_appr_id")==null?"":rs.getString("rea_appr_id"));
				base.setAir_ds_yn					(rs.getString("air_ds_yn")==null?"":rs.getString("air_ds_yn"));
				base.setAir_as_yn					(rs.getString("air_as_yn")==null?"":rs.getString("air_as_yn"));
				base.setAir_cu_yn					(rs.getString("air_cu_yn")==null?"":rs.getString("air_cu_yn"));
				base.setAuto_yn						(rs.getString("auto_yn")==null?"":rs.getString("auto_yn"));
				base.setAbs_yn						(rs.getString("abs_yn")==null?"":rs.getString("abs_yn"));
				base.setRob_yn						(rs.getString("rob_yn")==null?"":rs.getString("rob_yn"));
				base.setSp_car_yn					(rs.getString("sp_car_yn")==null?"":rs.getString("sp_car_yn"));
				base.setAc_dae_yn					(rs.getString("ac_dae_yn")==null?"":rs.getString("ac_dae_yn"));
				base.setPro_yn						(rs.getString("pro_yn")==null?"":rs.getString("pro_yn"));
				base.setCyc_yn						(rs.getString("cyc_yn")==null?"":rs.getString("cyc_yn"));
				base.setMain_yn						(rs.getString("main_yn")==null?"":rs.getString("main_yn"));
				base.setMa_dae_yn					(rs.getString("ma_dae_yn")==null?"":rs.getString("ma_dae_yn"));
				base.setIp_insur					(rs.getString("ip_insur")==null?"":rs.getString("ip_insur"));
				base.setIp_agent					(rs.getString("ip_agent")==null?"":rs.getString("ip_agent"));
				base.setIp_dam						(rs.getString("ip_dam")==null?"":rs.getString("ip_dam"));
				base.setIp_tel						(rs.getString("ip_tel")==null?"":rs.getString("ip_tel"));
				base.setFin_seq						(rs.getString("fin_seq")==null?"":rs.getString("fin_seq"));
				base.setClient_guar_st				(rs.getString("client_guar_st")==null?"":rs.getString("client_guar_st").trim());
				base.setDec_etc						(rs.getString("dec_etc")==null?"":rs.getString("dec_etc"));
				base.setGuar_est_dt					(rs.getString("guar_est_dt")==null?"":rs.getString("guar_est_dt").trim());
				base.setGuar_etc					(rs.getString("guar_etc")==null?"":rs.getString("guar_etc"));
				base.setGuar_end_st					(rs.getString("guar_end_st")==null?"":rs.getString("guar_end_st"));
				base.setRent_suc_commi				(rs.getString("RENT_SUC_COMMI")==null? 0:Integer.parseInt(rs.getString("RENT_SUC_COMMI")));
				base.setRent_suc_dt					(rs.getString("RENT_SUC_DT")==null?"":rs.getString("RENT_SUC_DT").trim());
				base.setGrt_suc_m_id				(rs.getString("grt_suc_m_id")==null?"":rs.getString("grt_suc_m_id").trim());
				base.setGrt_suc_l_cd				(rs.getString("grt_suc_l_cd")==null?"":rs.getString("grt_suc_l_cd"));
				base.setGrt_suc_c_no				(rs.getString("grt_suc_c_no")==null?"":rs.getString("grt_suc_c_no"));
				base.setGrt_suc_o_amt				(rs.getString("grt_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("grt_suc_o_amt")));
				base.setGrt_suc_r_amt				(rs.getString("grt_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("grt_suc_r_amt")));
				base.setCar_deli_dt					(rs.getString("car_deli_dt")==null?"":rs.getString("car_deli_dt").trim());
				base.setRent_suc_grt_yn				(rs.getString("rent_suc_grt_yn")==null?"":rs.getString("rent_suc_grt_yn").trim());
				base.setRent_suc_m_id				(rs.getString("rent_suc_m_id")==null?"":rs.getString("rent_suc_m_id").trim());
				base.setRent_suc_l_cd				(rs.getString("rent_suc_l_cd")==null?"":rs.getString("rent_suc_l_cd"));
				base.setRent_suc_fee_tm				(rs.getString("rent_suc_fee_tm")==null?"":rs.getString("rent_suc_fee_tm"));
				base.setEst_area					(rs.getString("est_area")==null?"":rs.getString("est_area"));
				base.setCacdt_me_amt				(rs.getString("cacdt_me_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_me_amt")));
				base.setCacdt_memin_amt				(rs.getString("cacdt_memin_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_memin_amt")));
				base.setCacdt_mebase_amt			(rs.getString("cacdt_mebase_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_mebase_amt")));
				base.setRent_suc_commi_pay_st		(rs.getString("rent_suc_commi_pay_st")==null?"":rs.getString("rent_suc_commi_pay_st").trim());
				base.setRent_suc_fee_tm_b_dt		(rs.getString("rent_suc_fee_tm_b_dt")==null?"":rs.getString("rent_suc_fee_tm_b_dt"));
				base.setCar_cng_yn					(rs.getString("car_cng_yn")==null?"":rs.getString("car_cng_yn"));
				base.setCash_back_pay_dt			(rs.getString("cash_back_pay_dt")==null?"":rs.getString("cash_back_pay_dt"));
				base.setCash_back_pay_amt			(rs.getString("cash_back_pay_amt")==null? 0:Integer.parseInt(rs.getString("cash_back_pay_amt")));
				base.setCounty						(rs.getString("county")==null?"":rs.getString("county"));
				base.setSuc_rent_st					(rs.getString("suc_rent_st")==null?"":rs.getString("suc_rent_st"));
				base.setBlackbox_yn					(rs.getString("blackbox_yn")==null?"":rs.getString("blackbox_yn"));
				base.setRent_suc_exem_cau			(rs.getString("rent_suc_exem_cau")==null?"":rs.getString("rent_suc_exem_cau").trim());
				base.setRent_suc_exem_id			(rs.getString("rent_suc_exem_id")==null?"":rs.getString("rent_suc_exem_id").trim());
				base.setRent_suc_route				(rs.getString("rent_suc_route")==null?"":rs.getString("rent_suc_route").trim());
				base.setInsurant					(rs.getString("insurant")==null?"":rs.getString("insurant"));
				base.setRent_suc_dist				(rs.getString("RENT_SUC_DIST")==null? 0:Integer.parseInt(rs.getString("RENT_SUC_DIST")));
				base.setClient_share_st				(rs.getString("client_share_st")==null?"":rs.getString("client_share_st").trim());
				base.setCom_emp_yn			   		(rs.getString("com_emp_yn")==null?"":rs.getString("com_emp_yn").trim());
				base.setCom_emp_sac_id		    	(rs.getString("com_emp_sac_id")==null?"":rs.getString("com_emp_sac_id").trim());
				base.setCom_emp_sac_dt		    	(rs.getString("com_emp_sac_dt")==null?"":rs.getString("com_emp_sac_dt").trim());
				base.setSpe_est_id			   		(rs.getString("spe_est_id")==null?"":rs.getString("spe_est_id").trim());
				base.setLkas_yn			    		(rs.getString("lkas_yn")==null?"":rs.getString("lkas_yn").trim());
				base.setLdws_yn			   	 		(rs.getString("ldws_yn")==null?"":rs.getString("ldws_yn").trim());
				base.setAeb_yn			   			(rs.getString("aeb_yn")==null?"":rs.getString("aeb_yn").trim());
				base.setFcw_yn			    		(rs.getString("fcw_yn")==null?"":rs.getString("fcw_yn").trim());
				base.setGarnish_yn			    		(rs.getString("garnish_yn")==null?"":rs.getString("garnish_yn").trim());
				base.setHook_yn			    		(rs.getString("hook_yn")==null?"":rs.getString("hook_yn").trim());
				base.setLegal_yn			    		(rs.getString("legal_yn")==null?"":rs.getString("legal_yn").trim());
				base.setEv_yn			    		(rs.getString("ev_yn")==null?"":rs.getString("ev_yn").trim());
				base.setDlv_con_commi_yn	   		(rs.getString("dlv_con_commi_yn")==null?"":rs.getString("dlv_con_commi_yn").trim());
				base.setCar_use_addr	   			(rs.getString("car_use_addr")==null?"":rs.getString("car_use_addr").trim());	//차량이용지 주소 추가(2018.03.09) 
				base.setMng_type		    		(rs.getString("mng_type")==null?"":rs.getString("mng_type").trim());
				base.setCls_etc			    		(rs.getString("cls_etc")==null?"":rs.getString("cls_etc").trim());
				base.setIm_bank_pay_dt				(rs.getString("im_bank_pay_dt")==null?"":rs.getString("im_bank_pay_dt"));				
				base.setDir_pur_commi_yn			(rs.getString("dir_pur_commi_yn")==null?"":rs.getString("dir_pur_commi_yn"));
				base.setView_car_dc					(rs.getString("view_car_dc")==null? 0:Integer.parseInt(rs.getString("view_car_dc")));//20190911
				base.setOthers_device				(rs.getString("others_device")==null?"":rs.getString("others_device"));
				base.setSuc_rent_st					(rs.getString("suc_rent_st")==null?"":rs.getString("suc_rent_st"));
				base.setCar_deli_est_dt				(rs.getString("car_deli_est_dt")==null?"":rs.getString("car_deli_est_dt").trim());
				
				base.setRent_suc_pp_yn				(rs.getString("rent_suc_pp_yn")==null?"":rs.getString("rent_suc_pp_yn").trim());
				base.setPp_suc_o_amt				(rs.getString("pp_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("pp_suc_o_amt")));
				base.setPp_suc_r_amt				(rs.getString("pp_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("pp_suc_r_amt")));
				base.setRent_suc_ifee_yn			(rs.getString("rent_suc_ifee_yn")==null?"":rs.getString("rent_suc_ifee_yn").trim());
				base.setIfee_suc_o_amt				(rs.getString("ifee_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("ifee_suc_o_amt")));
				base.setIfee_suc_r_amt				(rs.getString("ifee_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("ifee_suc_r_amt")));
				base.setN_mon			    		(rs.getString("n_mon")==null?"":rs.getString("n_mon").trim());
				base.setN_day			    		(rs.getString("n_day")==null?"":rs.getString("n_day").trim());
				base.setTop_cng_yn		    		(rs.getString("top_cng_yn")==null?"":rs.getString("top_cng_yn").trim());
				
				
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEtc]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//대여 조회
	public Hashtable getFeeNew(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select * from fee where RENT_MNG_ID = ? and RENT_L_CD = ? and rent_st='1'";

		try{	
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		}catch (SQLException e){
			System.out.println("[AddContDatabase:getFeeNew]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();			
			return ht;
		}
	}

	//계약등록/수정 : 법인고객차량관리자 수정(car_mgr)
	public boolean updateCarMgrNew(CarMgrBean mgr)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_MGR set "+
						" MGR_ST	= rtrim(?), "+
						" MGR_NM	= ?, "+
						" MGR_DEPT	= ?, "+
						" MGR_TITLE = ?, "+
						" MGR_TEL	= ?, "+
						" MGR_M_TEL = ?, "+
						" MGR_EMAIL = ?, "+
						" MGR_ZIP	= ?, "+
						" MGR_ADDR	= ?, "+
						" USE_YN	= ?, "+
						" EMAIL_YN	= ?, "+
						" COM_NM	= ?, "+
						" LIC_NO	= ?, "+
						" LIC_ST	= ?, "+
						" SSN		= ?, "+
						" ETC		= ?, "+
						" LIC_RESULT= ?  "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and MGR_ID = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,	mgr.getMgr_st()		);
			pstmt.setString(2,	mgr.getMgr_nm()		);
			pstmt.setString(3,	mgr.getMgr_dept()	);
			pstmt.setString(4,	mgr.getMgr_title()	);
			pstmt.setString(5,	mgr.getMgr_tel()	);
			pstmt.setString(6,	mgr.getMgr_m_tel()	);
			pstmt.setString(7,	mgr.getMgr_email()	);
			pstmt.setString(8,	mgr.getMgr_zip()	);
			pstmt.setString(9,	mgr.getMgr_addr()	);
			pstmt.setString(10, mgr.getUse_yn()		);
			pstmt.setString(11, mgr.getEmail_yn()	);
			pstmt.setString(12, mgr.getCom_nm()		);
			pstmt.setString(13,	mgr.getLic_no()		);
			pstmt.setString(14,	mgr.getLic_st()		);
			pstmt.setString(15,	mgr.getSsn()		);
			pstmt.setString(16,	mgr.getEtc()		);
			pstmt.setString(17,	mgr.getLic_result()	);
		    pstmt.setString(18, mgr.getRent_mng_id());
			pstmt.setString(19, mgr.getRent_l_cd()	);
			pstmt.setString(20, mgr.getMgr_id()		);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateCarMgrNew]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약등록/수정 : 연대보증인 등록
	public boolean insertContGur(ContGurBean gur)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into CONT_GUR "+
						" (rent_mng_id, rent_l_cd, gur_id, gur_nm, gur_ssn, gur_zip, gur_addr, gur_tel, gur_rel) "+
						" VALUES"+
						" (?, ?, ?, ?, replace(?, '-', ''), ?, ?, ?, ?)";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
		    pstmt.setString(1,  gur.getRent_mng_id());
			pstmt.setString(2,  gur.getRent_l_cd()	);
			pstmt.setString(3,  gur.getGur_id()		);
			pstmt.setString(4,	gur.getGur_nm()		);
			pstmt.setString(5,	gur.getGur_ssn()	);
			pstmt.setString(6,	gur.getGur_zip()	);
			pstmt.setString(7,	gur.getGur_addr()	);
			pstmt.setString(8,	gur.getGur_tel()	);
			pstmt.setString(9,	gur.getGur_rel()	);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContGur]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약등록/수정 : 연대보증인 수정
	public boolean updateContGur(ContGurBean gur)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CONT_GUR set "+
						" GUR_NM	= ?, "+
						" GUR_SSN	= replace(?, '-', ''), "+
						" GUR_ZIP	= ?, "+
						" GUR_ADDR	= ?, "+
						" GUR_TEL	= ?, "+
						" GUR_REL	= ? "+
		" where RENT_MNG_ID = ? and RENT_L_CD = ? and GUR_ID = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,	gur.getGur_nm()		);
			pstmt.setString(2,	gur.getGur_ssn()	);
			pstmt.setString(3,	gur.getGur_zip()	);
			pstmt.setString(4,	gur.getGur_addr()	);
			pstmt.setString(5,	gur.getGur_tel()	);
			pstmt.setString(6,	gur.getGur_rel()	);
		    pstmt.setString(7,  gur.getRent_mng_id());
			pstmt.setString(8,  gur.getRent_l_cd()	);
			pstmt.setString(9,  gur.getGur_id()		);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContGur]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//연대보증인 조회
	public ContGurBean getContGur(String rent_mng_id, String rent_l_cd, String gur_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContGurBean base = new ContGurBean();
		String query = "";
		query = " select * from cont_gur where rent_mng_id=? and rent_l_cd=? and gur_id=?";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, gur_id);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setGur_id		(rs.getString("gur_id")==null?"":rs.getString("gur_id"));
				base.setGur_nm		(rs.getString("gur_nm")==null?"":rs.getString("gur_nm"));
				base.setGur_ssn		(rs.getString("gur_ssn")==null?"":rs.getString("gur_ssn"));
				base.setGur_zip		(rs.getString("gur_zip")==null?"":rs.getString("gur_zip"));
				base.setGur_addr	(rs.getString("gur_addr")==null?"":rs.getString("gur_addr"));
				base.setGur_tel		(rs.getString("gur_tel")==null?"":rs.getString("gur_tel"));
				base.setGur_rel		(rs.getString("gur_rel")==null?"":rs.getString("gur_rel"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContGur]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//연대보증인 리스트
	public Vector getContGurList(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select *"+
				" from cont_gur"+
				" where rent_mng_id =? and rent_l_cd =?";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContGurList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}
	
	//연대보증인 리스트
	public Vector getContGurList1(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
				
		query = " select  a.rent_mng_id, a.rent_l_cd , c.client_nm gur_nm, '대표' gur_rel, c.h_tel gur_tel , c.repre_zip gur_zip , c.repre_addr gur_addr "+
			     "	     from cont a, client c, cont_etc ce \n"+
			     "	     where a.client_id = c.client_id "+  
			     "	       and a.rent_mng_id = ce.rent_mng_id(+) and a.rent_l_cd = ce.rent_l_cd(+) and ce.client_guar_st = '1' "+
			   "           and  a.rent_mng_id =? and a.rent_l_cd =? \n "+
		 	     "	 union all     "+
			     "	 select  rent_mng_id, rent_l_cd, gur_nm, gur_rel, gur_tel, gur_zip, gur_addr "+
			     "	    from cont_gur"+
       			    "    where rent_mng_id =? and rent_l_cd =?  "; 
         
	
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, rent_mng_id);
			pstmt.setString(4, rent_l_cd);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContGurList1]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}
	
	//관계자 조회
	public Vector getSearchMgrList(String client_id, String swd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select '대표자' as mgr_st, '' com_nm, '' mgr_dept, client_nm as mgr_nm, '대표자' mgr_title, o_tel as mgr_tel, m_tel as mgr_m_tel, '' mgr_email, repre_zip as mgr_zip, repre_addr as mgr_addr, '-' car_no, '-' car_nm, decode(client_st,'1',repre_no, TEXT_DECRYPT(ssn, 'pw' )  ) as ssn, '' lic_no, '' etc "+
				" from client"+
				" where client_id='"+client_id+"'"+
				" union all "+				
				" select '세금계산서' as mgr_st, '' com_nm, con_agnt_dept as mgr_dept, con_agnt_nm as mgr_nm, con_agnt_title as mgr_title, con_agnt_o_tel as mgr_tel, con_agnt_m_tel as mgr_m_tel, con_agnt_email as mgr_email, '' as mgr_zip, '' as mgr_addr, '-' car_no, '-' car_nm, '' ssn, '' lic_no, '' etc "+
				" from client"+
				" where client_id='"+client_id+"'"+
				" union all "+				
				" select r_site||'-세금계산서' as mgr_st, '' com_nm, agnt_dept as mgr_dept, agnt_nm as mgr_nm, agnt_title as mgr_title, '' as mgr_tel, agnt_m_tel as mgr_m_tel, agnt_email as mgr_email, '' as mgr_zip, '' as mgr_addr, '-' car_no, '-' car_nm, TEXT_DECRYPT(enp_no, 'pw' ) as ssn, '' lic_no, '' etc "+
				" from client_site"+
				" where client_id='"+client_id+"' and agnt_nm is not null"+
				" union all "+				
				" select distinct a.mgr_st, a.com_nm, a.mgr_dept, a.mgr_nm, a.mgr_title, a.mgr_tel, a.mgr_m_tel, a.mgr_email, a.mgr_zip, a.mgr_addr, c.car_no, c.car_nm, a.ssn, a.lic_no, a.etc "+
				" from car_mgr a, cont b, car_reg c"+
				" where a.rent_l_cd=b.rent_l_cd and b.car_mng_id=c.car_mng_id(+) and a.mgr_nm is not null and b.client_id='"+client_id+"'";

		if(!swd.equals("")) query += " and a.mgr_nm like '%"+swd+"%'";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSearchMgrList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//연대보증인 조회
	public Vector getSearchGurList(String client_id, String swd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select distinct a.*, c.car_no, c.car_nm, decode(a.gur_ssn,'','',substr(a.gur_ssn,1,7)||'*******') ssn"+
				" from cont_gur a, cont b, car_reg c"+
				" where a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd "+
				" and a.gur_nm is not null and b.car_mng_id=c.car_mng_id(+) and b.client_id='"+client_id+"'";

		if(!swd.equals("")) query += " and a.gur_nm like '%"+swd+"%'";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSearchGurList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//기존고객에서 연대보증인 조회
	public Vector getSearchGurClientList(String client_id, String swd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select firm_nm, decode(client_st,'2', TEXT_DECRYPT(ssn, 'pw' ) ,enp_no) enp_no, o_zip, o_addr, o_tel, decode(client_st,'2',substr( TEXT_DECRYPT(ssn, 'pw' ),1,7)||'*******',enp_no) ssn "+
				" from   client "+
				" where  firm_nm||client_nm like '%"+swd+"%'";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSearchGurClientList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//스캔파일 조회
	public Vector getSearchScanList(String client_id, String file_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";


		query = " select b.*, a.rent_dt, a.car_st, a.bus_id, c.rent_start_dt, c.rent_end_dt, c.con_mon, d.car_no, d.car_nm, e.user_nm, "+
				"        decode(b.file_path,'','',substr(b.reg_dt,1,4)) file_path_y "+
				" from cont a, lc_scan b, fee c, car_reg d, users e"+
				" where a.client_id='"+client_id+"'"+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd"+
				" and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd and c.rent_st='1'"+
				" and a.car_mng_id=d.car_mng_id(+) and a.bus_id=e.user_id";

		if(!file_st.equals("")) query += " and b.file_st = '"+file_st+"'";

		query += " order by NVL(a.use_yn,'Y') DESC, b.reg_dt desc";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSearchScanList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//우편물주소검색
	public Vector getSearchPostList(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select '사업장주소' as addr_st, ho_zip as zip, ho_addr as addr"+
				" from client"+
				" where client_id='"+client_id+"'"+
				" union all "+				
				" select '본점소재지' as addr_st, o_zip as zip, o_addr as addr"+
				" from client"+
				" where client_id='"+client_id+"'"+
				" union all "+				
				" select '대표자주소' as addr_st, repre_zip as zip, repre_addr as addr"+
				" from client"+
				" where client_id='"+client_id+"'"+
				" union all "+				
				" select '직장주소' as addr_st, comm_zip as zip, comm_addr as addr"+
				" from client"+
				" where client_id='"+client_id+"'"+
				" union all "+				
				" select distinct  '우편물주소' addr_st, a.p_zip as zip, a.p_addr as addr"+
				" from cont a, car_reg b"+
				" where a.client_id='"+client_id+"' and a.car_mng_id=b.car_mng_id(+)";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSearchPostList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//자동이체 조회
	public Vector getSearchCmsList(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " SELECT a.rent_l_cd, a.rent_dt, b.cms_start_dt, b.cms_end_dt, b.cms_acc_no, b.cms_bank, b.cms_dep_nm, b.cms_day, b.bank_cd, b.cms_bk, \n"+
				"        b.cms_dep_ssn, b.cms_dep_post, b.cms_dep_addr, b.cms_tel, b.cms_m_tel, b.cms_email,  \n"+
				"        DECODE(LENGTH(REPLACE(REPLACE(b.cms_dep_ssn,'-',''),' ','')),13,SUBSTR(REPLACE(REPLACE(b.cms_dep_ssn,'-',''),' ',''),1,6),REPLACE(REPLACE(b.cms_dep_ssn,'-',''),' ','')) cms_dep_ssn2 "+
				" FROM   CONT a, CMS_MNG b  \n"+
				" WHERE  a.client_id='"+client_id+"'  \n"+
				"        AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd \n"+
				" ORDER BY b.cms_start_dt ";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSearchCmsList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//계약수정 : 차량정보 조회 (car_etc,car_nm,code)
	public ContCarBean getContCarNew(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCarBean car = new ContCarBean();
		String query = "";
		query = " select * from car_etc where RENT_MNG_ID = ? and RENT_L_CD = ? ";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				car.setRent_mng_id		(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				car.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				car.setCar_id			(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
				car.setColo				(rs.getString("COLO")==null?"":rs.getString("COLO"));
				car.setEx_gas			(rs.getString("EX_GAS")==null?"":rs.getString("EX_GAS"));
				car.setImm_amt			(rs.getString("IMM_AMT")==null?0:Integer.parseInt(rs.getString("IMM_AMT")));
				car.setOpt				(rs.getString("OPT")==null?"":rs.getString("OPT"));
				car.setLpg_yn			(rs.getString("LPG_YN")==null?"":rs.getString("LPG_YN"));
				car.setLpg_setter		(rs.getString("LPG_SETTER")==null?"":rs.getString("LPG_SETTER"));
				car.setLpg_price		(rs.getString("LPG_PRICE")==null?0:Integer.parseInt(rs.getString("LPG_PRICE")));
				car.setLpg_pay_dt		(rs.getString("LPG_PAY_DT")==null?"":rs.getString("LPG_PAY_DT"));
				car.setCar_cs_amt		(rs.getString("CAR_CS_AMT")==null?0:Integer.parseInt(rs.getString("CAR_CS_AMT")));
				car.setCar_cv_amt		(rs.getString("CAR_CV_AMT")==null?0:Integer.parseInt(rs.getString("CAR_CV_AMT")));
				car.setCar_fs_amt		(rs.getString("CAR_FS_AMT")==null?0:Integer.parseInt(rs.getString("CAR_FS_AMT")));
				car.setCar_fv_amt		(rs.getString("CAR_FV_AMT")==null?0:Integer.parseInt(rs.getString("CAR_FV_AMT")));
				car.setOpt_cs_amt		(rs.getString("OPT_CS_AMT")==null?0:Integer.parseInt(rs.getString("OPT_CS_AMT")));
				car.setOpt_cv_amt		(rs.getString("OPT_CV_AMT")==null?0:Integer.parseInt(rs.getString("OPT_CV_AMT")));
				car.setOpt_amt_m		(rs.getString("OPT_AMT_M")==null?0:Integer.parseInt(rs.getString("OPT_AMT_M")));
				car.setOpt_fs_amt		(rs.getString("OPT_FS_AMT")==null?0:Integer.parseInt(rs.getString("OPT_FS_AMT")));
				car.setOpt_fv_amt		(rs.getString("OPT_FV_AMT")==null?0:Integer.parseInt(rs.getString("OPT_FV_AMT")));
				car.setClr_cs_amt		(rs.getString("CLR_CS_AMT")==null?0:Integer.parseInt(rs.getString("CLR_CS_AMT")));
				car.setClr_cv_amt		(rs.getString("CLR_CV_AMT")==null?0:Integer.parseInt(rs.getString("CLR_CV_AMT")));
				car.setClr_fs_amt		(rs.getString("CLR_FS_AMT")==null?0:Integer.parseInt(rs.getString("CLR_FS_AMT")));
				car.setClr_fv_amt		(rs.getString("CLR_FV_AMT")==null?0:Integer.parseInt(rs.getString("CLR_FV_AMT")));
				car.setSd_cs_amt		(rs.getString("SD_CS_AMT")==null?0:Integer.parseInt(rs.getString("SD_CS_AMT")));
				car.setSd_cv_amt		(rs.getString("SD_CV_AMT")==null?0:Integer.parseInt(rs.getString("SD_CV_AMT")));
				car.setSd_fs_amt		(rs.getString("SD_FS_AMT")==null?0:Integer.parseInt(rs.getString("SD_FS_AMT")));
				car.setSd_fv_amt		(rs.getString("SD_FV_AMT")==null?0:Integer.parseInt(rs.getString("SD_FV_AMT")));
				car.setDc_cs_amt		(rs.getString("DC_CS_AMT")==null?0:Integer.parseInt(rs.getString("DC_CS_AMT")));
				car.setDc_cv_amt		(rs.getString("DC_CV_AMT")==null?0:Integer.parseInt(rs.getString("DC_CV_AMT")));
				car.setDc_fs_amt		(rs.getString("DC_FS_AMT")==null?0:Integer.parseInt(rs.getString("DC_FS_AMT")));
				car.setDc_fv_amt		(rs.getString("DC_FV_AMT")==null?0:Integer.parseInt(rs.getString("DC_FV_AMT")));
				car.setPurc_gu			(rs.getString("PURC_GU")==null?"":rs.getString("PURC_GU"));
				car.setCar_ext			(rs.getString("CAR_EXT")==null?"":rs.getString("CAR_EXT"));
				car.setBae4				(rs.getString("BAE4")==null?"":rs.getString("BAE4"));
				car.setGi_st			(rs.getString("GI_ST")==null?"":rs.getString("GI_ST"));
				car.setAdd_opt			(rs.getString("ADD_OPT")==null?"":rs.getString("ADD_OPT"));
				car.setOpt_code			(rs.getString("OPT_CODE")==null?"":rs.getString("OPT_CODE"));
				car.setCar_seq			(rs.getString("CAR_SEQ")==null?"":rs.getString("CAR_SEQ"));
				car.setReg_est_dt		(rs.getString("REG_EST_DT")==null?"":rs.getString("REG_EST_DT"));
				car.setSun_per			(rs.getString("SUN_PER")==null?0:Integer.parseInt(rs.getString("SUN_PER")));
				car.setExtra_set		(rs.getString("EXTRA_SET")==null?"":rs.getString("EXTRA_SET"));
				car.setRemark			(rs.getString("REMARK")==null?"":rs.getString("REMARK"));
				car.setS_dc1_re			(rs.getString("S_DC1_RE")==null?"":rs.getString("S_DC1_RE"));
				car.setS_dc1_yn			(rs.getString("S_DC1_YN")==null?"":rs.getString("S_DC1_YN"));
				car.setS_dc1_amt		(rs.getString("S_DC1_AMT")==null?0:Integer.parseInt(rs.getString("S_DC1_AMT")));
				car.setS_dc2_re			(rs.getString("S_DC2_RE")==null?"":rs.getString("S_DC2_RE"));    
				car.setS_dc2_yn			(rs.getString("S_DC2_YN")==null?"":rs.getString("S_DC2_YN"));    
				car.setS_dc2_amt		(rs.getString("S_DC2_AMT")==null?0:Integer.parseInt(rs.getString("S_DC2_AMT")));  
				car.setS_dc3_re			(rs.getString("S_DC3_RE")==null?"":rs.getString("S_DC3_RE"));    
				car.setS_dc3_yn			(rs.getString("S_DC3_YN")==null?"":rs.getString("S_DC3_YN"));    
				car.setS_dc3_amt		(rs.getString("S_DC3_AMT")==null?0:Integer.parseInt(rs.getString("S_DC3_AMT")));  
				car.setPay_st			(rs.getString("PAY_ST")==null?"":rs.getString("PAY_ST"));
				car.setSpe_tax			(rs.getString("SPE_TAX")==null?0:Integer.parseInt(rs.getString("SPE_TAX")));
				car.setEdu_tax			(rs.getString("EDU_TAX")==null?0:Integer.parseInt(rs.getString("EDU_TAX")));
				car.setCar_origin		(rs.getString("CAR_ORIGIN")==null?"":rs.getString("CAR_ORIGIN"));
				car.setSh_car_amt		(rs.getString("sh_car_amt")==null?0:Integer.parseInt(rs.getString("sh_car_amt")));
				car.setSh_year			(rs.getString("sh_year")==null?"":rs.getString("sh_year"));
				car.setSh_month			(rs.getString("sh_month")==null?"":rs.getString("sh_month"));
				car.setSh_day			(rs.getString("sh_day")==null?"":rs.getString("sh_day"));
				car.setSh_day_bas_dt	(rs.getString("sh_day_bas_dt")==null?"":rs.getString("sh_day_bas_dt"));
				car.setSh_amt			(rs.getString("sh_amt")==null?0:Integer.parseInt(rs.getString("sh_amt")));
				car.setSh_ja			(rs.getString("sh_ja")==null?0:AddUtil.parseFloat(rs.getString("sh_ja")));
				car.setSh_km			(rs.getString("sh_km")==null?0:Integer.parseInt(rs.getString("sh_km")));
				car.setSh_km_bas_dt		(rs.getString("sh_km_bas_dt")==null?"":rs.getString("sh_km_bas_dt"));
				car.setLpg_kit			(rs.getString("lpg_kit")==null?"":rs.getString("lpg_kit"));
				car.setAdd_opt_amt		(rs.getString("ADD_OPT_AMT")==null?0:Integer.parseInt(rs.getString("ADD_OPT_AMT")));	
				car.setS_dc1_re_etc		(rs.getString("S_DC1_RE_ETC")==null?"":rs.getString("S_DC1_RE_ETC"));
				car.setS_dc2_re_etc		(rs.getString("S_DC2_RE_ETC")==null?"":rs.getString("S_DC2_RE_ETC"));
				car.setS_dc3_re_etc		(rs.getString("S_DC3_RE_ETC")==null?"":rs.getString("S_DC3_RE_ETC"));
				car.setS_dc1_per		(rs.getString("S_DC1_PER")==null?0:AddUtil.parseFloat(rs.getString("S_DC1_PER")));
				car.setS_dc2_per		(rs.getString("S_DC2_PER")==null?0:AddUtil.parseFloat(rs.getString("S_DC2_PER")));
				car.setS_dc3_per		(rs.getString("S_DC3_PER")==null?0:AddUtil.parseFloat(rs.getString("S_DC3_PER")));
				car.setCar_amt_dt		(rs.getString("car_amt_dt")==null?"":rs.getString("car_amt_dt"));			
				car.setExtra_amt		(rs.getString("EXTRA_AMT")==null?0:Integer.parseInt(rs.getString("EXTRA_AMT")));	
				car.setIn_col			(rs.getString("in_col")==null?"":rs.getString("in_col"));
				car.setGarnish_col	(rs.getString("garnish_col")==null?"":rs.getString("garnish_col"));
				car.setHipass_yn		(rs.getString("hipass_yn")==null?"":rs.getString("hipass_yn"));
				car.setBluelink_yn		(rs.getString("bluelink_yn")==null?"":rs.getString("bluelink_yn"));
				car.setCar_tax_dt		(rs.getString("car_tax_dt")==null?"":rs.getString("car_tax_dt"));
				car.setImport_card_amt	(rs.getString("import_card_amt")==null?0:Integer.parseInt(rs.getString("import_card_amt")));
				car.setImport_cash_back	(rs.getString("import_cash_back")==null?0:Integer.parseInt(rs.getString("import_cash_back")));
				car.setImport_bank_amt	(rs.getString("import_bank_amt")==null?0:Integer.parseInt(rs.getString("import_bank_amt")));
				car.setR_import_cash_back(rs.getString("r_import_cash_back")==null?0:Integer.parseInt(rs.getString("r_import_cash_back")));
				car.setR_import_bank_amt(rs.getString("r_import_bank_amt")==null?0:Integer.parseInt(rs.getString("r_import_bank_amt")));
				car.setTint_b_yn		(rs.getString("tint_b_yn")==null?"":rs.getString("tint_b_yn"));
				car.setTint_s_yn		(rs.getString("tint_s_yn")==null?"":rs.getString("tint_s_yn"));
				car.setTint_ps_yn		(rs.getString("tint_ps_yn")==null?"":rs.getString("tint_ps_yn"));	// 고급 썬팅		2017.12.22
				car.setTint_ps_nm		(rs.getString("tint_ps_nm")==null?"":rs.getString("tint_ps_nm"));
				car.setTint_ps_amt		(rs.getString("tint_ps_amt")==null?0:Integer.parseInt(rs.getString("tint_ps_amt")));
				car.setTint_ps_st		(rs.getString("tint_ps_st")==null?"":rs.getString("tint_ps_st"));
				car.setTint_n_yn		(rs.getString("tint_n_yn")==null?"":rs.getString("tint_n_yn"));
				car.setTint_bn_yn		(rs.getString("tint_bn_yn")==null?"":rs.getString("tint_bn_yn"));
				car.setTint_bn_nm		(rs.getString("tint_bn_nm")==null?"":rs.getString("tint_bn_nm"));
				car.setTint_sn_yn		(rs.getString("tint_sn_yn")==null?"":rs.getString("tint_sn_yn"));
				car.setTint_s_per 		(rs.getString("tint_s_per")==null?0:Integer.parseInt(rs.getString("tint_s_per")));
				car.setNew_license_plate		(rs.getString("new_license_plate")==null?"":rs.getString("new_license_plate"));
				car.setTint_cons_yn		(rs.getString("tint_cons_yn")==null?"":rs.getString("tint_cons_yn"));
				car.setTint_cons_amt 		(rs.getString("tint_cons_amt")==null?0:Integer.parseInt(rs.getString("tint_cons_amt")));
				car.setServ_b_yn		(rs.getString("serv_b_yn")==null?"":rs.getString("serv_b_yn"));
				car.setServ_sc_yn		(rs.getString("serv_sc_yn")==null?"":rs.getString("serv_sc_yn"));
				car.setJg_opt_st		(rs.getString("jg_opt_st")==null?"":rs.getString("jg_opt_st"));
				car.setJg_col_st		(rs.getString("jg_col_st")==null?"":rs.getString("jg_col_st"));
				car.setTax_dc_s_amt		(rs.getString("tax_dc_s_amt")==null?0:Integer.parseInt(rs.getString("tax_dc_s_amt")));
				car.setTax_dc_v_amt	  	(rs.getString("tax_dc_v_amt")==null?0:Integer.parseInt(rs.getString("tax_dc_v_amt")));
				car.setEcar_pur_sub_amt	(rs.getString("ecar_pur_sub_amt")==null?0:Integer.parseInt(rs.getString("ecar_pur_sub_amt")));
				car.setEcar_pur_sub_st 	(rs.getString("ecar_pur_sub_st")==null?"":rs.getString("ecar_pur_sub_st"));
				car.setConti_rat        (rs.getString("conti_rat")==null?"":rs.getString("conti_rat"));
				car.setCommi_s_amt		(rs.getString("commi_s_amt")==null?0:Integer.parseInt(rs.getString("commi_s_amt")));
				car.setCommi_v_amt		(rs.getString("commi_v_amt")==null?0:Integer.parseInt(rs.getString("commi_v_amt")));
				car.setAccid_serv_amt	(rs.getString("accid_serv_amt")==null?0:Integer.parseInt(rs.getString("accid_serv_amt")));
				car.setSh_est_amt		(rs.getString("sh_est_amt")==null?0:Integer.parseInt(rs.getString("sh_est_amt")));
				car.setSh_init_reg_dt	(rs.getString("sh_init_reg_dt")==null?"":rs.getString("sh_init_reg_dt"));
				car.setAccid_serv_cont	(rs.getString("accid_serv_cont")==null?"":rs.getString("accid_serv_cont"));
				car.setJg_tuix_st		(rs.getString("jg_tuix_st")==null?"":rs.getString("jg_tuix_st"));
				car.setJg_tuix_opt_st	(rs.getString("jg_tuix_opt_st")==null?"":rs.getString("jg_tuix_opt_st"));
				car.setEco_e_tag		(rs.getString("eco_e_tag")==null?"":rs.getString("eco_e_tag"));
				car.setTint_eb_yn		(rs.getString("tint_eb_yn")==null?"":rs.getString("tint_eb_yn"));
				car.setStorage_s_amt	(rs.getString("storage_s_amt")==null?0:Integer.parseInt(rs.getString("storage_s_amt")));
				car.setStorage_v_amt	(rs.getString("storage_v_amt")==null?0:Integer.parseInt(rs.getString("storage_v_amt")));
				car.setVan_add_opt		(rs.getString("van_add_opt")==null?"":rs.getString("van_add_opt"));
			
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCarNew]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return car;
		}				
	}

	//최근 계약번호 조회
	public ContBaseBean getRecentCont(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContBaseBean base = new ContBaseBean();
		String query = "";
		
		query = " select RENT_MNG_ID, RENT_L_CD from ( " +
				" select RENT_MNG_ID, RENT_L_CD, rent_dt  from cont where client_id = ? and rent_st in ('1', '2', '3', '4', '5', '6', '7' ) order by rent_dt desc ) a where rownum = 1 " ;

		try{	
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);
		    rs = pstmt.executeQuery();
	    		if(rs.next())
			{
				base.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
			
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRecentCont]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}
	
	
		//계약등록/수정 : 고객신용평가 등록
	public boolean insertContEval(ContEvalBean eval)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into CONT_EVAL "+
						" (rent_mng_id, rent_l_cd, e_seq, eval_gu, eval_nm , eval_gr, eval_off, eval_s_dt, ass1_type, ass1_addr, ass1_zip, ass2_type, ass2_addr, ass2_zip, eval_b_dt, eval_score ) "+
						" values "+
						" (?, ?, ?, ?, ?, ?, ?, replace(?, '-', ''), ?, ?, ?, ?, ?, ?, replace(?, '-', ''), ? ) ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
		    pstmt.setString(1,  eval.getRent_mng_id());
			pstmt.setString(2,  eval.getRent_l_cd()	);
			pstmt.setString(3,  eval.getE_seq()		);
			pstmt.setString(4,	eval.getEval_gu()	);
			pstmt.setString(5,	eval.getEval_nm()	);
			pstmt.setString(6,	eval.getEval_gr()	);
			pstmt.setString(7,	eval.getEval_off()	);
			pstmt.setString(8,	eval.getEval_s_dt()	);
			pstmt.setString(9,	eval.getAss1_type()	);
			pstmt.setString(10,	eval.getAss1_addr()	);
			pstmt.setString(11,	eval.getAss1_zip()	);
			pstmt.setString(12,	eval.getAss2_type()	);
			pstmt.setString(13,	eval.getAss2_addr()	);
			pstmt.setString(14,	eval.getAss2_zip()	);
			pstmt.setString(15,	eval.getEval_b_dt()	);
			pstmt.setString(16,	eval.getEval_score()	);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContEval]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	


	//계약등록/수정 : 고객평가 수정
	public boolean updateContEval(ContEvalBean eval)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CONT_EVAL set "+
						" EVAL_GU	= ?, "+
						" EVAL_NM	= ?, "+
						" EVAL_GR	= ?, "+
						" EVAL_OFF	= ?, "+
						" EVAL_S_DT	= replace(?, '-', ''), "+
						" ASS1_TYPE	= ?, "+
						" ASS1_ADDR	= ?, "+
						" ASS1_ZIP	= ?, "+
						" ASS2_TYPE	= ?, "+
						" ASS2_ADDR	= ?, "+
						" ASS2_ZIP	= ?, "+
						" EVAL_B_DT	= replace(?, '-', ''), "+
						" EVAL_SCORE = ? "+
		" where RENT_MNG_ID = ? and RENT_L_CD = ? and E_SEQ = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,	eval.getEval_gu()	);
			pstmt.setString(2,	eval.getEval_nm()	);
			pstmt.setString(3,	eval.getEval_gr()	);
			pstmt.setString(4,	eval.getEval_off()	);
			pstmt.setString(5,	eval.getEval_s_dt()	);
			pstmt.setString(6,	eval.getAss1_type()	);
			pstmt.setString(7,	eval.getAss1_addr()	);
			pstmt.setString(8,	eval.getAss1_zip()	);
			pstmt.setString(9,	eval.getAss2_type()	);
			pstmt.setString(10,	eval.getAss2_addr()	);
			pstmt.setString(11,	eval.getAss2_zip()	);
			pstmt.setString(12,	eval.getEval_b_dt()	);
			pstmt.setString(13,	eval.getEval_score()	);
			pstmt.setString(14, eval.getRent_mng_id());
			pstmt.setString(15, eval.getRent_l_cd()	);
			pstmt.setString(16, eval.getE_seq()		);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContEval]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//고객평가 조회
	
	public String getNextEvalSeq(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String e_seq = "";
		String query = "";
		query = " select nvl(max(e_seq)+1,0) from cont_eval where rent_mng_id=? and rent_l_cd=?";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				e_seq = rs.getString(1);			
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getNextEvalSeq]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return e_seq;
		}
	}


	//고객평가 조회
	
	public ContEvalBean getContEval(String rent_mng_id, String rent_l_cd, String seq)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEvalBean base = new ContEvalBean();
		String query = "";
		query = " select * from cont_eval where rent_mng_id=? and rent_l_cd=? and e_seq =?";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, seq);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setE_seq		(rs.getString("E_SEQ")==null?"":rs.getString("E_SEQ"));
				base.setEval_gu		(rs.getString("EVAL_GU")==null?"":rs.getString("EVAL_GU"));
				base.setEval_nm		(rs.getString("EVAL_NM")==null?"":rs.getString("EVAL_NM"));
				base.setEval_gr		(rs.getString("EVAL_GR")==null?"":rs.getString("EVAL_GR"));
				base.setEval_off	(rs.getString("EVAL_OFF")==null?"":rs.getString("EVAL_OFF"));
				base.setEval_s_dt	(rs.getString("EVAL_NM")==null?"":rs.getString("EVAL_NM"));
				base.setAss1_type	(rs.getString("ASS1_TYPE")==null?"":rs.getString("ASS1_TYPE"));
				base.setAss1_addr	(rs.getString("ASS1_ADDR")==null?"":rs.getString("ASS1_ADDR"));
				base.setAss1_zip	(rs.getString("ASS1_ZIP")==null?"":rs.getString("ASS1_ZIP"));
				base.setAss2_type	(rs.getString("ASS2_TYPE")==null?"":rs.getString("ASS2_TYPE"));
				base.setAss2_addr	(rs.getString("ASS2_ADDR")==null?"":rs.getString("ASS2_ADDR"));
				base.setAss2_zip	(rs.getString("ASS2_ZIP")==null?"":rs.getString("ASS2_ZIP"));
				base.setEval_b_dt	(rs.getString("EVAL_B_DT")==null?"":rs.getString("EVAL_B_DT"));				
			
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEval]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}
	
	//고객평가 조회
	
	public ContEvalBean getContEval(String rent_mng_id, String rent_l_cd, String eval_gu, String eval_nm)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEvalBean base = new ContEvalBean();
		String query = "";

		query = " select * from cont_eval where rent_mng_id=? and rent_l_cd=? and eval_gu =?";
		
		
		if(!eval_nm.equals("")) query += " and eval_nm ='"+eval_nm+"'";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, eval_gu);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setE_seq		(rs.getString("E_SEQ")==null?"":rs.getString("E_SEQ"));
				base.setEval_gu		(rs.getString("EVAL_GU")==null?"":rs.getString("EVAL_GU"));
				base.setEval_nm		(rs.getString("EVAL_NM")==null?"":rs.getString("EVAL_NM"));
				base.setEval_gr		(rs.getString("EVAL_GR")==null?"":rs.getString("EVAL_GR"));
				base.setEval_off	(rs.getString("EVAL_OFF")==null?"":rs.getString("EVAL_OFF").trim());
				base.setEval_s_dt	(rs.getString("EVAL_S_DT")==null?"":rs.getString("EVAL_S_DT"));
				base.setEval_score	(rs.getString("EVAL_SCORE")==null?"":rs.getString("EVAL_SCORE"));
				base.setAss1_type	(rs.getString("ASS1_TYPE")==null?"":rs.getString("ASS1_TYPE"));
				base.setAss1_addr	(rs.getString("ASS1_ADDR")==null?"":rs.getString("ASS1_ADDR"));
				base.setAss1_zip	(rs.getString("ASS1_ZIP")==null?"":rs.getString("ASS1_ZIP"));
				base.setAss2_type	(rs.getString("ASS2_TYPE")==null?"":rs.getString("ASS2_TYPE"));
				base.setAss2_addr	(rs.getString("ASS2_ADDR")==null?"":rs.getString("ASS2_ADDR"));
				base.setAss2_zip	(rs.getString("ASS2_ZIP")==null?"":rs.getString("ASS2_ZIP"));	
				base.setEval_b_dt	(rs.getString("EVAL_B_DT")==null?"":rs.getString("EVAL_B_DT"));				
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEval]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//고객평가 조회-고객별 최종평가분
	
	public ContEvalBean getContEval(String client_id, String eval_nm)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEvalBean base = new ContEvalBean();
		String query = "";
		
		query = " select a.*, b.client_id from cont_eval a, cont b where a.rent_l_cd=b.rent_l_cd and b.client_id=? and a.eval_nm=? "+
		        " and (a.eval_s_dt, a.rent_mng_id) in (select max(a.eval_s_dt), max(a.rent_mng_id) from cont_eval a, cont b where a.rent_l_cd=b.rent_l_cd and b.client_id=? and a.eval_nm=?)";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);
			pstmt.setString(2, eval_nm);
			pstmt.setString(3, client_id);
			pstmt.setString(4, eval_nm);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setE_seq		(rs.getString("E_SEQ")==null?"":rs.getString("E_SEQ"));
				base.setEval_gu		(rs.getString("EVAL_GU")==null?"":rs.getString("EVAL_GU"));
				base.setEval_nm		(rs.getString("EVAL_NM")==null?"":rs.getString("EVAL_NM"));
				base.setEval_gr		(rs.getString("EVAL_GR")==null?"":rs.getString("EVAL_GR"));
				base.setEval_off	(rs.getString("EVAL_OFF")==null?"":rs.getString("EVAL_OFF").trim());
				base.setEval_s_dt	(rs.getString("EVAL_S_DT")==null?"":rs.getString("EVAL_S_DT"));
				base.setAss1_type	(rs.getString("ASS1_TYPE")==null?"":rs.getString("ASS1_TYPE"));
				base.setAss1_addr	(rs.getString("ASS1_ADDR")==null?"":rs.getString("ASS1_ADDR"));
				base.setAss1_zip	(rs.getString("ASS1_ZIP")==null?"":rs.getString("ASS1_ZIP"));
				base.setAss2_type	(rs.getString("ASS2_TYPE")==null?"":rs.getString("ASS2_TYPE"));
				base.setAss2_addr	(rs.getString("ASS2_ADDR")==null?"":rs.getString("ASS2_ADDR"));
				base.setAss2_zip	(rs.getString("ASS2_ZIP")==null?"":rs.getString("ASS2_ZIP"));
				base.setEval_b_dt	(rs.getString("EVAL_B_DT")==null?"":rs.getString("EVAL_B_DT"));				
			
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEval]\n"+e);
			System.out.println("[AddContDatabase:getContEval]\n"+query);
			System.out.println("[AddContDatabase:getContEval]\n"+client_id);
			System.out.println("[AddContDatabase:getContEval]\n"+eval_nm);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}
	
	//고객평가 조회-고객별 최종평가분
	
	public ContEvalBean getContEvalOff(String client_id, String eval_nm, String eval_off)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEvalBean base = new ContEvalBean();
		String query = "";
		
		query = " select a.*, b.client_id from cont_eval a, cont b where a.rent_l_cd=b.rent_l_cd and b.client_id=? and a.eval_nm=? and a.eval_off=? "+
		        " and (a.eval_s_dt, a.rent_mng_id) in (select max(a.eval_s_dt), max(a.rent_mng_id) from cont_eval a, cont b where a.rent_l_cd=b.rent_l_cd and b.client_id=? and a.eval_nm=? and a.eval_off=?)";
		
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);
			pstmt.setString(2, eval_nm);
			pstmt.setString(3, eval_off);
			pstmt.setString(4, client_id);
			pstmt.setString(5, eval_nm);
			pstmt.setString(6, eval_off);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setE_seq		(rs.getString("E_SEQ")==null?"":rs.getString("E_SEQ"));
				base.setEval_gu		(rs.getString("EVAL_GU")==null?"":rs.getString("EVAL_GU"));
				base.setEval_nm		(rs.getString("EVAL_NM")==null?"":rs.getString("EVAL_NM"));
				base.setEval_score		(rs.getString("EVAL_SCORE")==null?"":rs.getString("EVAL_SCORE"));
				base.setEval_gr		(rs.getString("EVAL_GR")==null?"":rs.getString("EVAL_GR"));
				base.setEval_off	(rs.getString("EVAL_OFF")==null?"":rs.getString("EVAL_OFF").trim());
				base.setEval_s_dt	(rs.getString("EVAL_S_DT")==null?"":rs.getString("EVAL_S_DT"));
				base.setAss1_type	(rs.getString("ASS1_TYPE")==null?"":rs.getString("ASS1_TYPE"));
				base.setAss1_addr	(rs.getString("ASS1_ADDR")==null?"":rs.getString("ASS1_ADDR"));
				base.setAss1_zip	(rs.getString("ASS1_ZIP")==null?"":rs.getString("ASS1_ZIP"));
				base.setAss2_type	(rs.getString("ASS2_TYPE")==null?"":rs.getString("ASS2_TYPE"));
				base.setAss2_addr	(rs.getString("ASS2_ADDR")==null?"":rs.getString("ASS2_ADDR"));
				base.setAss2_zip	(rs.getString("ASS2_ZIP")==null?"":rs.getString("ASS2_ZIP"));
				base.setEval_b_dt	(rs.getString("EVAL_B_DT")==null?"":rs.getString("EVAL_B_DT"));				
			
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEvalOff]\n"+e);
			System.out.println("[AddContDatabase:getContEval]\n"+query);
			System.out.println("[AddContDatabase:getContEval]\n"+client_id);
			System.out.println("[AddContDatabase:getContEval]\n"+eval_nm);
			System.out.println("[AddContDatabase:getContEval]\n"+eval_off);
			
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}
	
	//고객신용등급판정 조회-고객별 최종평가분
	
	public ContEtcBean getContEtc(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEtcBean base = new ContEtcBean();
		String query = "";
		String a_table = "";
		String b_table = "";

		a_table = " select a.*, b.client_id from cont_etc a, cont b where a.rent_l_cd=b.rent_l_cd";

		b_table = " select b.client_id, max(dec_f_dt) dec_f_dt from cont_etc a, cont b where a.rent_l_cd=b.rent_l_cd and b.client_id=? group by b.client_id";

		query = " select a.* from ("+a_table+") a, ("+b_table+") b where a.client_id=b.client_id and a.dec_f_dt=b.dec_f_dt";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id					(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd					(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setMng_br_id					(rs.getString("mng_br_id")==null?"":rs.getString("mng_br_id"));
				base.setBus_agnt_id					(rs.getString("bus_agnt_id")==null?"":rs.getString("bus_agnt_id"));
				base.setRec_st						(rs.getString("rec_st")==null?"":rs.getString("rec_st"));
				base.setEle_tax_st					(rs.getString("ele_tax_st")==null?"":rs.getString("ele_tax_st"));
				base.setTax_extra					(rs.getString("tax_extra")==null?"":rs.getString("tax_extra"));
				base.setSanction_st					(rs.getString("sanction_st")==null?"":rs.getString("sanction_st"));
				base.setGuar_st						(rs.getString("guar_st")==null?"":rs.getString("guar_st").trim());
				base.setGuar_con					(rs.getString("guar_con")==null?"":rs.getString("guar_con"));
				base.setGuar_sac_id					(rs.getString("guar_sac_id")==null?"":rs.getString("guar_sac_id"));
				base.setDec_gr						(rs.getString("dec_gr")==null?"":rs.getString("dec_gr"));
				base.setDec_f_id					(rs.getString("dec_f_id")==null?"":rs.getString("dec_f_id"));
				base.setDec_f_dt					(rs.getString("dec_f_dt")==null?"":rs.getString("dec_f_dt"));
				base.setDec_l_id					(rs.getString("dec_l_id")==null?"":rs.getString("dec_l_id"));
				base.setDec_l_dt					(rs.getString("dec_l_dt")==null?"":rs.getString("dec_l_dt"));
				base.setInsur_per					(rs.getString("insur_per")==null?"":rs.getString("insur_per"));
				base.setCanoisr_yn					(rs.getString("canoisr_yn")==null?"":rs.getString("canoisr_yn"));
				base.setCacdt_yn					(rs.getString("cacdt_yn")==null?"":rs.getString("cacdt_yn"));
				base.setEme_yn						(rs.getString("eme_yn")==null?"":rs.getString("eme_yn"));
				base.setJa_reason					(rs.getString("ja_reason")==null?"":rs.getString("ja_reason"));
				base.setRea_appr_id					(rs.getString("rea_appr_id")==null?"":rs.getString("rea_appr_id"));
				base.setAir_ds_yn					(rs.getString("air_ds_yn")==null?"":rs.getString("air_ds_yn"));
				base.setAir_as_yn					(rs.getString("air_as_yn")==null?"":rs.getString("air_as_yn"));
				base.setAir_cu_yn					(rs.getString("air_cu_yn")==null?"":rs.getString("air_cu_yn"));
				base.setAuto_yn						(rs.getString("auto_yn")==null?"":rs.getString("auto_yn"));
				base.setAbs_yn						(rs.getString("abs_yn")==null?"":rs.getString("abs_yn"));
				base.setRob_yn						(rs.getString("rob_yn")==null?"":rs.getString("rob_yn"));
				base.setSp_car_yn					(rs.getString("sp_car_yn")==null?"":rs.getString("sp_car_yn"));
				base.setAc_dae_yn					(rs.getString("ac_dae_yn")==null?"":rs.getString("ac_dae_yn"));
				base.setPro_yn						(rs.getString("pro_yn")==null?"":rs.getString("pro_yn"));
				base.setCyc_yn						(rs.getString("cyc_yn")==null?"":rs.getString("cyc_yn"));
				base.setMain_yn						(rs.getString("main_yn")==null?"":rs.getString("main_yn"));
				base.setMa_dae_yn					(rs.getString("ma_dae_yn")==null?"":rs.getString("ma_dae_yn"));
				base.setIp_insur					(rs.getString("ip_insur")==null?"":rs.getString("ip_insur"));
				base.setIp_agent					(rs.getString("ip_agent")==null?"":rs.getString("ip_agent"));
				base.setIp_dam						(rs.getString("ip_dam")==null?"":rs.getString("ip_dam"));
				base.setIp_tel						(rs.getString("ip_tel")==null?"":rs.getString("ip_tel"));
				base.setFin_seq						(rs.getString("fin_seq")==null?"":rs.getString("fin_seq"));
				base.setClient_guar_st				(rs.getString("client_guar_st")==null?"":rs.getString("client_guar_st").trim());
				base.setDec_etc						(rs.getString("dec_etc")==null?"":rs.getString("dec_etc"));
				base.setGuar_est_dt					(rs.getString("guar_est_dt")==null?"":rs.getString("guar_est_dt").trim());
				base.setGuar_etc					(rs.getString("guar_etc")==null?"":rs.getString("guar_etc"));
				base.setGuar_end_st					(rs.getString("guar_end_st")==null?"":rs.getString("guar_end_st"));
				base.setRent_suc_commi				(rs.getString("RENT_SUC_COMMI")==null? 0:Integer.parseInt(rs.getString("RENT_SUC_COMMI")));
				base.setRent_suc_dt					(rs.getString("RENT_SUC_DT")==null?"":rs.getString("RENT_SUC_DT").trim());
				base.setGrt_suc_m_id				(rs.getString("grt_suc_m_id")==null?"":rs.getString("grt_suc_m_id").trim());
				base.setGrt_suc_l_cd				(rs.getString("grt_suc_l_cd")==null?"":rs.getString("grt_suc_l_cd"));
				base.setGrt_suc_c_no				(rs.getString("grt_suc_c_no")==null?"":rs.getString("grt_suc_c_no"));
				base.setGrt_suc_o_amt				(rs.getString("grt_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("grt_suc_o_amt")));
				base.setGrt_suc_r_amt				(rs.getString("grt_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("grt_suc_r_amt")));
				base.setCar_deli_dt					(rs.getString("car_deli_dt")==null?"":rs.getString("car_deli_dt").trim());
				base.setRent_suc_grt_yn				(rs.getString("rent_suc_grt_yn")==null?"":rs.getString("rent_suc_grt_yn").trim());
				base.setRent_suc_m_id				(rs.getString("rent_suc_m_id")==null?"":rs.getString("rent_suc_m_id").trim());
				base.setRent_suc_l_cd				(rs.getString("rent_suc_l_cd")==null?"":rs.getString("rent_suc_l_cd"));
				base.setRent_suc_fee_tm				(rs.getString("rent_suc_fee_tm")==null?"":rs.getString("rent_suc_fee_tm"));
				base.setEst_area					(rs.getString("est_area")==null?"":rs.getString("est_area"));
				base.setCacdt_me_amt				(rs.getString("cacdt_me_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_me_amt")));
				base.setCacdt_memin_amt				(rs.getString("cacdt_memin_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_memin_amt")));
				base.setCacdt_mebase_amt			(rs.getString("cacdt_mebase_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_mebase_amt")));
				base.setRent_suc_commi_pay_st		(rs.getString("rent_suc_commi_pay_st")==null?"":rs.getString("rent_suc_commi_pay_st").trim());
				base.setRent_suc_fee_tm_b_dt		(rs.getString("rent_suc_fee_tm_b_dt")==null?"":rs.getString("rent_suc_fee_tm_b_dt"));
				base.setCar_cng_yn					(rs.getString("car_cng_yn")==null?"":rs.getString("car_cng_yn"));
				base.setCash_back_pay_dt			(rs.getString("cash_back_pay_dt")==null?"":rs.getString("cash_back_pay_dt"));
				base.setCash_back_pay_amt			(rs.getString("cash_back_pay_amt")==null? 0:Integer.parseInt(rs.getString("cash_back_pay_amt")));
				base.setCounty						(rs.getString("county")==null?"":rs.getString("county"));
				base.setSuc_rent_st					(rs.getString("suc_rent_st")==null?"":rs.getString("suc_rent_st"));
				base.setBlackbox_yn					(rs.getString("blackbox_yn")==null?"":rs.getString("blackbox_yn"));
				base.setRent_suc_exem_cau			(rs.getString("rent_suc_exem_cau")==null?"":rs.getString("rent_suc_exem_cau").trim());
				base.setRent_suc_exem_id			(rs.getString("rent_suc_exem_id")==null?"":rs.getString("rent_suc_exem_id").trim());
				base.setRent_suc_route				(rs.getString("rent_suc_route")==null?"":rs.getString("rent_suc_route").trim());
				base.setInsurant					(rs.getString("insurant")==null?"":rs.getString("insurant"));
				base.setRent_suc_dist				(rs.getString("RENT_SUC_DIST")==null? 0:Integer.parseInt(rs.getString("RENT_SUC_DIST")));
				base.setClient_share_st				(rs.getString("client_share_st")==null?"":rs.getString("client_share_st").trim());
				base.setCom_emp_yn			   		(rs.getString("com_emp_yn")==null?"":rs.getString("com_emp_yn").trim());
				base.setCom_emp_sac_id		    	(rs.getString("com_emp_sac_id")==null?"":rs.getString("com_emp_sac_id").trim());
				base.setCom_emp_sac_dt		    	(rs.getString("com_emp_sac_dt")==null?"":rs.getString("com_emp_sac_dt").trim());
				base.setSpe_est_id			   		(rs.getString("spe_est_id")==null?"":rs.getString("spe_est_id").trim());
				base.setLkas_yn			    		(rs.getString("lkas_yn")==null?"":rs.getString("lkas_yn").trim());
				base.setLdws_yn			   	 		(rs.getString("ldws_yn")==null?"":rs.getString("ldws_yn").trim());
				base.setAeb_yn			   			(rs.getString("aeb_yn")==null?"":rs.getString("aeb_yn").trim());
				base.setFcw_yn			    		(rs.getString("fcw_yn")==null?"":rs.getString("fcw_yn").trim());
				base.setGarnish_yn			    		(rs.getString("garnish_yn")==null?"":rs.getString("garnish_yn").trim());
				base.setHook_yn			    		(rs.getString("hook_yn")==null?"":rs.getString("hook_yn").trim());
				base.setLegal_yn			    		(rs.getString("legal_yn")==null?"":rs.getString("legal_yn").trim());
				base.setEv_yn			    		(rs.getString("ev_yn")==null?"":rs.getString("ev_yn").trim());
				base.setDlv_con_commi_yn	   		(rs.getString("dlv_con_commi_yn")==null?"":rs.getString("dlv_con_commi_yn").trim());
				base.setCar_use_addr	   			(rs.getString("car_use_addr")==null?"":rs.getString("car_use_addr").trim());	//차량이용지 주소 추가(2018.03.09) 
				base.setMng_type		    		(rs.getString("mng_type")==null?"":rs.getString("mng_type").trim());
				base.setCls_etc			    		(rs.getString("cls_etc")==null?"":rs.getString("cls_etc").trim());
				base.setIm_bank_pay_dt				(rs.getString("im_bank_pay_dt")==null?"":rs.getString("im_bank_pay_dt"));				
				base.setDir_pur_commi_yn			(rs.getString("dir_pur_commi_yn")==null?"":rs.getString("dir_pur_commi_yn"));
				base.setView_car_dc					(rs.getString("view_car_dc")==null? 0:Integer.parseInt(rs.getString("view_car_dc")));//20190911
				base.setOthers_device				(rs.getString("others_device")==null?"":rs.getString("others_device"));
				base.setCar_deli_est_dt				(rs.getString("car_deli_est_dt")==null?"":rs.getString("car_deli_est_dt").trim());

				base.setRent_suc_pp_yn				(rs.getString("rent_suc_pp_yn")==null?"":rs.getString("rent_suc_pp_yn").trim());
				base.setPp_suc_o_amt				(rs.getString("pp_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("pp_suc_o_amt")));
				base.setPp_suc_r_amt				(rs.getString("pp_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("pp_suc_r_amt")));
				base.setRent_suc_ifee_yn			(rs.getString("rent_suc_ifee_yn")==null?"":rs.getString("rent_suc_ifee_yn").trim());
				base.setIfee_suc_o_amt				(rs.getString("ifee_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("ifee_suc_o_amt")));
				base.setIfee_suc_r_amt				(rs.getString("ifee_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("ifee_suc_r_amt")));
				base.setN_mon			    		(rs.getString("n_mon")==null?"":rs.getString("n_mon").trim());
				base.setN_day			    		(rs.getString("n_day")==null?"":rs.getString("n_day").trim());
				
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEtc]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//고객신용평가 리스트
	public Vector getContEvalList(String rent_mng_id, String rent_l_cd, String eval_gu)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select rent_mng_id, rent_l_cd, e_seq, eval_gu, eval_nm, eval_gr, eval_score, eval_off, " +
		        " decode(eval_s_dt, '', '', substr(eval_s_dt, 1, 4) || '-' || substr(eval_s_dt, 5, 2) || '-'||substr(eval_s_dt, 7, 2)) eval_s_dt, "+
		        " decode(eval_b_dt, '', '', substr(eval_b_dt, 1, 4) || '-' || substr(eval_b_dt, 5, 2) || '-'||substr(eval_b_dt, 7, 2)) eval_b_dt, "+
				" ass1_type, ass1_addr, ass1_zip, ass2_type, ass2_addr, ass2_zip "+
				" from cont_eval " +
				" where rent_mng_id=? and rent_l_cd=?";

		if(!eval_gu.equals("")) query += " and eval_gu='"+eval_gu+"'";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEvalList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//계약수정 : 이행보증보험 조회 
	public ContGiInsBean getContGiInsNew(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContGiInsBean gins = new ContGiInsBean();
		String query = "";
		query = " select * from gua_ins where RENT_MNG_ID=? and RENT_L_CD=?";
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				gins.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				gins.setRent_l_cd	(rs.getString("RENT_L_CD")	==null?"":rs.getString("RENT_L_CD"));
				gins.setGi_no		(rs.getString("GI_NO")		==null?"":rs.getString("GI_NO"));
				gins.setGi_amt		(rs.getString("GI_AMT")		==null? 0:Integer.parseInt(rs.getString("GI_AMT")));
				gins.setGi_fee		(rs.getString("GI_FEE")		==null? 0:Integer.parseInt(rs.getString("GI_FEE")));
				gins.setGi_start_dt	(rs.getString("GI_START_DT")==null?"":rs.getString("GI_START_DT"));
				gins.setGi_end_dt	(rs.getString("GI_END_DT")	==null?"":rs.getString("GI_END_DT"));
				gins.setGi_day		(rs.getString("GI_DAY")		==null?"":rs.getString("GI_DAY"));
				gins.setGi_dt		(rs.getString("GI_DT")		==null?"":rs.getString("GI_DT"));
				gins.setGi_reason	(rs.getString("GI_REASON")	==null?"":rs.getString("GI_REASON"));
				gins.setGi_sac_id	(rs.getString("GI_SAC_ID")	==null?"":rs.getString("GI_SAC_ID"));
				gins.setGi_jijum 	(rs.getString("GI_JIJUM")	==null?"":rs.getString("GI_JIJUM"));
				gins.setGi_est_dt 	(rs.getString("GI_EST_DT")	==null?"":rs.getString("GI_EST_DT"));
				gins.setGi_etc 	    (rs.getString("GI_ETC")		==null?"":rs.getString("GI_ETC"));
				gins.setRent_st	    (rs.getString("RENT_ST")	==null?"1":rs.getString("RENT_ST"));
				gins.setGi_month    (rs.getString("GI_MONTH")	==null?"":rs.getString("GI_MONTH"));	//보증보험 가입기간(개월수) (2018.03.16)

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContGiInsNew]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return gins;
		}				
	}

	//계약수정 : 이행보증보험 조회 
	public ContGiInsBean getContGiInsNew(String mng_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContGiInsBean gins = new ContGiInsBean();
		String query = "";
		query = " select * from gua_ins where RENT_MNG_ID=? and RENT_L_CD=? and RENT_ST=?";
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_st);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				gins.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				gins.setRent_l_cd	(rs.getString("RENT_L_CD")	==null?"":rs.getString("RENT_L_CD"));
				gins.setGi_no		(rs.getString("GI_NO")		==null?"":rs.getString("GI_NO"));
				gins.setGi_amt		(rs.getString("GI_AMT")		==null? 0:Integer.parseInt(rs.getString("GI_AMT")));
				gins.setGi_fee		(rs.getString("GI_FEE")		==null? 0:Integer.parseInt(rs.getString("GI_FEE")));
				gins.setGi_start_dt	(rs.getString("GI_START_DT")==null?"":rs.getString("GI_START_DT"));
				gins.setGi_end_dt	(rs.getString("GI_END_DT")	==null?"":rs.getString("GI_END_DT"));
				gins.setGi_day		(rs.getString("GI_DAY")		==null?"":rs.getString("GI_DAY"));
				gins.setGi_dt		(rs.getString("GI_DT")		==null?"":rs.getString("GI_DT"));
				gins.setGi_reason	(rs.getString("GI_REASON")	==null?"":rs.getString("GI_REASON"));
				gins.setGi_sac_id	(rs.getString("GI_SAC_ID")	==null?"":rs.getString("GI_SAC_ID"));
				gins.setGi_jijum 	(rs.getString("GI_JIJUM")	==null?"":rs.getString("GI_JIJUM"));
				gins.setGi_est_dt 	(rs.getString("GI_EST_DT")	==null?"":rs.getString("GI_EST_DT"));
				gins.setGi_etc 	    (rs.getString("GI_ETC")		==null?"":rs.getString("GI_ETC"));
				gins.setRent_st	    (rs.getString("RENT_ST")	==null?"1":rs.getString("RENT_ST"));
				gins.setGi_st	    (rs.getString("GI_ST")		==null?"":rs.getString("GI_ST"));
				gins.setGi_month    (rs.getString("GI_MONTH")	==null?"":rs.getString("GI_MONTH"));		//보증보험 가입기간(개월수) (2018.03.16)

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContGiInsNew]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return gins;
		}				
	}

	//계약수정 : 이행보증보험 조회 
	public int getGinCnt(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int count = 0;
		String query = "";

		query = " select count(*) cnt from gua_ins where RENT_MNG_ID=? and RENT_L_CD=?";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				count = rs.getInt("cnt");
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getGinCnt]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return count;
		}				
	}

	//계약수정 : 대여사항 조회 (fee)
	public ContFeeBean getContFeeNew(String mng_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContFeeBean fee = new ContFeeBean();
		String query = "";
		if(rent_st.equals("")) rent_st = "1";
		if(rent_st.equals("all")) rent_st = "1";

		query = " select * from FEE where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ?";

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_st);
	    	rs = pstmt.executeQuery();  
	    					
			while(rs.next())
			{
				fee.setRent_mng_id		(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				fee.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				fee.setRent_st			(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				fee.setRent_way			(rs.getString("RENT_WAY")==null?"":rs.getString("RENT_WAY"));
				fee.setCar_st			(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				fee.setCon_mon			(rs.getString("CON_MON")==null?"":rs.getString("CON_MON"));
				fee.setRent_dt			(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT").trim());
				fee.setRent_start_dt	(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				fee.setRent_end_dt		(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				fee.setPrv_dlv_yn		(rs.getString("PRV_DLV_YN")==null?"":rs.getString("PRV_DLV_YN"));
				fee.setPrv_car_mng_id	(rs.getString("PRV_CAR_MNG_ID")==null?"":rs.getString("PRV_CAR_MNG_ID"));
				fee.setPrv_start_dt		(rs.getString("PRV_START_DT")==null?"":rs.getString("PRV_START_DT"));
				fee.setPrv_end_dt		(rs.getString("PRV_END_DT")==null?"":rs.getString("PRV_END_DT"));
				fee.setGrt_amt_s		(rs.getString("GRT_AMT_S")==null?0:Integer.parseInt(rs.getString("GRT_AMT_S")));
				fee.setGrt_etc			(rs.getString("GRT_ETC")==null?"":rs.getString("GRT_ETC"));
				fee.setGrt_est_dt		(rs.getString("GRT_EST_DT")==null?"":rs.getString("GRT_EST_DT"));
				fee.setGrt_pay_yn		(rs.getString("GRT_PAY_YN")==null?"":rs.getString("GRT_PAY_YN"));
				fee.setPp_s_amt			(rs.getString("PP_S_AMT")==null?0:Integer.parseInt(rs.getString("PP_S_AMT")));
				fee.setPp_v_amt			(rs.getString("PP_V_AMT")==null?0:Integer.parseInt(rs.getString("PP_V_AMT")));
				fee.setPp_etc			(rs.getString("PP_ETC")==null?"":rs.getString("PP_ETC"));
				fee.setPp_est_dt		(rs.getString("PP_EST_DT")==null?"":rs.getString("PP_EST_DT"));
				fee.setPp_pay_yn		(rs.getString("PP_PAY_YN")==null?"":rs.getString("PP_PAY_YN"));
				fee.setIfee_s_amt		(rs.getString("IFEE_S_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_S_AMT")));
				fee.setIfee_v_amt		(rs.getString("IFEE_V_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_V_AMT")));
				fee.setIfee_etc			(rs.getString("IFEE_ETC")==null?"":rs.getString("IFEE_ETC"));
				fee.setIfee_est_dt		(rs.getString("IFEE_EST_DT")==null?"":rs.getString("IFEE_EST_DT"));
				fee.setIfee_pay_yn		(rs.getString("IFEE_PAY_YN")==null?"":rs.getString("IFEE_PAY_YN"));
				fee.setInv_s_amt		(rs.getString("INV_S_AMT")==null?0:Integer.parseInt(rs.getString("INV_S_AMT")));
				fee.setInv_v_amt		(rs.getString("INV_V_AMT")==null?0:Integer.parseInt(rs.getString("INV_V_AMT")));
				fee.setInv_etc			(rs.getString("INV_ETC")==null?"":rs.getString("INV_ETC"));
				fee.setOpt_s_amt		(rs.getString("OPT_S_AMT")==null?0:Integer.parseInt(rs.getString("OPT_S_AMT")));
				fee.setOpt_v_amt		(rs.getString("OPT_V_AMT")==null?0:Integer.parseInt(rs.getString("OPT_V_AMT")));
				fee.setOpt_etc			(rs.getString("OPT_ETC")==null?"":rs.getString("OPT_ETC"));
				fee.setOpt_yn			(rs.getString("OPT_YN")==null?"":rs.getString("OPT_YN"));
				fee.setFee_s_amt		(rs.getString("FEE_S_AMT")==null?0:Integer.parseInt(rs.getString("FEE_S_AMT")));
				fee.setFee_v_amt		(rs.getString("FEE_V_AMT")==null?0:Integer.parseInt(rs.getString("FEE_V_AMT")));
				fee.setFee_etc			(rs.getString("FEE_ETC")==null?"":rs.getString("FEE_ETC"));
				fee.setFee_st			(rs.getString("FEE_ST")==null?"":rs.getString("FEE_ST"));
				fee.setFee_req_day		(rs.getString("FEE_REQ_DAY")==null?"":rs.getString("FEE_REQ_DAY"));
				fee.setFee_est_day		(rs.getString("FEE_EST_DAY")==null?"":rs.getString("FEE_EST_DAY"));
				fee.setFee_bank			(rs.getString("FEE_BANK")==null?"":rs.getString("FEE_BANK"));
				fee.setFee_pay_st		(rs.getString("FEE_PAY_ST")==null?"":rs.getString("FEE_PAY_ST"));
				fee.setFee_pay_tm		(rs.getString("FEE_PAY_TM")==null?"":rs.getString("FEE_PAY_TM").trim());
				fee.setFee_pay_start_dt	(rs.getString("FEE_PAY_START_DT")==null?"":rs.getString("FEE_PAY_START_DT"));
				fee.setFee_pay_end_dt	(rs.getString("FEE_PAY_END_DT")==null?"":rs.getString("FEE_PAY_END_DT"));
				fee.setFee_fst_dt		(rs.getString("FEE_FST_DT")==null?"":rs.getString("FEE_FST_DT"));
				fee.setFee_fst_amt		(rs.getString("FEE_FST_AMT")==null?0:Integer.parseInt(rs.getString("FEE_FST_AMT")));
				fee.setFee_cdt			(rs.getString("FEE_CDT")==null?"":rs.getString("FEE_CDT"));
				fee.setExt_agnt			(rs.getString("EXT_AGNT")==null?"":rs.getString("EXT_AGNT"));
				fee.setBr_id			(rs.getString("BR_ID")==null?"":rs.getString("BR_ID"));
				fee.setRc_day			(rs.getString("RC_DAY")==null?"":rs.getString("RC_DAY"));
				fee.setNext_yn			(rs.getString("NEXT_YN")==null?"":rs.getString("NEXT_YN"));
				fee.setOpt_chk			(rs.getString("OPT_CHK")==null?"":rs.getString("OPT_CHK"));
				fee.setFee_sh			(rs.getString("FEE_SH")==null?"":rs.getString("FEE_SH"));
				fee.setPrv_mon_yn		(rs.getString("PRV_MON_YN")==null?"":rs.getString("PRV_MON_YN"));
				fee.setFee_chk			(rs.getString("FEE_CHK")==null?"":rs.getString("FEE_CHK"));
				fee.setOpt_per			(rs.getString("OPT_PER")==null?"":rs.getString("OPT_PER"));
				fee.setGrt_suc_yn		(rs.getString("GRT_SUC_YN")==null?"":rs.getString("GRT_SUC_YN").trim());
				fee.setIfee_suc_yn		(rs.getString("IFEE_SUC_YN")==null?"":rs.getString("IFEE_SUC_YN").trim());
				fee.setRent_est_dt		(rs.getString("RENT_EST_DT")==null?"":rs.getString("RENT_EST_DT"));
				fee.setLeave_day		(rs.getString("leave_day")==null?"":rs.getString("leave_day"));
				fee.setCls_per			(rs.getString("CLS_PER")==null?"":rs.getString("CLS_PER"));
				fee.setGur_per			(rs.getString("gur_per")==null?0:AddUtil.parseFloat(rs.getString("gur_per")));
				fee.setGur_p_per		(rs.getString("gur_p_per")==null?0:AddUtil.parseFloat(rs.getString("gur_p_per")));
				fee.setPere_per			(rs.getString("pere_per")==null?0:AddUtil.parseFloat(rs.getString("pere_per")));
				fee.setPere_r_per		(rs.getString("pere_r_per")==null?0:AddUtil.parseFloat(rs.getString("pere_r_per")));
				fee.setPere_mth			(rs.getString("pere_mth")==null?0:Integer.parseInt(rs.getString("pere_mth")));
				fee.setPere_r_mth		(rs.getString("pere_r_mth")==null?0:Integer.parseInt(rs.getString("pere_r_mth")));
				fee.setMax_ja			(rs.getString("max_ja")==null?0:AddUtil.parseFloat(rs.getString("max_ja")));
				fee.setApp_ja			(rs.getString("app_ja")==null?0:AddUtil.parseFloat(rs.getString("app_ja")));
				fee.setOpt_st			(rs.getString("opt_st")==null?"":rs.getString("opt_st"));
				fee.setDc_ra			(rs.getString("dc_ra")==null?0:AddUtil.parseFloat(rs.getString("dc_ra")));
				fee.setBas_dt			(rs.getString("bas_dt")==null?"":rs.getString("bas_dt"));
				fee.setFee_sac_id		(rs.getString("fee_sac_id")==null?"":rs.getString("fee_sac_id"));
				fee.setDef_st			(rs.getString("def_st")==null?"":rs.getString("def_st"));
				fee.setDef_remark		(rs.getString("def_remark")==null?"":rs.getString("def_remark"));
				fee.setDef_sac_id		(rs.getString("def_sac_id")==null?"":rs.getString("def_sac_id"));
				fee.setCls_r_per		(rs.getString("cls_r_per")==null?0:AddUtil.parseFloat(rs.getString("cls_r_per")));
				fee.setJa_s_amt			(rs.getString("JA_S_AMT")==null?0:Integer.parseInt(rs.getString("JA_S_AMT")));
				fee.setJa_v_amt			(rs.getString("JA_V_AMT")==null?0:Integer.parseInt(rs.getString("JA_V_AMT")));
				fee.setJa_r_s_amt		(rs.getString("JA_R_S_AMT")==null?0:Integer.parseInt(rs.getString("JA_R_S_AMT")));
				fee.setJa_r_v_amt		(rs.getString("JA_R_V_AMT")==null?0:Integer.parseInt(rs.getString("JA_R_V_AMT")));
				fee.setCredit_per  		(rs.getString("credit_per")==null?0:AddUtil.parseFloat(rs.getString("credit_per")));
				fee.setCredit_r_per		(rs.getString("credit_r_per")==null?0:AddUtil.parseFloat(rs.getString("credit_r_per")));
				fee.setCredit_amt  		(rs.getString("credit_amt")==null?0:Integer.parseInt(rs.getString("credit_amt")));
				fee.setCredit_r_amt		(rs.getString("credit_r_amt")==null?0:Integer.parseInt(rs.getString("credit_r_amt")));
				fee.setRtn_st			(rs.getString("rtn_st")==null?"":rs.getString("rtn_st"));
				fee.setCls_n_per		(rs.getString("cls_n_per")==null?0:AddUtil.parseFloat(rs.getString("cls_n_per")));
				fee.setBrch_id			(rs.getString("BRCH_ID")==null?"":rs.getString("BRCH_ID"));
				fee.setB_max_ja			(rs.getString("b_max_ja")==null?0:AddUtil.parseFloat(rs.getString("b_max_ja")));
				fee.setF_opt_per		(rs.getString("F_OPT_PER")==null?"":rs.getString("F_OPT_PER"));
				fee.setF_gur_p_per		(rs.getString("F_GUR_P_PER")==null?"":rs.getString("F_GUR_P_PER"));
				fee.setF_pere_r_per		(rs.getString("F_PERE_R_PER")==null?"":rs.getString("F_PERE_R_PER"));
				fee.setIns_s_amt		(rs.getString("INS_S_AMT")==null?0:Integer.parseInt(rs.getString("INS_S_AMT")));
				fee.setIns_v_amt		(rs.getString("INS_V_AMT")==null?0:Integer.parseInt(rs.getString("INS_V_AMT")));
				fee.setIns_total_amt	(rs.getString("INS_TOTAL_AMT")==null?0:Integer.parseInt(rs.getString("INS_TOTAL_AMT")));
				fee.setPp_chk			(rs.getString("PP_CHK")==null?"":rs.getString("PP_CHK"));
				
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeNew]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee;
		}
	}
	
	//계약수정 : 대여사항 조회 (fee)
	public ContFeeBean getContFeeNewAdd(String mng_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContFeeBean fee = new ContFeeBean();
		String query = "";
		if(rent_st.equals("")) rent_st = "1";

		query = " select * from FEE_ADD where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ?";

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_st);
	    	rs = pstmt.executeQuery();  
	    					
			while(rs.next())
			{
				fee.setRent_mng_id		(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				fee.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				fee.setRent_st			(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				fee.setRent_way			(rs.getString("RENT_WAY")==null?"":rs.getString("RENT_WAY"));
				fee.setCar_st			(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				fee.setCon_mon			(rs.getString("CON_MON")==null?"":rs.getString("CON_MON"));
				fee.setRent_dt			(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT").trim());
				fee.setRent_start_dt	(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				fee.setRent_end_dt		(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				fee.setPrv_dlv_yn		(rs.getString("PRV_DLV_YN")==null?"":rs.getString("PRV_DLV_YN"));
				fee.setPrv_car_mng_id	(rs.getString("PRV_CAR_MNG_ID")==null?"":rs.getString("PRV_CAR_MNG_ID"));
				fee.setPrv_start_dt		(rs.getString("PRV_START_DT")==null?"":rs.getString("PRV_START_DT"));
				fee.setPrv_end_dt		(rs.getString("PRV_END_DT")==null?"":rs.getString("PRV_END_DT"));
				fee.setGrt_amt_s		(rs.getString("GRT_AMT_S")==null?0:Integer.parseInt(rs.getString("GRT_AMT_S")));
				fee.setGrt_etc			(rs.getString("GRT_ETC")==null?"":rs.getString("GRT_ETC"));
				fee.setGrt_est_dt		(rs.getString("GRT_EST_DT")==null?"":rs.getString("GRT_EST_DT"));
				fee.setGrt_pay_yn		(rs.getString("GRT_PAY_YN")==null?"":rs.getString("GRT_PAY_YN"));
				fee.setPp_s_amt			(rs.getString("PP_S_AMT")==null?0:Integer.parseInt(rs.getString("PP_S_AMT")));
				fee.setPp_v_amt			(rs.getString("PP_V_AMT")==null?0:Integer.parseInt(rs.getString("PP_V_AMT")));
				fee.setPp_etc			(rs.getString("PP_ETC")==null?"":rs.getString("PP_ETC"));
				fee.setPp_est_dt		(rs.getString("PP_EST_DT")==null?"":rs.getString("PP_EST_DT"));
				fee.setPp_pay_yn		(rs.getString("PP_PAY_YN")==null?"":rs.getString("PP_PAY_YN"));
				fee.setIfee_s_amt		(rs.getString("IFEE_S_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_S_AMT")));
				fee.setIfee_v_amt		(rs.getString("IFEE_V_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_V_AMT")));
				fee.setIfee_etc			(rs.getString("IFEE_ETC")==null?"":rs.getString("IFEE_ETC"));
				fee.setIfee_est_dt		(rs.getString("IFEE_EST_DT")==null?"":rs.getString("IFEE_EST_DT"));
				fee.setIfee_pay_yn		(rs.getString("IFEE_PAY_YN")==null?"":rs.getString("IFEE_PAY_YN"));
				fee.setInv_s_amt		(rs.getString("INV_S_AMT")==null?0:Integer.parseInt(rs.getString("INV_S_AMT")));
				fee.setInv_v_amt		(rs.getString("INV_V_AMT")==null?0:Integer.parseInt(rs.getString("INV_V_AMT")));
				fee.setInv_etc			(rs.getString("INV_ETC")==null?"":rs.getString("INV_ETC"));
				fee.setOpt_s_amt		(rs.getString("OPT_S_AMT")==null?0:Integer.parseInt(rs.getString("OPT_S_AMT")));
				fee.setOpt_v_amt		(rs.getString("OPT_V_AMT")==null?0:Integer.parseInt(rs.getString("OPT_V_AMT")));
				fee.setOpt_etc			(rs.getString("OPT_ETC")==null?"":rs.getString("OPT_ETC"));
				fee.setOpt_yn			(rs.getString("OPT_YN")==null?"":rs.getString("OPT_YN"));
				fee.setFee_s_amt		(rs.getString("FEE_S_AMT")==null?0:Integer.parseInt(rs.getString("FEE_S_AMT")));
				fee.setFee_v_amt		(rs.getString("FEE_V_AMT")==null?0:Integer.parseInt(rs.getString("FEE_V_AMT")));
				fee.setFee_etc			(rs.getString("FEE_ETC")==null?"":rs.getString("FEE_ETC"));
				fee.setFee_st			(rs.getString("FEE_ST")==null?"":rs.getString("FEE_ST"));
				fee.setFee_req_day		(rs.getString("FEE_REQ_DAY")==null?"":rs.getString("FEE_REQ_DAY"));
				fee.setFee_est_day		(rs.getString("FEE_EST_DAY")==null?"":rs.getString("FEE_EST_DAY"));
				fee.setFee_bank			(rs.getString("FEE_BANK")==null?"":rs.getString("FEE_BANK"));
				fee.setFee_pay_st		(rs.getString("FEE_PAY_ST")==null?"":rs.getString("FEE_PAY_ST"));
				fee.setFee_pay_tm		(rs.getString("FEE_PAY_TM")==null?"":rs.getString("FEE_PAY_TM").trim());
				fee.setFee_pay_start_dt	(rs.getString("FEE_PAY_START_DT")==null?"":rs.getString("FEE_PAY_START_DT"));
				fee.setFee_pay_end_dt	(rs.getString("FEE_PAY_END_DT")==null?"":rs.getString("FEE_PAY_END_DT"));
				fee.setFee_fst_dt		(rs.getString("FEE_FST_DT")==null?"":rs.getString("FEE_FST_DT"));
				fee.setFee_fst_amt		(rs.getString("FEE_FST_AMT")==null?0:Integer.parseInt(rs.getString("FEE_FST_AMT")));
				fee.setFee_cdt			(rs.getString("FEE_CDT")==null?"":rs.getString("FEE_CDT"));
				fee.setExt_agnt			(rs.getString("EXT_AGNT")==null?"":rs.getString("EXT_AGNT"));
				fee.setBr_id			(rs.getString("BR_ID")==null?"":rs.getString("BR_ID"));
				fee.setRc_day			(rs.getString("RC_DAY")==null?"":rs.getString("RC_DAY"));
				fee.setNext_yn			(rs.getString("NEXT_YN")==null?"":rs.getString("NEXT_YN"));
				fee.setOpt_chk			(rs.getString("OPT_CHK")==null?"":rs.getString("OPT_CHK"));
				fee.setFee_sh			(rs.getString("FEE_SH")==null?"":rs.getString("FEE_SH"));
				fee.setPrv_mon_yn		(rs.getString("PRV_MON_YN")==null?"":rs.getString("PRV_MON_YN"));
				fee.setFee_chk			(rs.getString("FEE_CHK")==null?"":rs.getString("FEE_CHK"));
				fee.setOpt_per			(rs.getString("OPT_PER")==null?"":rs.getString("OPT_PER"));
				fee.setGrt_suc_yn		(rs.getString("GRT_SUC_YN")==null?"":rs.getString("GRT_SUC_YN").trim());
				fee.setIfee_suc_yn		(rs.getString("IFEE_SUC_YN")==null?"":rs.getString("IFEE_SUC_YN").trim());
				fee.setRent_est_dt		(rs.getString("RENT_EST_DT")==null?"":rs.getString("RENT_EST_DT"));
				fee.setLeave_day		(rs.getString("leave_day")==null?"":rs.getString("leave_day"));
				fee.setCls_per			(rs.getString("CLS_PER")==null?"":rs.getString("CLS_PER"));
				fee.setGur_per			(rs.getString("gur_per")==null?0:AddUtil.parseFloat(rs.getString("gur_per")));
				fee.setGur_p_per		(rs.getString("gur_p_per")==null?0:AddUtil.parseFloat(rs.getString("gur_p_per")));
				fee.setPere_per			(rs.getString("pere_per")==null?0:AddUtil.parseFloat(rs.getString("pere_per")));
				fee.setPere_r_per		(rs.getString("pere_r_per")==null?0:AddUtil.parseFloat(rs.getString("pere_r_per")));
				fee.setPere_mth			(rs.getString("pere_mth")==null?0:Integer.parseInt(rs.getString("pere_mth")));
				fee.setPere_r_mth		(rs.getString("pere_r_mth")==null?0:Integer.parseInt(rs.getString("pere_r_mth")));
				fee.setMax_ja			(rs.getString("max_ja")==null?0:AddUtil.parseFloat(rs.getString("max_ja")));
				fee.setApp_ja			(rs.getString("app_ja")==null?0:AddUtil.parseFloat(rs.getString("app_ja")));
				fee.setOpt_st			(rs.getString("opt_st")==null?"":rs.getString("opt_st"));
				fee.setDc_ra			(rs.getString("dc_ra")==null?0:AddUtil.parseFloat(rs.getString("dc_ra")));
				fee.setBas_dt			(rs.getString("bas_dt")==null?"":rs.getString("bas_dt"));
				fee.setFee_sac_id		(rs.getString("fee_sac_id")==null?"":rs.getString("fee_sac_id"));
				fee.setDef_st			(rs.getString("def_st")==null?"":rs.getString("def_st"));
				fee.setDef_remark		(rs.getString("def_remark")==null?"":rs.getString("def_remark"));
				fee.setDef_sac_id		(rs.getString("def_sac_id")==null?"":rs.getString("def_sac_id"));
				fee.setCls_r_per		(rs.getString("cls_r_per")==null?0:AddUtil.parseFloat(rs.getString("cls_r_per")));
				fee.setJa_s_amt			(rs.getString("JA_S_AMT")==null?0:Integer.parseInt(rs.getString("JA_S_AMT")));
				fee.setJa_v_amt			(rs.getString("JA_V_AMT")==null?0:Integer.parseInt(rs.getString("JA_V_AMT")));
				fee.setJa_r_s_amt		(rs.getString("JA_R_S_AMT")==null?0:Integer.parseInt(rs.getString("JA_R_S_AMT")));
				fee.setJa_r_v_amt		(rs.getString("JA_R_V_AMT")==null?0:Integer.parseInt(rs.getString("JA_R_V_AMT")));
				fee.setCredit_per  		(rs.getString("credit_per")==null?0:AddUtil.parseFloat(rs.getString("credit_per")));
				fee.setCredit_r_per		(rs.getString("credit_r_per")==null?0:AddUtil.parseFloat(rs.getString("credit_r_per")));
				fee.setCredit_amt  		(rs.getString("credit_amt")==null?0:Integer.parseInt(rs.getString("credit_amt")));
				fee.setCredit_r_amt		(rs.getString("credit_r_amt")==null?0:Integer.parseInt(rs.getString("credit_r_amt")));
				fee.setRtn_st			(rs.getString("rtn_st")==null?"":rs.getString("rtn_st"));
				fee.setCls_n_per		(rs.getString("cls_n_per")==null?0:AddUtil.parseFloat(rs.getString("cls_n_per")));
				
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeNewAdd]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee;
		}
	}

	//고객별 최종 대여사항 조회 (fee)
	public ContFeeBean getContFeeNew(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContFeeBean fee = new ContFeeBean();

		String query = "";

		query = " select * from (select a.* from fee a, cont b where b.client_id=? and nvl(b.use_yn,'Y')='Y' and a.rent_st='1' and a.rent_l_cd=b.rent_l_cd order by a.rent_mng_id desc) where rownum=1";

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);
	    	rs = pstmt.executeQuery();  
			
			while(rs.next())
			{
				fee.setRent_mng_id		(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				fee.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				fee.setRent_st			(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				fee.setRent_way			(rs.getString("RENT_WAY")==null?"":rs.getString("RENT_WAY"));
				fee.setCar_st			(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				fee.setCon_mon			(rs.getString("CON_MON")==null?"":rs.getString("CON_MON"));
				fee.setRent_dt			(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT"));
				fee.setRent_start_dt	(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				fee.setRent_end_dt		(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				fee.setPrv_dlv_yn		(rs.getString("PRV_DLV_YN")==null?"":rs.getString("PRV_DLV_YN"));
				fee.setPrv_car_mng_id	(rs.getString("PRV_CAR_MNG_ID")==null?"":rs.getString("PRV_CAR_MNG_ID"));
				fee.setPrv_start_dt		(rs.getString("PRV_START_DT")==null?"":rs.getString("PRV_START_DT"));
				fee.setPrv_end_dt		(rs.getString("PRV_END_DT")==null?"":rs.getString("PRV_END_DT"));
				fee.setGrt_amt_s		(rs.getString("GRT_AMT_S")==null?0:Integer.parseInt(rs.getString("GRT_AMT_S")));
				fee.setGrt_etc			(rs.getString("GRT_ETC")==null?"":rs.getString("GRT_ETC"));
				fee.setGrt_est_dt		(rs.getString("GRT_EST_DT")==null?"":rs.getString("GRT_EST_DT"));
				fee.setGrt_pay_yn		(rs.getString("GRT_PAY_YN")==null?"":rs.getString("GRT_PAY_YN"));
				fee.setPp_s_amt			(rs.getString("PP_S_AMT")==null?0:Integer.parseInt(rs.getString("PP_S_AMT")));
				fee.setPp_v_amt			(rs.getString("PP_V_AMT")==null?0:Integer.parseInt(rs.getString("PP_V_AMT")));
				fee.setPp_etc			(rs.getString("PP_ETC")==null?"":rs.getString("PP_ETC"));
				fee.setPp_est_dt		(rs.getString("PP_EST_DT")==null?"":rs.getString("PP_EST_DT"));
				fee.setPp_pay_yn		(rs.getString("PP_PAY_YN")==null?"":rs.getString("PP_PAY_YN"));
				fee.setIfee_s_amt		(rs.getString("IFEE_S_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_S_AMT")));
				fee.setIfee_v_amt		(rs.getString("IFEE_V_AMT")==null?0:Integer.parseInt(rs.getString("IFEE_V_AMT")));
				fee.setIfee_etc			(rs.getString("IFEE_ETC")==null?"":rs.getString("IFEE_ETC"));
				fee.setIfee_est_dt		(rs.getString("IFEE_EST_DT")==null?"":rs.getString("IFEE_EST_DT"));
				fee.setIfee_pay_yn		(rs.getString("IFEE_PAY_YN")==null?"":rs.getString("IFEE_PAY_YN"));
				fee.setInv_s_amt		(rs.getString("INV_S_AMT")==null?0:Integer.parseInt(rs.getString("INV_S_AMT")));
				fee.setInv_v_amt		(rs.getString("INV_V_AMT")==null?0:Integer.parseInt(rs.getString("INV_V_AMT")));
				fee.setInv_etc			(rs.getString("INV_ETC")==null?"":rs.getString("INV_ETC"));
				fee.setOpt_s_amt		(rs.getString("OPT_S_AMT")==null?0:Integer.parseInt(rs.getString("OPT_S_AMT")));
				fee.setOpt_v_amt		(rs.getString("OPT_V_AMT")==null?0:Integer.parseInt(rs.getString("OPT_V_AMT")));
				fee.setOpt_etc			(rs.getString("OPT_ETC")==null?"":rs.getString("OPT_ETC"));
				fee.setOpt_yn			(rs.getString("OPT_YN")==null?"":rs.getString("OPT_YN"));
				fee.setFee_s_amt		(rs.getString("FEE_S_AMT")==null?0:Integer.parseInt(rs.getString("FEE_S_AMT")));
				fee.setFee_v_amt		(rs.getString("FEE_V_AMT")==null?0:Integer.parseInt(rs.getString("FEE_V_AMT")));
				fee.setFee_etc			(rs.getString("FEE_ETC")==null?"":rs.getString("FEE_ETC"));
				fee.setFee_st			(rs.getString("FEE_ST")==null?"":rs.getString("FEE_ST"));
				fee.setFee_req_day		(rs.getString("FEE_REQ_DAY")==null?"":rs.getString("FEE_REQ_DAY"));
				fee.setFee_est_day		(rs.getString("FEE_EST_DAY")==null?"":rs.getString("FEE_EST_DAY"));
				fee.setFee_bank			(rs.getString("FEE_BANK")==null?"":rs.getString("FEE_BANK"));
				fee.setFee_pay_st		(rs.getString("FEE_PAY_ST")==null?"":rs.getString("FEE_PAY_ST"));
				fee.setFee_pay_tm		(rs.getString("FEE_PAY_TM")==null?"":rs.getString("FEE_PAY_TM"));
				fee.setFee_pay_start_dt	(rs.getString("FEE_PAY_START_DT")==null?"":rs.getString("FEE_PAY_START_DT"));
				fee.setFee_pay_end_dt	(rs.getString("FEE_PAY_END_DT")==null?"":rs.getString("FEE_PAY_END_DT"));
				fee.setFee_fst_dt		(rs.getString("FEE_FST_DT")==null?"":rs.getString("FEE_FST_DT"));
				fee.setFee_fst_amt		(rs.getString("FEE_FST_AMT")==null?0:Integer.parseInt(rs.getString("FEE_FST_AMT")));
				fee.setFee_cdt			(rs.getString("FEE_CDT")==null?"":rs.getString("FEE_CDT"));
				fee.setExt_agnt			(rs.getString("EXT_AGNT")==null?"":rs.getString("EXT_AGNT"));
				fee.setBr_id			(rs.getString("BR_ID")==null?"":rs.getString("BR_ID"));
				fee.setRc_day			(rs.getString("RC_DAY")==null?"":rs.getString("RC_DAY"));
				fee.setNext_yn			(rs.getString("NEXT_YN")==null?"":rs.getString("NEXT_YN"));
				fee.setOpt_chk			(rs.getString("OPT_CHK")==null?"":rs.getString("OPT_CHK"));
				fee.setFee_sh			(rs.getString("FEE_SH")==null?"":rs.getString("FEE_SH"));
				fee.setPrv_mon_yn		(rs.getString("PRV_MON_YN")==null?"":rs.getString("PRV_MON_YN"));
				fee.setFee_chk			(rs.getString("FEE_CHK")==null?"":rs.getString("FEE_CHK"));
				fee.setOpt_per			(rs.getString("OPT_PER")==null?"":rs.getString("OPT_PER"));
				fee.setGrt_suc_yn		(rs.getString("GRT_SUC_YN")==null?"":rs.getString("GRT_SUC_YN"));
				fee.setIfee_suc_yn		(rs.getString("IFEE_SUC_YN")==null?"":rs.getString("IFEE_SUC_YN"));
				fee.setLeave_day		(rs.getString("leave_day")==null?"":rs.getString("leave_day"));
				fee.setCls_per			(rs.getString("cls_per")==null?"":rs.getString("cls_per"));
				fee.setGur_per			(rs.getString("gur_per")==null?0:AddUtil.parseFloat(rs.getString("gur_per")));
				fee.setGur_p_per		(rs.getString("gur_p_per")==null?0:AddUtil.parseFloat(rs.getString("gur_p_per")));
				fee.setPere_per			(rs.getString("pere_per")==null?0:AddUtil.parseFloat(rs.getString("pere_per")));
				fee.setPere_r_per		(rs.getString("pere_r_per")==null?0:AddUtil.parseFloat(rs.getString("pere_r_per")));
				fee.setPere_mth			(rs.getString("pere_mth")==null?0:Integer.parseInt(rs.getString("pere_mth")));
				fee.setPere_r_mth		(rs.getString("pere_r_mth")==null?0:Integer.parseInt(rs.getString("pere_r_mth")));
				fee.setMax_ja			(rs.getString("max_ja")==null?0:AddUtil.parseFloat(rs.getString("max_ja")));
				fee.setApp_ja			(rs.getString("app_ja")==null?0:AddUtil.parseFloat(rs.getString("app_ja")));
				fee.setOpt_st			(rs.getString("opt_st")==null?"":rs.getString("opt_st"));
				fee.setDc_ra			(rs.getString("dc_ra")==null?0:AddUtil.parseFloat(rs.getString("dc_ra")));
				fee.setBas_dt			(rs.getString("bas_dt")==null?"":rs.getString("bas_dt"));
				fee.setFee_sac_id		(rs.getString("fee_sac_id")==null?"":rs.getString("fee_sac_id"));
				fee.setDef_st			(rs.getString("def_st")==null?"":rs.getString("def_st"));
				fee.setDef_remark		(rs.getString("def_remark")==null?"":rs.getString("def_remark"));
				fee.setDef_sac_id		(rs.getString("def_sac_id")==null?"":rs.getString("def_sac_id"));
				fee.setCls_r_per		(rs.getString("cls_r_per")==null?0:AddUtil.parseFloat(rs.getString("cls_r_per")));
				fee.setJa_s_amt			(rs.getString("JA_S_AMT")==null?0:Integer.parseInt(rs.getString("JA_S_AMT")));
				fee.setJa_v_amt			(rs.getString("JA_V_AMT")==null?0:Integer.parseInt(rs.getString("JA_V_AMT")));
				fee.setJa_r_s_amt		(rs.getString("JA_R_S_AMT")==null?0:Integer.parseInt(rs.getString("JA_R_S_AMT")));
				fee.setJa_r_v_amt		(rs.getString("JA_R_V_AMT")==null?0:Integer.parseInt(rs.getString("JA_R_V_AMT")));
				fee.setCredit_per  		(rs.getString("credit_per")==null?0:AddUtil.parseFloat(rs.getString("credit_per")));
				fee.setCredit_r_per		(rs.getString("credit_r_per")==null?0:AddUtil.parseFloat(rs.getString("credit_r_per")));
				fee.setCredit_amt  		(rs.getString("credit_amt")==null?0:Integer.parseInt(rs.getString("credit_amt")));
				fee.setCredit_r_amt		(rs.getString("credit_r_amt")==null?0:Integer.parseInt(rs.getString("credit_r_amt")));
				fee.setRtn_st			(rs.getString("rtn_st")==null?"":rs.getString("rtn_st"));
				fee.setCls_n_per		(rs.getString("cls_n_per")==null?0:AddUtil.parseFloat(rs.getString("cls_n_per")));
				fee.setBrch_id			(rs.getString("BRCH_ID")==null?"":rs.getString("BRCH_ID"));
				fee.setB_max_ja			(rs.getString("b_max_ja")==null?0:AddUtil.parseFloat(rs.getString("b_max_ja")));
				fee.setF_opt_per		(rs.getString("F_OPT_PER")==null?"":rs.getString("F_OPT_PER"));
				fee.setF_gur_p_per		(rs.getString("F_GUR_P_PER")==null?"":rs.getString("F_GUR_P_PER"));
				fee.setF_pere_r_per		(rs.getString("F_PERE_R_PER")==null?"":rs.getString("F_PERE_R_PER"));
				fee.setIns_s_amt		(rs.getString("INS_S_AMT")==null?0:Integer.parseInt(rs.getString("INS_S_AMT")));
				fee.setIns_v_amt		(rs.getString("INS_V_AMT")==null?0:Integer.parseInt(rs.getString("INS_V_AMT")));
				fee.setIns_total_amt	(rs.getString("INS_TOTAL_AMT")==null?0:Integer.parseInt(rs.getString("INS_TOTAL_AMT")));
				fee.setPp_chk			(rs.getString("PP_CHK")==null?"":rs.getString("PP_CHK"));

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeNew]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee;
		}
	}

	//계약 수정 : 계약정보 조회 (cont)
	public ContBaseBean getCont(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContBaseBean base = new ContBaseBean();
		String query = "";
		query = " select a.* from CONT a "+
				" where a.RENT_MNG_ID = ? and a.RENT_L_CD = ? ";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
		   	rs = pstmt.executeQuery();
		
			while(rs.next())
			{
				base.setRent_mng_id		(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setClient_id		(rs.getString("CLIENT_ID")==null?"":rs.getString("CLIENT_ID"));
				base.setCar_mng_id		(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
				base.setRent_st			(rs.getString("RENT_ST")==null?"":rs.getString("RENT_ST"));
				base.setBus_st			(rs.getString("BUS_ST")==null?"":rs.getString("BUS_ST"));
				base.setRent_dt			(rs.getString("RENT_DT")==null?"":rs.getString("RENT_DT"));
				base.setDlv_dt			(rs.getString("DLV_DT")==null?"":rs.getString("DLV_DT"));
				base.setRent_start_dt	(rs.getString("RENT_START_DT")==null?"":rs.getString("RENT_START_DT"));
				base.setNote			(rs.getString("NOTE")==null?"":rs.getString("NOTE"));
				base.setBrch_id			(rs.getString("BRCH_ID")==null?"":rs.getString("BRCH_ID"));
				base.setBus_id			(rs.getString("BUS_ID")==null?"":rs.getString("BUS_ID"));
				base.setBus_id2			(rs.getString("BUS_ID2")==null?"":rs.getString("BUS_ID2"));
				base.setMng_id			(rs.getString("MNG_ID")==null?"":rs.getString("MNG_ID"));
				base.setMng_id2			(rs.getString("MNG_ID2")==null?"":rs.getString("MNG_ID2"));
				base.setDept_id			(rs.getString("DEPT_ID")==null?"":rs.getString("DEPT_ID"));
				base.setReg_id			(rs.getString("REG_ID")==null?"":rs.getString("REG_ID"));
				base.setReg_dt			(rs.getString("REG_DT")==null?"":rs.getString("REG_DT"));
				base.setCar_st			(rs.getString("CAR_ST")==null?"":rs.getString("CAR_ST"));
				base.setR_site			(rs.getString("R_SITE")==null?"":rs.getString("R_SITE"));
				base.setP_zip			(rs.getString("P_ZIP")==null?"":rs.getString("P_ZIP"));
				base.setP_addr			(rs.getString("P_ADDR")==null?"":rs.getString("P_ADDR"));
				base.setO_map			(rs.getString("O_MAP")==null?"":rs.getString("O_MAP"));
				base.setUse_yn			(rs.getString("USE_YN")==null?"":rs.getString("USE_YN"));
				base.setR_site_zip		(rs.getString("R_SITE_ZIP")==null?"":rs.getString("R_SITE_ZIP"));
				base.setR_site_addr		(rs.getString("R_SITE_ADDR")==null?"":rs.getString("R_SITE_ADDR"));
				base.setDriving_ext		(rs.getString("DRIVING_EXT")==null?"":rs.getString("DRIVING_EXT"));
				base.setDriving_age		(rs.getString("DRIVING_AGE")==null?"":rs.getString("DRIVING_AGE"));
				base.setLoan_ext		(rs.getString("LOAN_EXT")==null?"":rs.getString("LOAN_EXT"));
				base.setOthers			(rs.getString("OTHERS")==null?"":rs.getString("OTHERS"));
				base.setCar_ja			(rs.getString("CAR_JA")==null?0:Integer.parseInt(rs.getString("CAR_JA")));
				base.setScan_file		(rs.getString("SCAN_FILE")==null?"":rs.getString("SCAN_FILE"));
				base.setCar_gu			(rs.getString("CAR_GU")==null?"":rs.getString("CAR_GU"));
				base.setUpdate_id		(rs.getString("UPDATE_ID")==null?"":rs.getString("UPDATE_ID"));
				base.setUpdate_dt		(rs.getString("UPDATE_DT")==null?"":rs.getString("UPDATE_DT"));
				base.setRent_end_dt		(rs.getString("RENT_END_DT")==null?"":rs.getString("RENT_END_DT"));
				base.setGcp_kd			(rs.getString("gcp_kd")==null?"":rs.getString("gcp_kd"));
				base.setBacdt_kd		(rs.getString("bacdt_kd")==null?"":rs.getString("bacdt_kd"));
				base.setSpr_kd			(rs.getString("spr_kd")==null?"":rs.getString("spr_kd"));
				base.setTax_agnt		(rs.getString("tax_agnt")==null?"":rs.getString("tax_agnt"));
				base.setTax_type		(rs.getString("tax_type")==null?"":rs.getString("tax_type"));
				base.setSanction_id		(rs.getString("sanction_id")==null?"":rs.getString("sanction_id"));
				base.setSanction_date	(rs.getString("sanction_date")==null?"":rs.getString("sanction_date"));
				base.setSanction		(rs.getString("sanction")==null?"":rs.getString("sanction"));
				base.setSanction_req	(rs.getString("sanction_req")==null?"":rs.getString("sanction_req"));
				base.setFine_mm			(rs.getString("fine_mm")==null?"":rs.getString("fine_mm"));
				base.setCall_st			(rs.getString("call_st")==null?"":rs.getString("call_st"));
				base.setBus_id3			(rs.getString("BUS_ID3")==null?"":rs.getString("BUS_ID3"));
				base.setReg_step		(rs.getString("reg_step")==null?"":rs.getString("reg_step"));
				base.setAgent_emp_id	(rs.getString("agent_emp_id")==null?"":rs.getString("agent_emp_id"));
				base.setSanction_type	(rs.getString("sanction_type")==null?"":rs.getString("sanction_type"));
				base.setLic_no			(rs.getString("lic_no")==null?"":rs.getString("lic_no"));
				base.setMgr_lic_no 		(rs.getString("mgr_lic_no")==null?"":rs.getString("mgr_lic_no"));
				base.setMgr_lic_emp		(rs.getString("mgr_lic_emp")==null?"":rs.getString("mgr_lic_emp"));
				base.setMgr_lic_rel		(rs.getString("mgr_lic_rel")==null?"":rs.getString("mgr_lic_rel"));
				base.setReject_car		(rs.getString("reject_car")==null?"":rs.getString("reject_car"));
				base.setAgent_users		(rs.getString("agent_users")==null?"":rs.getString("agent_users"));
				base.setTest_lic_emp	(rs.getString("test_lic_emp")==null?"":rs.getString("test_lic_emp"));
				base.setTest_lic_rel	(rs.getString("test_lic_rel")==null?"":rs.getString("test_lic_rel"));
				base.setTest_lic_result	(rs.getString("test_lic_result")==null?"":rs.getString("test_lic_result"));
				base.setTest_lic_emp2	(rs.getString("test_lic_emp2")==null?"":rs.getString("test_lic_emp2"));
				base.setTest_lic_rel2	(rs.getString("test_lic_rel2")==null?"":rs.getString("test_lic_rel2"));
				base.setTest_lic_result2(rs.getString("test_lic_result2")==null?"":rs.getString("test_lic_result2"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCont]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//계약수정 : 출고전대차 조회 (taecha,car_reg)
	public ContTaechaBean getTaecha(String mng_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContTaechaBean taecha = new ContTaechaBean();
		String query = "";
		query = " select b.car_nm, b.init_reg_dt, a.* "+
				" from taecha a, car_reg b "+
				" where a.car_mng_id=b.car_mng_id and a.RENT_MNG_ID = ? and a.RENT_L_CD = ?";
		try {			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
	    	rs = pstmt.executeQuery();    	
			while(rs.next())
			{							
				taecha.setCar_nm		(rs.getString("CAR_NM")==null?"":rs.getString("CAR_NM"));
				taecha.setInit_reg_dt	(rs.getString("init_reg_dt")==null?"":rs.getString("init_reg_dt"));
				taecha.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				taecha.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				taecha.setNo			(rs.getString("NO")==null?"":rs.getString("NO"));
				taecha.setCar_mng_id	(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
				taecha.setCar_no		(rs.getString("CAR_NO")==null?"":rs.getString("CAR_NO"));
				taecha.setCar_id		(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
				taecha.setCar_seq		(rs.getString("TAE_CAR_SEQ")==null?"":rs.getString("TAE_CAR_SEQ"));
				taecha.setBae_user_id	(rs.getString("BAE_USER_ID")==null?"":rs.getString("BAE_USER_ID"));
				taecha.setCar_km		(rs.getString("CAR_KM")==null?"":rs.getString("CAR_KM"));
				taecha.setCar_rent_dt	(rs.getString("CAR_RENT_DT")==null?"":rs.getString("CAR_RENT_DT"));
				taecha.setCar_rent_st	(rs.getString("CAR_RENT_ST")==null?"":rs.getString("CAR_RENT_ST"));
				taecha.setCar_rent_et	(rs.getString("CAR_RENT_ET")==null?"":rs.getString("CAR_RENT_ET"));
				taecha.setBan_user_id	(rs.getString("BAN_USER_ID")==null?"":rs.getString("BAN_USER_ID"));
				taecha.setRent_fee		(rs.getString("RENT_FEE")==null?"":rs.getString("RENT_FEE"));
				taecha.setCar_rent_tm	(rs.getString("CAR_RENT_TM")==null?"":rs.getString("CAR_RENT_TM"));
				taecha.setReq_st		(rs.getString("req_st")==null?"":rs.getString("req_st"));
				taecha.setTae_st		(rs.getString("tae_st")==null?"":rs.getString("tae_st"));
				taecha.setTae_sac_id	(rs.getString("tae_sac_id")==null?"":rs.getString("tae_sac_id"));
				taecha.setRent_inv		(rs.getString("RENT_INV")==null?"":rs.getString("RENT_INV"));
				taecha.setEst_id		(rs.getString("EST_ID")==null?"":rs.getString("EST_ID"));
				taecha.setRent_s_cd		(rs.getString("RENT_S_CD")==null?"":rs.getString("RENT_S_CD"));
				taecha.setF_req_yn		(rs.getString("f_req_yn")==null?"":rs.getString("f_req_yn"));
				taecha.setF_req_dt		(rs.getString("f_req_dt")==null?"":rs.getString("f_req_dt"));
				taecha.setRent_fee_st   (rs.getString("RENT_FEE_ST")==null?"":rs.getString("RENT_FEE_ST"));
				taecha.setRent_fee_cls	(rs.getString("RENT_FEE_CLS")==null?"":rs.getString("RENT_FEE_CLS"));
				taecha.setEnd_rent_link_sac_id	(rs.getString("end_rent_link_sac_id")==null?"":rs.getString("end_rent_link_sac_id"));

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getTaecha]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return taecha;
		}
	}
	
	//계약수정 : 출고전대차 조회 (taecha,car_reg)
		public ContTaechaBean getTaecha(String mng_id, String l_cd, String no)
		{
			getConnection();
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			ContTaechaBean taecha = new ContTaechaBean();
			String query = "";
			query = " select b.car_nm, b.init_reg_dt, a.* "+
					" from taecha a, car_reg b "+
					" where a.car_mng_id=b.car_mng_id and a.RENT_MNG_ID = ? and a.RENT_L_CD = ? and a.NO = ?";
			try {			
				pstmt = conn.prepareStatement(query);
				pstmt.setString(1, mng_id);
				pstmt.setString(2, l_cd);
				pstmt.setString(3, no);
		    	rs = pstmt.executeQuery();    	
				while(rs.next())
				{							
					taecha.setCar_nm		(rs.getString("CAR_NM")==null?"":rs.getString("CAR_NM"));
					taecha.setInit_reg_dt	(rs.getString("init_reg_dt")==null?"":rs.getString("init_reg_dt"));
					taecha.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
					taecha.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
					taecha.setNo			(rs.getString("NO")==null?"":rs.getString("NO"));
					taecha.setCar_mng_id	(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
					taecha.setCar_no		(rs.getString("CAR_NO")==null?"":rs.getString("CAR_NO"));
					taecha.setCar_id		(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
					taecha.setCar_seq		(rs.getString("TAE_CAR_SEQ")==null?"":rs.getString("TAE_CAR_SEQ"));
					taecha.setBae_user_id	(rs.getString("BAE_USER_ID")==null?"":rs.getString("BAE_USER_ID"));
					taecha.setCar_km		(rs.getString("CAR_KM")==null?"":rs.getString("CAR_KM"));
					taecha.setCar_rent_dt	(rs.getString("CAR_RENT_DT")==null?"":rs.getString("CAR_RENT_DT"));
					taecha.setCar_rent_st	(rs.getString("CAR_RENT_ST")==null?"":rs.getString("CAR_RENT_ST"));
					taecha.setCar_rent_et	(rs.getString("CAR_RENT_ET")==null?"":rs.getString("CAR_RENT_ET"));
					taecha.setBan_user_id	(rs.getString("BAN_USER_ID")==null?"":rs.getString("BAN_USER_ID"));
					taecha.setRent_fee		(rs.getString("RENT_FEE")==null?"":rs.getString("RENT_FEE"));
					taecha.setCar_rent_tm	(rs.getString("CAR_RENT_TM")==null?"":rs.getString("CAR_RENT_TM"));
					taecha.setReq_st		(rs.getString("req_st")==null?"":rs.getString("req_st"));
					taecha.setTae_st		(rs.getString("tae_st")==null?"":rs.getString("tae_st"));
					taecha.setTae_sac_id	(rs.getString("tae_sac_id")==null?"":rs.getString("tae_sac_id"));
					taecha.setRent_inv		(rs.getString("RENT_INV")==null?"":rs.getString("RENT_INV"));
					taecha.setEst_id		(rs.getString("EST_ID")==null?"":rs.getString("EST_ID"));
					taecha.setRent_s_cd		(rs.getString("RENT_S_CD")==null?"":rs.getString("RENT_S_CD"));
					taecha.setF_req_yn		(rs.getString("f_req_yn")==null?"":rs.getString("f_req_yn"));
					taecha.setF_req_dt		(rs.getString("f_req_dt")==null?"":rs.getString("f_req_dt"));
					taecha.setRent_fee_st   (rs.getString("RENT_FEE_ST")==null?"":rs.getString("RENT_FEE_ST"));
					taecha.setRent_fee_cls	(rs.getString("RENT_FEE_CLS")==null?"":rs.getString("RENT_FEE_CLS"));
					taecha.setEnd_rent_link_sac_id	(rs.getString("end_rent_link_sac_id")==null?"":rs.getString("end_rent_link_sac_id"));

				}
				rs.close();
				pstmt.close();
			} catch (SQLException e) {
				System.out.println("[AddContDatabase:getTaecha]\n"+e);
		  		e.printStackTrace();
			} finally {
				try{
	                if(rs != null )		rs.close();
	                if(pstmt != null)	pstmt.close();
				}catch(Exception ignore){}
				closeConnection();
				return taecha;
			}
		}
		
		/**
		 *	마지막 연장번호 구하기
		 */
		public int getMaxTaechaNo(String m_id, String l_cd)
		{
			getConnection();
			Statement stmt = null;
			ResultSet rs = null;
			String query = "";
			int taecha_no = 0;

			query = " select max(to_number(no)) no from taecha where rent_mng_id='"+m_id+"' and rent_l_cd='"+l_cd+"'";

			try {
				stmt = conn.createStatement();
		    	rs = stmt.executeQuery(query);    	
				if(rs.next())
				{				
					taecha_no	= rs.getInt(1);
				}
				rs.close();
				stmt.close();
			} catch (SQLException e) {
				System.out.println("[AddContDatabase:getMaxTaechaNo]\n"+e);
		  		e.printStackTrace();
			} finally {
				try{
					if(rs != null )		rs.close();
					if(stmt != null)	stmt.close();
				}catch(Exception ignore){}
				closeConnection();
				return taecha_no;
			}
		}
	

	//계약수정 : 출고전대차 조회 (taecha,car_reg)
	public ContTaechaBean getTaechaRes(String s_cd, String c_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContTaechaBean taecha = new ContTaechaBean();
		String query = "";
		query = " select b.car_nm, b.init_reg_dt, a.* "+
				" from taecha a, car_reg b "+
				" where a.car_mng_id=? and a.rent_s_cd=? and a.car_mng_id=b.car_mng_id ";
		try {			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, c_id);
			pstmt.setString(2, s_cd);
	    	rs = pstmt.executeQuery();    	
			while(rs.next())
			{							
				taecha.setCar_nm		(rs.getString("CAR_NM")==null?"":rs.getString("CAR_NM"));
				taecha.setInit_reg_dt	(rs.getString("init_reg_dt")==null?"":rs.getString("init_reg_dt"));
				taecha.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				taecha.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				taecha.setNo			(rs.getString("NO")==null?"":rs.getString("NO"));
				taecha.setCar_mng_id	(rs.getString("CAR_MNG_ID")==null?"":rs.getString("CAR_MNG_ID"));
				taecha.setCar_no		(rs.getString("CAR_NO")==null?"":rs.getString("CAR_NO"));
				taecha.setCar_id		(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
				taecha.setCar_seq		(rs.getString("TAE_CAR_SEQ")==null?"":rs.getString("TAE_CAR_SEQ"));
				taecha.setBae_user_id	(rs.getString("BAE_USER_ID")==null?"":rs.getString("BAE_USER_ID"));
				taecha.setCar_km		(rs.getString("CAR_KM")==null?"":rs.getString("CAR_KM"));
				taecha.setCar_rent_dt	(rs.getString("CAR_RENT_DT")==null?"":rs.getString("CAR_RENT_DT"));
				taecha.setCar_rent_st	(rs.getString("CAR_RENT_ST")==null?"":rs.getString("CAR_RENT_ST"));
				taecha.setCar_rent_et	(rs.getString("CAR_RENT_ET")==null?"":rs.getString("CAR_RENT_ET"));
				taecha.setBan_user_id	(rs.getString("BAN_USER_ID")==null?"":rs.getString("BAN_USER_ID"));
				taecha.setRent_fee		(rs.getString("RENT_FEE")==null?"":rs.getString("RENT_FEE"));
				taecha.setCar_rent_tm	(rs.getString("CAR_RENT_TM")==null?"":rs.getString("CAR_RENT_TM"));
				taecha.setReq_st		(rs.getString("req_st")==null?"":rs.getString("req_st"));
				taecha.setTae_st		(rs.getString("tae_st")==null?"":rs.getString("tae_st"));
				taecha.setTae_sac_id	(rs.getString("tae_sac_id")==null?"":rs.getString("tae_sac_id"));
				taecha.setRent_inv		(rs.getString("RENT_INV")==null?"":rs.getString("RENT_INV"));
				taecha.setEst_id		(rs.getString("EST_ID")==null?"":rs.getString("EST_ID"));
				taecha.setRent_s_cd		(rs.getString("RENT_S_CD")==null?"":rs.getString("RENT_S_CD"));
				taecha.setRent_fee_st   (rs.getString("RENT_FEE_ST")==null?"":rs.getString("RENT_FEE_ST"));
				taecha.setRent_fee_cls	(rs.getString("RENT_FEE_CLS")==null?"":rs.getString("RENT_FEE_CLS"));
				taecha.setEnd_rent_link_sac_id	(rs.getString("end_rent_link_sac_id")==null?"":rs.getString("end_rent_link_sac_id"));

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getTaechaRes]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return taecha;
		}
	}


	/* 재계약 등록 : 지급수수료 bean query*/	
	public CommiBean getCommi(String mng_id, String l_cd, String agnt_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		CommiBean commi = new CommiBean();
		String query = "";
		query = " select  "+
				"        a.rent_mng_id, a.rent_l_cd, a.emp_id, a.agnt_st, a.commi, a.inc_amt, a.res_amt, a.tot_amt, a.dif_amt, a.sup_dt, a.rel,"+
				"        a.commi_car_amt, a.comm_rt, a.comm_r_rt, a.ch_remark, a.ch_sac_id,"+
				"        nvl(a.emp_bank,b.emp_bank) emp_bank, nvl(a.emp_acc_no,b.emp_acc_no) emp_acc_no, nvl(a.emp_acc_nm,b.emp_acc_nm) emp_acc_nm,"+
				"        b.emp_nm, decode(b.cust_st,'1','갑종근로소득','2','사업소득','3','기타사업소득') cust_st, c.car_off_id, c.car_off_nm, "+
				"        decode(c.car_off_st,'1','지점','2','영업소') car_off_st, c.car_comp_id,"+
				"        a.req_id, to_char(a.req_dt,'YYYYMMDD') req_dt, a.req_cont,"+
				"        a.commi_car_st, a.rec_incom_yn, a.rec_incom_st, a.rec_ssn, a.rec_zip, a.rec_addr, a.file_name1, a.file_name2,"+
				"        a.add_amt1, a.add_amt2, a.add_amt3, a.add_cau1, a.add_cau2, a.add_cau3, a.inc_per, a.res_per, a.tot_per, a.data_no, a.seqidx, "+
				"        a.add_st1, a.add_st2, a.add_st3, a.file_gubun1, a.file_gubun2, a.dlv_con_commi, a.dlv_tns_commi, a.agent_commi,  "+
				"        b.emp_m_tel, a.vat_amt, a.vat_per, a.sh_base_dt, a.bank_cd "+
				" from   commi a, car_off_emp b, car_off c"+
				" where  a.RENT_MNG_ID = ? and a.RENT_L_CD = ? and a.agnt_st=?"+
				"        and a.emp_id=b.emp_id(+) and b.car_off_id=c.car_off_id(+)";
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, mng_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, agnt_st);
		   	rs = pstmt.executeQuery();    	
			if(rs.next())
			{				
				commi.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				commi.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				commi.setEmp_id			(rs.getString("EMP_ID")==null?"":rs.getString("EMP_ID"));
				commi.setAgnt_st		(rs.getString("AGNT_ST")==null?"":rs.getString("AGNT_ST"));
				commi.setCommi			(rs.getInt   ("COMMI"));
				commi.setInc_amt		(rs.getInt   ("INC_AMT"));
				commi.setRes_amt		(rs.getInt   ("RES_AMT"));
				commi.setTot_amt		(rs.getInt   ("TOT_AMT"));
				commi.setDif_amt		(rs.getInt   ("DIF_AMT"));
				commi.setSup_dt			(rs.getString("SUP_DT")==null?"":rs.getString("SUP_DT"));
				commi.setRel			(rs.getString("REL")==null?"":rs.getString("REL"));
				commi.setComm_rt		(rs.getFloat ("comm_rt"));
				commi.setComm_r_rt		(rs.getFloat ("comm_r_rt"));
				commi.setCh_remark		(rs.getString("ch_remark")==null?"":rs.getString("ch_remark"));
				commi.setCh_sac_id		(rs.getString("ch_sac_id")==null?"":rs.getString("ch_sac_id"));
				commi.setEmp_bank		(rs.getString("emp_bank")==null?"":rs.getString("emp_bank"));
				commi.setEmp_acc_no		(rs.getString("emp_acc_no")==null?"":rs.getString("emp_acc_no"));
				commi.setEmp_acc_nm		(rs.getString("emp_acc_nm")==null?"":rs.getString("emp_acc_nm"));
				commi.setEmp_nm			(rs.getString("emp_nm")==null?"":rs.getString("emp_nm"));
				commi.setCust_st		(rs.getString("cust_st")==null?"":rs.getString("cust_st"));
				commi.setCar_off_id		(rs.getString("car_off_id")==null?"":rs.getString("car_off_id"));
				commi.setCar_off_nm		(rs.getString("car_off_nm")==null?"":rs.getString("car_off_nm"));
				commi.setCar_off_st		(rs.getString("car_off_st")==null?"":rs.getString("car_off_st"));
				commi.setCar_comp_id	(rs.getString("car_comp_id")==null?"":rs.getString("car_comp_id"));
				commi.setCommi_car_amt	(rs.getInt   ("commi_car_amt"));
				commi.setReq_id			(rs.getString("req_id")==null?"":rs.getString("req_id"));
				commi.setReq_dt			(rs.getString("req_dt")==null?"":rs.getString("req_dt"));
				commi.setReq_cont		(rs.getString("req_cont")==null?"":rs.getString("req_cont"));
				commi.setCommi_car_st	(rs.getString("commi_car_st")==null?"":rs.getString("commi_car_st"));
				commi.setRec_incom_yn	(rs.getString("rec_incom_yn")==null?"":rs.getString("rec_incom_yn"));
				commi.setRec_incom_st	(rs.getString("rec_incom_st")==null?"":rs.getString("rec_incom_st"));
				commi.setRec_ssn		(rs.getString("rec_ssn")==null?"":rs.getString("rec_ssn"));
				commi.setRec_zip		(rs.getString("rec_zip")==null?"":rs.getString("rec_zip"));
				commi.setRec_addr		(rs.getString("rec_addr")==null?"":rs.getString("rec_addr"));
				commi.setFile_name1		(rs.getString("file_name1")==null?"":rs.getString("file_name1"));
				commi.setFile_name2		(rs.getString("file_name2")==null?"":rs.getString("file_name2"));
				commi.setAdd_amt1		(rs.getInt   ("add_amt1"));
				commi.setAdd_amt2		(rs.getInt   ("add_amt2"));
				commi.setAdd_amt3		(rs.getInt   ("add_amt3"));
				commi.setAdd_cau1		(rs.getString("add_cau1")==null?"":rs.getString("add_cau1"));
				commi.setAdd_cau2		(rs.getString("add_cau2")==null?"":rs.getString("add_cau2"));
				commi.setAdd_cau3		(rs.getString("add_cau3")==null?"":rs.getString("add_cau3"));
				commi.setInc_per		(rs.getString("inc_per")==null?"":rs.getString("inc_per"));
				commi.setRes_per		(rs.getString("res_per")==null?"":rs.getString("res_per"));
				commi.setTot_per		(rs.getString("tot_per")==null?"":rs.getString("tot_per"));
				commi.setData_no		(rs.getString("data_no")==null?"":rs.getString("data_no"));
				commi.setSeqidx			(rs.getString("seqidx")==null?"":rs.getString("seqidx"));
				commi.setAdd_st1		(rs.getString("add_st1")==null?"":rs.getString("add_st1"));
				commi.setAdd_st2		(rs.getString("add_st2")==null?"":rs.getString("add_st2"));
				commi.setAdd_st3		(rs.getString("add_st3")==null?"":rs.getString("add_st3"));
				commi.setFile_gubun1	(rs.getString("file_gubun1")==null?"":rs.getString("file_gubun1"));
				commi.setFile_gubun2	(rs.getString("file_gubun2")==null?"":rs.getString("file_gubun2"));
				commi.setDlv_con_commi	(rs.getInt   ("dlv_con_commi"));
				commi.setDlv_tns_commi	(rs.getInt   ("dlv_tns_commi"));
				commi.setAgent_commi	(rs.getInt   ("agent_commi"));
				commi.setEmp_m_tel		(rs.getString("emp_m_tel")==null?"":rs.getString("emp_m_tel"));
				commi.setVat_amt		(rs.getInt   ("VAT_AMT"));
				commi.setVat_per		(rs.getString("vat_per")==null?"":rs.getString("vat_per"));
				commi.setSh_base_dt		(rs.getString("sh_base_dt")==null?"":rs.getString("sh_base_dt"));
				commi.setBank_cd		(rs.getString("bank_cd")==null?"":rs.getString("bank_cd"));

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCommi]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return commi;
		}					
	}	

	//계약등록 : 이행보증보험 삽입 (gua_ins)
	public boolean insertGiInsNew(ContGiInsBean gins)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " insert into GUA_INS "+
						" ( RENT_MNG_ID, RENT_L_CD, GI_NO, GI_AMT, GI_FEE, GI_START_DT, GI_END_DT, GI_DAY, GI_DT, GI_REASON, GI_SAC_ID, GI_JIJUM, RENT_ST, GI_ST, GI_MONTH )"+
						" values "+
						" ( ?, ?, ?, ?, ?, replace(?, '-', ''), replace(?, '-', ''), ?, replace(?, '-', ''), ?, ?, ?, ?, ?, ? )";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  gins.getRent_mng_id	());
			pstmt.setString(2,  gins.getRent_l_cd	());
			pstmt.setString(3,  gins.getGi_no		());
			pstmt.setInt   (4,  gins.getGi_amt		());
			pstmt.setInt   (5,  gins.getGi_fee		());
			pstmt.setString(6,  gins.getGi_start_dt	());
			pstmt.setString(7,  gins.getGi_end_dt	());
			pstmt.setString(8,  gins.getGi_day		());
			pstmt.setString(9,  gins.getGi_dt		());
			pstmt.setString(10, gins.getGi_reason	());
			pstmt.setString(11, gins.getGi_sac_id	());
			pstmt.setString(12, gins.getGi_jijum	());
			pstmt.setString(13, gins.getRent_st		());
			pstmt.setString(14, gins.getGi_st		());
			pstmt.setString(15, gins.getGi_month	());	//보증보험 가입기간(개월수) (2018.03.16)
			
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertGiInsNew]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 이행보증보험 수정 (gua_ins)
	public boolean updateGiInsNew(ContGiInsBean gins)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " update GUA_INS set"+
						" GI_NO			=?, "+
						" GI_AMT		=?, "+
						" GI_FEE		=?,"+
						" GI_START_DT	=replace(?, '-', ''), "+
						" GI_END_DT		=replace(?, '-', ''),"+
						" GI_DAY		=?, "+
						" GI_DT			=replace(?, '-', ''), "+
						" GI_REASON		=?, "+
						" GI_SAC_ID		=?, "+
						" GI_JIJUM		=?, "+
						" GI_ST  		=?,  "+
						" GI_MONTH 		=?  "+		//보증보험 가입기간(개월수) (2018.03.16)	
						" where rent_mng_id=? and rent_l_cd=? and rent_st=? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  gins.getGi_no		().trim());
			pstmt.setInt   (2,  gins.getGi_amt		());
			pstmt.setInt   (3,  gins.getGi_fee		());
			pstmt.setString(4,  gins.getGi_start_dt	().trim());
			pstmt.setString(5,  gins.getGi_end_dt	().trim());
			pstmt.setString(6,  gins.getGi_day		().trim());
			pstmt.setString(7,  gins.getGi_dt		().trim());
			pstmt.setString(8,  gins.getGi_reason	().trim());
			pstmt.setString(9,  gins.getGi_sac_id	().trim());
			pstmt.setString(10, gins.getGi_jijum	().trim());
			pstmt.setString(11, gins.getGi_st		().trim());
			pstmt.setString(12, gins.getGi_month	().trim());		//보증보험 가입기간(개월수) (2018.03.16)
			pstmt.setString(13, gins.getRent_mng_id	().trim());
			pstmt.setString(14, gins.getRent_l_cd	().trim());
			pstmt.setString(15, gins.getRent_st		().trim());
		    pstmt.executeUpdate();	
			pstmt.close();	
			conn.commit();
			
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateGiInsNew]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 출고전대차 삽입 (taecha)
	public boolean insertTaechaNew(ContTaechaBean taecha)
	{
		getConnection();
		boolean flag = true;
		PreparedStatement pstmt1=null;
		PreparedStatement pstmt2 = null;
		ResultSet rs = null;
		String rtnStr = "";
		String query =  " insert into TAECHA "+
						" ( RENT_MNG_ID, RENT_L_CD, NO, CAR_MNG_ID, CAR_NO, "+
						"   CAR_ID, BAE_USER_ID, CAR_KM, CAR_RENT_DT, CAR_RENT_ST, CAR_RENT_ET, "+
						"   BAN_USER_ID, RENT_FEE, CAR_RENT_TM, REQ_ST, "+
						"	TAE_ST, TAE_SAC_ID, TAE_CAR_SEQ, RENT_INV, est_id, rent_s_cd, f_req_yn, f_req_dt, rent_fee_st, rent_fee_cls, end_rent_link_sac_id "+
						" ) values "+
						" ( ?, ?, ?, ?, ?,  ?, ?, ?, replace(?, '-', ''), replace(?, '-', ''), replace(?, '-', ''), ?, ?, ?, ?,"+
						"   ?, ?, ?, ?, ?, ?, ?,  replace(?, '-', ''), ?, ?, ? )";

		if(taecha.getNo().equals("")){
			try
			{
				String qry_id = "select nvl(ltrim(to_char(to_number(MAX(no))+1, '0')), '0') ID from TAECHA "+
								" where  RENT_MNG_ID = '"+ taecha.getRent_mng_id()+"' and RENT_L_CD = '"+ taecha.getRent_l_cd() +"'" ;

				conn.setAutoCommit(false);

				pstmt1 = conn.prepareStatement(qry_id);
			   	rs = pstmt1.executeQuery();
				while(rs.next())
				{
					rtnStr = rs.getString(1)==null?"":rs.getString(1);
				}
				taecha.setNo(rtnStr);
				conn.commit();
				rs.close();
				pstmt1.close();
			}catch(Exception e){					
		        try{
					System.out.println("[AddContDatabase:insertTaecha]"+e);
		            conn.rollback();
					e.printStackTrace();	
					flag = false;
		        }catch(SQLException _ignored){}
			}finally{
				try{
	                if(rs != null )		rs.close();
		            if(pstmt1 != null)	pstmt1.close();
					conn.setAutoCommit(true);
				}catch(Exception ignore){}
			}
		}

		try
		{
			conn.setAutoCommit(false);

			pstmt2 = conn.prepareStatement(query);
			pstmt2.setString(1,  taecha.getRent_mng_id());
			pstmt2.setString(2,  taecha.getRent_l_cd());
			pstmt2.setString(3,  taecha.getNo());
			pstmt2.setString(4,  taecha.getCar_mng_id());
			pstmt2.setString(5,  taecha.getCar_no());
			pstmt2.setString(6,  taecha.getCar_id());
			pstmt2.setString(7,  taecha.getBae_user_id());
			pstmt2.setString(8,  taecha.getCar_km());
			pstmt2.setString(9,  taecha.getCar_rent_dt());
			pstmt2.setString(10, taecha.getCar_rent_st());
			pstmt2.setString(11, taecha.getCar_rent_et());
			pstmt2.setString(12, taecha.getBan_user_id());
			pstmt2.setString(13, taecha.getRent_fee());
			pstmt2.setString(14, taecha.getCar_rent_tm());
			pstmt2.setString(15, taecha.getReq_st());
			pstmt2.setString(16, taecha.getTae_st());
			pstmt2.setString(17, taecha.getTae_sac_id());
			pstmt2.setString(18, taecha.getCar_seq());
			pstmt2.setString(19, taecha.getRent_inv());
			pstmt2.setString(20, taecha.getEst_id());
			pstmt2.setString(21, taecha.getRent_s_cd());
			pstmt2.setString(22, taecha.getF_req_yn());
			pstmt2.setString(23, taecha.getF_req_dt());
			pstmt2.setString(24, taecha.getRent_fee_st());
			pstmt2.setString(25, taecha.getRent_fee_cls());
			pstmt2.setString(26, taecha.getEnd_rent_link_sac_id());

			pstmt2.executeUpdate();

			conn.commit();
		
			pstmt2.close();

		    
	  	}catch(Exception e){
			System.out.println("[AddContDatabase:insertTaechaNew]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
	            if(pstmt2 != null)	pstmt2.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 출고전대차 수정 (taecha)
	public boolean updateTaechaNew(ContTaechaBean taecha)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update TAECHA set "+
						" BAE_USER_ID	= ?, "+
						" BAN_USER_ID	= ?, "+
						" CAR_KM		= ?, "+
						" CAR_RENT_DT	= replace(?, '-', ''), "+
						" CAR_RENT_ST	= replace(?, '-', ''), "+
						" CAR_RENT_ET	= replace(?, '-', ''), "+
						" RENT_FEE		= ?, "+
						" CAR_RENT_TM	= ?, "+
						" REQ_ST		= ?, "+
						" TAE_ST		= ?, "+
						" TAE_SAC_ID	= ?, "+
						" CAR_MNG_ID	= ?, "+
						" CAR_NO		= ?, "+
						" CAR_ID		= ?, "+
						" RENT_INV		= ?, "+
						" EST_ID		= ?, "+
						" RENT_S_CD		= ?, "+
						" f_req_yn		= ?, "+
						" f_req_dt		= replace(?, '-', ''), "+ 
						" RENT_FEE_ST	= ?, "+ 
						" RENT_FEE_CLS	= ?, "+
						" end_rent_link_sac_id	= ?  "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and NO = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, taecha.getBae_user_id()	);
			pstmt.setString(2, taecha.getBan_user_id()	);
			pstmt.setString(3, taecha.getCar_km()		);
			pstmt.setString(4, taecha.getCar_rent_dt()	);
			pstmt.setString(5, taecha.getCar_rent_st()	);
			pstmt.setString(6, taecha.getCar_rent_et()	);
			pstmt.setString(7, taecha.getRent_fee()		);
			pstmt.setString(8, taecha.getCar_rent_tm()	);
			pstmt.setString(9, taecha.getReq_st()		);
			pstmt.setString(10,taecha.getTae_st()		);
			pstmt.setString(11,taecha.getTae_sac_id()	);
		    pstmt.setString(12,taecha.getCar_mng_id()	);
			pstmt.setString(13,taecha.getCar_no()		);
			pstmt.setString(14,taecha.getCar_id()		);
			pstmt.setString(15,taecha.getRent_inv()		);
			pstmt.setString(16,taecha.getEst_id()		);
			pstmt.setString(17,taecha.getRent_s_cd()	);
			pstmt.setString(18,taecha.getF_req_yn()		);
			pstmt.setString(19,taecha.getF_req_dt()		);
			pstmt.setString(20, taecha.getRent_fee_st()	);
			pstmt.setString(21, taecha.getRent_fee_cls());
			pstmt.setString(22, taecha.getEnd_rent_link_sac_id());
		    pstmt.setString(23,taecha.getRent_mng_id()	);
			pstmt.setString(24,taecha.getRent_l_cd()	);
			pstmt.setString(25,taecha.getNo()			);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateTaechaNew]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약등록 : 지급수수료-자동차영업사원 삽입 (commi)
	public boolean insertCommiNew(CommiBean commi)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " insert into COMMI"+
						" ( RENT_MNG_ID, EMP_ID, RENT_L_CD, AGNT_ST, COMMI, INC_AMT,"+
						"   RES_AMT, TOT_AMT, DIF_AMT, SUP_DT, REL, COMMI_ST,"+
						"   COMM_RT, COMM_R_RT, CH_REMARK, CH_SAC_ID, EMP_BANK, EMP_ACC_NO, EMP_ACC_NM, COMMI_CAR_AMT, COMMI_CAR_ST, sh_base_dt, file_gubun1 "+
						"  ) values"+
						"  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"+
						"   ?, ?, ?, ?, ?, ?, ?, ?, ?, replace(?, '-', ''), replace(?, '-', '')  )";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, commi.getRent_mng_id());
			pstmt.setString(2, commi.getEmp_id());
			pstmt.setString(3, commi.getRent_l_cd());
			pstmt.setString(4, commi.getAgnt_st());
			pstmt.setInt   (5, commi.getCommi());
			pstmt.setInt   (6, commi.getInc_amt());
			pstmt.setInt   (7, commi.getRes_amt());
			pstmt.setInt   (8, commi.getTot_amt());
			pstmt.setInt   (9, commi.getDif_amt());
			pstmt.setString(10,commi.getSup_dt());
			pstmt.setString(11,commi.getRel());
			pstmt.setString(12,commi.getCommi_st());
			pstmt.setFloat (13,commi.getComm_rt());
			pstmt.setFloat (14,commi.getComm_r_rt());
			pstmt.setString(15,commi.getCh_remark());
			pstmt.setString(16,commi.getCh_sac_id());
			pstmt.setString(17,commi.getEmp_bank());
			pstmt.setString(18,commi.getEmp_acc_no());
			pstmt.setString(19,commi.getEmp_acc_nm());
			pstmt.setInt   (20,commi.getCommi_car_amt());
			pstmt.setString(21,commi.getCommi_car_st());
			pstmt.setString(22,commi.getSh_base_dt());
			pstmt.setString(23,commi.getFile_gubun1());

		    	pstmt.executeUpdate();
		    	pstmt.close();
			conn.commit();
	  	}
	  	catch(Exception e)
	  	{
			System.out.println("[AddContDatabase:insertCommiNew]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 수정 : 지급수수료 관련 영업소사원 수정(commi)
	public boolean updateCommiNew(CommiBean commi)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update COMMI set "+

						" COMMI				= ?, "+
						" INC_AMT			= ?, "+
						" RES_AMT			= ?, "+
						" TOT_AMT			= ?, "+
						" DIF_AMT			= ?, "+
						" SUP_DT			= replace(?, '-', ''), "+
						" REL				= ?, "+
						" COMMI_ST			= ?, "+	
						" COMM_RT			= ?, "+	
						" COMM_R_RT			= ?, "+	
						" CH_REMARK			= ?, "+	
						" CH_SAC_ID			= ?, "+	
						" EMP_BANK			= ?, "+	
						" EMP_ACC_NO		= ?, "+	
						" EMP_ACC_NM		= ?, "+
						" COMMI_CAR_AMT		= ?, "+
						" EMP_ID			= ?, "+
						" REQ_DT			= replace(?, '-', ''), "+
						" REQ_ID			= ?, "+
						" REQ_CONT			= ?, "+
						" commi_car_st		= ?, "+
						" rec_incom_yn		= ?, "+
						" rec_incom_st		= ?, "+
						" rec_ssn			= replace(?, ' ', ''), "+
						" rec_zip			= ?, "+
						" rec_addr			= ?, "+
						" file_name1		= ?, "+
						" file_name2		= ?, "+
						" add_amt1			= ?, "+
						" add_amt2			= ?, "+
						" add_amt3			= ?, "+
						" add_cau1			= ?, "+
						" add_cau2			= ?, "+
						" add_cau3			= ?, "+
						" inc_per			= ?, "+
						" res_per			= ?, "+
						" tot_per			= ?, "+
						" data_no			= ?, "+
						" seqidx			= ?, "+
						" add_st1			= ?, "+
						" add_st2			= ?, "+
						" add_st3			= ?, "+
						" acct_cd1			= ?, "+
						" acct_cd2			= ?, "+
						" acct_cd3			= ?, "+
						" send_amt			= ?, "+
						" file_gubun1		= ?, "+
						" file_gubun2		= ?, "+
						" dlv_con_commi		= ?, "+
						" dlv_tns_commi		= ?, "+
						" agent_commi		= ?, "+
						" vat_amt			= ?, "+
						" vat_per			= ?, "+
						" sh_base_dt		= replace(?, '-', ''), "+	
						" BANK_CD			= ?  "+

						" where "+
						" RENT_MNG_ID = ? and RENT_L_CD = ? and AGNT_ST = ?";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);

			pstmt.setInt   (1, commi.getCommi		());
			pstmt.setInt   (2, commi.getInc_amt		());
			pstmt.setInt   (3, commi.getRes_amt		());
			pstmt.setInt   (4, commi.getTot_amt		());
			pstmt.setInt   (5, commi.getDif_amt		());
			pstmt.setString(6, commi.getSup_dt		());
			pstmt.setString(7, commi.getRel			());
			pstmt.setString(8, commi.getCommi_st	());
			pstmt.setFloat (9, commi.getComm_rt		());
			pstmt.setFloat (10,commi.getComm_r_rt	());
			pstmt.setString(11,commi.getCh_remark	());
			pstmt.setString(12,commi.getCh_sac_id	());
			pstmt.setString(13,commi.getEmp_bank	());
			pstmt.setString(14,commi.getEmp_acc_no	());
			pstmt.setString(15,commi.getEmp_acc_nm	());
			pstmt.setInt   (16,commi.getCommi_car_amt());
			pstmt.setString(17,commi.getEmp_id		());
			pstmt.setString(18,commi.getReq_dt		());
			pstmt.setString(19,commi.getReq_id		());
			pstmt.setString(20,commi.getReq_cont	());
			pstmt.setString(21,commi.getCommi_car_st());
			pstmt.setString(22,commi.getRec_incom_yn());
			pstmt.setString(23,commi.getRec_incom_st());
			pstmt.setString(24,commi.getRec_ssn		().trim());
			pstmt.setString(25,commi.getRec_zip  	());
			pstmt.setString(26,commi.getRec_addr	());
			pstmt.setString(27,commi.getFile_name1	());
			pstmt.setString(28,commi.getFile_name2	());
			pstmt.setInt   (29,commi.getAdd_amt1	());
			pstmt.setInt   (30,commi.getAdd_amt2	());
			pstmt.setInt   (31,commi.getAdd_amt3	());
			pstmt.setString(32,commi.getAdd_cau1 	());
			pstmt.setString(33,commi.getAdd_cau2 	());
			pstmt.setString(34,commi.getAdd_cau3 	());
			pstmt.setString(35,commi.getInc_per 	());
			pstmt.setString(36,commi.getRes_per 	());
			pstmt.setString(37,commi.getTot_per 	());
			pstmt.setString(38,commi.getData_no 	());
			pstmt.setString(39,commi.getSeqidx	 	());
			pstmt.setString(40,commi.getAdd_st1 	());
			pstmt.setString(41,commi.getAdd_st2 	());
			pstmt.setString(42,commi.getAdd_st3 	());

			pstmt.setString(43,commi.getAcct_cd1 	());
			pstmt.setString(44,commi.getAcct_cd2 	());
			pstmt.setString(45,commi.getAcct_cd3 	());
			pstmt.setInt   (46,commi.getSend_amt	());
			pstmt.setString(47,commi.getFile_gubun1	());
			pstmt.setString(48,commi.getFile_gubun2	());
			pstmt.setInt   (49,commi.getDlv_con_commi());
			pstmt.setInt   (50,commi.getDlv_tns_commi());
			pstmt.setInt   (51,commi.getAgent_commi());

			pstmt.setInt   (52,commi.getVat_amt		());
			pstmt.setString(53,commi.getVat_per 	());
			pstmt.setString(54,commi.getSh_base_dt 	());
			pstmt.setString(55,commi.getBank_cd		());

		    pstmt.setString(56,commi.getRent_mng_id	());
			pstmt.setString(57,commi.getRent_l_cd	());
			pstmt.setString(58,commi.getAgnt_st		());

		    pstmt.executeUpdate();
		    pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateCommiNew]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//미결 계약 검색 : 리스트 조회 - saction_st: 결재가 아닌 것 (보류나 입력 중인 계약 건)
	public Vector getHoldContList(String s_kd, String t_wd, String sort, String asc, String gubun1, String gubun2, String gubun3, String gubun4)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  "+
					" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.brch_id, c.mng_br_id,"+
					" b.firm_nm, a.bus_id, c.bus_agnt_id, a.bus_id2, a.rent_dt,"+
					" decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st, "+
					" decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st,"+
					" decode(nvl(a.car_gu,a.reg_id),'1','신차','0','보유차') car_gu,"+
					" decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, "+
					" decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way,"+
					" decode(m.cls_st,'4','차종변경','5','계약승계') cng_st,"+
					" b.firm_nm, b.client_nm, e.r_site as site_nm,"+
					" f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num,"+
					" o.nm car_ext,"+
					" g.rpt_no, j.car_nm,"+
					" k.user_nm bus_nm, l.user_nm bus_agnt_nm, n.user_nm bus_nm2"+
					" from cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, car_etc h, car_nm i, car_mng j, users k, users l, users n, (select * from cls_cont where cls_st in ('4','5')) m, (select * from code where c_st='0032') o "+
					" where"+
					" nvl(a.use_yn,'Y')='Y'"+
					" and nvl(c.sanction_st,'0') <> '1'"+
					" and a.client_id=b.client_id"+
					" and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+)"+
					" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd and d.rent_st='1'"+
					" and a.client_id=e.client_id(+) and a.r_site=e.seq(+)"+
					" and a.car_mng_id=f.car_mng_id(+)"+
					" and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd"+
					" and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd"+
					" and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code"+
					" and a.bus_id=k.user_id(+)"+
					" and c.bus_agnt_id=l.user_id(+)"+
					" and a.bus_id2=n.user_id(+)"+
					" and a.rent_mng_id=m.rent_mng_id(+) and a.reg_dt=m.reg_dt(+)"+
					" and nvl(f.car_ext,h.car_ext) =  o.nm_cd"+
					" ";

			if(gubun1.equals("1") && !gubun2.equals(""))	query += " and a.brch_id   = '"+ gubun2 +"'";
			if(gubun1.equals("2") && !gubun2.equals(""))	query += " and c.mng_br_id = '"+ gubun2 +"'";

			if(gubun3.equals("1") && !gubun4.equals("") && !gubun4.equals("000000"))	query += " and a.bus_id = '"+ gubun4 +"'";
			if(gubun3.equals("1") && !gubun4.equals("") &&  gubun4.equals("000000"))	query += " and a.bus_id is null";

			if(gubun3.equals("2") && !gubun4.equals("") && !gubun4.equals("000000"))	query += " and c.bus_agnt_id = '"+ gubun4 +"'";
			if(gubun3.equals("2") && !gubun4.equals("") &&  gubun4.equals("000000"))	query += " and c.bus_agnt_id is null";

			if(gubun3.equals("3") && !gubun4.equals("") && !gubun4.equals("000000"))	query += " and a.bus_id2 = '"+ gubun4 +"'";
			if(gubun3.equals("3") && !gubun4.equals("") &&  gubun4.equals("000000"))	query += " and a.bus_id2 is null";

			if(s_kd.equals("1"))	query += " and nvl(lower(b.firm_nm), ' ') like lower('%"+ AddUtil.replace(t_wd,"AND","&") +"%') ";
			if(s_kd.equals("2"))	query += " and upper(nvl(a.rent_l_cd, ' ')) like upper('%"+ t_wd +"%')";
			if(s_kd.equals("3"))	query += " and nvl(f.car_no, ' ') like '%"+ t_wd +"%' ";
			if(s_kd.equals("4"))	query += " and nvl(f.car_doc_no, ' ') like '%"+ t_wd +"%' ";
			if(s_kd.equals("7"))	query += " and nvl(f.car_num, ' ') like '%"+ t_wd +"%' ";
			if(s_kd.equals("6"))	query += " and nvl(g.rpt_no, ' ') like '%"+ t_wd +"%'";

			String desc = " asc";
			if(asc.equals("2"))		desc = " desc";

			if(sort.equals("1"))	query += " order by a.rent_dt"+desc;
			if(sort.equals("2"))	query += " order by b.firm_nm"+desc;
			if(sort.equals("3"))	query += " order by j.car_nm||i.car_name"+desc;
			if(sort.equals("4"))	query += " order by f.car_no"+desc;
			if(sort.equals("5"))	query += " order by nvl(f.car_ext,h.car_ext)"+desc+", a.rent_dt";
			if(sort.equals("6"))	query += " order by f.car_doc_no"+desc;
			if(sort.equals("7"))	query += " order by decode(a.rent_st, '2','0', '5','1', '6','2', '7','3', '3','4', '4','5', '1','6')"+desc+", a.rent_dt";
			if(sort.equals("8"))	query += " order by decode(a.bus_st, '1','1','2','4','3','5','4','3','5','2','6','6','7','7')"+desc+", a.rent_dt";
			if(sort.equals("9"))	query += " order by nvl(a.car_gu,a.reg_id)"+desc+", a.rent_dt";
			if(sort.equals("10"))	query += " order by decode(a.car_st,'1','1','2','3','3','2')"+desc+", a.rent_dt"; 
			if(sort.equals("11"))	query += " order by d.rent_way"+desc+", a.rent_dt";
			if(sort.equals("12"))	query += " order by decode(a.brch_id,'S1','1','K1','2','B1','3','N1','4','D1','5')"+desc+", a.rent_dt";
			if(sort.equals("13"))	query += " order by decode(c.mng_br_id,'S1','1','K1','2','B1','3','N1','4','D1','5')"+desc+", a.rent_dt";
			if(sort.equals("14"))	query += " order by k.user_nm"+desc+", a.rent_dt";
			if(sort.equals("15"))	query += " order by l.user_nm"+desc+", a.rent_dt";
			if(sort.equals("16"))	query += " order by n.user_nm"+desc+", a.rent_dt";


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getHoldContList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//미결 계약 검색 : 리스트 조회
	public Vector getHoldContList(String s_kd, String t_wd, String andor, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  "+
					" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.brch_id, c.mng_br_id,"+
					" b.firm_nm, nvl(d.ext_agnt,a.bus_id) as bus_id, decode(d.rent_st,'1',c.bus_agnt_id,q.bus_agnt_id) bus_agnt_id, a.bus_id2, nvl(d.rent_dt,a.rent_dt) rent_dt, nvl(c.rent_suc_dt,o.cls_dt) rent_suc_dt, "+
					" decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st, "+
					" decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st,"+
					" decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu,"+
					" decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st, "+
					" decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way,"+
					" decode(d.rent_st,'1','','연장') ext_st,"+
  					" decode(d.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(o.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					" decode(o.cls_st,'4','차종변경','5','계약승계') cng_st,"+
					" b.firm_nm, b.client_nm, e.r_site as site_nm,"+
					" f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, "+
					" nvl(ec.nm,ec2.nm) car_ext,"+
					" g.rpt_no, j.car_nm,"+
					" k.user_nm as bus_nm, nvl(qu.user_nm,l.user_nm) as bus_agnt_nm, n.user_nm as bus_nm2, decode(d.ext_agnt,'',m.user_nm,k.user_nm) as bus_nm3, d.rent_st as fee_rent_st,"+
					" decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					" a.reg_step, d.rent_start_dt, d.rent_end_dt "+
					" from cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, car_etc h, car_nm i, car_mng j, users k, users l, users n, users m, "+
					"      (select * from cls_cont where cls_st in ('4','5')) o,"+
					"      (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) p, fee_etc q, users qu, "+
					"      (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 "+
					" where "+
					" ((a.use_yn is null) or (a.use_yn='Y' and decode(o.cls_st,'4','2','5','2',d.rent_st)>'1' and d.rent_dt > '20071013' and nvl(to_char(a.sanction_date,'YYYYMMDD'),'00000000') < replace(d.rent_dt,' ','')))"+
					" and a.car_st<>'4' "+
					" and a.client_id=b.client_id"+
					" and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+)"+
					" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
					" and a.client_id=e.client_id(+) and a.r_site=e.seq(+)"+
					" and a.car_mng_id=f.car_mng_id(+)"+
					" and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd"+
					" and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd"+
					" and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code"+
					" and nvl(d.ext_agnt,a.bus_id)=k.user_id"+
					" and c.bus_agnt_id=l.user_id(+)"+
					" and a.bus_id2=n.user_id(+)"+
					" and a.bus_id3=m.user_id(+)"+
					" and a.rent_mng_id=o.rent_mng_id(+) and a.reg_dt=o.reg_dt(+)"+
					" and d.rent_mng_id=p.rent_mng_id and d.rent_l_cd=p.rent_l_cd and d.rent_st=p.rent_st"+
					" and d.rent_mng_id=q.rent_mng_id(+) and d.rent_l_cd=q.rent_l_cd(+) and d.rent_st=q.rent_st(+)"+
					" and q.bus_agnt_id=qu.user_id(+)"+
					" and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)"+
					" ";

			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			if(gubun3.equals("1")) query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2")) query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3")) query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4")) query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5")) query += " and a.car_st<>'2' and a.car_gu='2'";
			if(gubun3.equals("6")) query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and o.cls_st='5'";
			if(gubun3.equals("8")) query += " and a.car_st<>'2' and o.cls_st='4'";
			if(gubun3.equals("9")) query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("12")) query += " and a.car_st<>'2' and a.rent_st='1' and d.rent_st='1'";
			if(gubun3.equals("13")) query += " and a.car_st<>'2' and a.rent_st='4' and d.rent_st='1'";
			if(gubun3.equals("14")) query += " and a.car_st<>'2' and a.rent_st='3' and d.rent_st='1'";

			
			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(f.car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(f.car_doc_no, ' '))";	
			if(s_kd.equals("5"))	what = "upper(nvl(f.car_num, ' '))";		
			if(s_kd.equals("6"))	what = "upper(nvl(g.rpt_no, ' '))";	
			if(s_kd.equals("7"))	what = "upper(nvl(a.brch_id, ' '))";	
			if(s_kd.equals("8"))	what = "upper(nvl(k.user_nm, ' '))";		
			if(s_kd.equals("9"))	what = "upper(nvl(j.car_nm||i.car_name, ' '))";	
			if(s_kd.equals("10"))	what = "upper(nvl(a.reg_dt, ' '))";		
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";				
			}

			query += " order by decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') desc, "+
					 "          decode(o.cls_st,'',nvl(d.rent_dt,a.rent_dt), decode(sign(to_date(nvl(c.rent_suc_dt,o.cls_dt),'YYYYMMDD')-to_date(d.rent_dt,'YYYYMMDD')),-1,d.rent_dt,nvl(c.rent_suc_dt,o.cls_dt))) desc,"+
					 "          a.rent_mng_id";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
	    	    	
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getHoldContList(String s_kd, String t_wd, String andor, String gubun2)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약 수정 : 법인고객차량관리자 조회 (car_mgr)
	public Vector getCarMgrListNew(String rent_mng_id, String rent_l_cd, String use_yn)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector rtn = new Vector();
		String query = " select * from CAR_MGR"+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and mgr_st<>'대표이사'";
		
		if(!use_yn.equals("")) query += " and nvl(decode(use_yn,'1','Y',use_yn),'Y')='"+use_yn+"' ";

		query += " order by MGR_ID";


		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			rs = pstmt.executeQuery();
    	
			while(rs.next())
			{
				CarMgrBean car_mgr = new CarMgrBean();
				car_mgr.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				car_mgr.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));	
				car_mgr.setMgr_id		(rs.getString("MGR_ID")==null?"":rs.getString("MGR_ID"));
				car_mgr.setMgr_st		(rs.getString("MGR_ST")==null?"":rs.getString("MGR_ST"));
				car_mgr.setMgr_nm		(rs.getString("MGR_NM")==null?"":rs.getString("MGR_NM"));
				car_mgr.setMgr_dept		(rs.getString("MGR_DEPT")==null?"":rs.getString("MGR_DEPT"));
				car_mgr.setMgr_title	(rs.getString("MGR_TITLE")==null?"":rs.getString("MGR_TITLE"));
				car_mgr.setMgr_tel		(rs.getString("MGR_TEL")==null?"":rs.getString("MGR_TEL"));
				car_mgr.setMgr_m_tel	(rs.getString("MGR_M_TEL")==null?"":rs.getString("MGR_M_TEL"));
				car_mgr.setMgr_email	(rs.getString("MGR_EMAIL")==null?"":rs.getString("MGR_EMAIL"));
				car_mgr.setMgr_zip		(rs.getString("MGR_ZIP")==null?"":rs.getString("MGR_ZIP"));
				car_mgr.setMgr_addr		(rs.getString("MGR_ADDR")==null?"":rs.getString("MGR_ADDR"));
				car_mgr.setUse_yn		(rs.getString("USE_YN")==null?"":rs.getString("USE_YN"));
				car_mgr.setEmail_yn		(rs.getString("EMAIL_YN")==null?"":rs.getString("EMAIL_YN"));
				car_mgr.setCom_nm		(rs.getString("COM_NM")==null?"":rs.getString("COM_NM"));
				car_mgr.setLic_no		(rs.getString("LIC_NO")==null?"":rs.getString("LIC_NO"));
				car_mgr.setLic_st		(rs.getString("LIC_ST")==null?"":rs.getString("LIC_ST"));
				car_mgr.setSsn			(rs.getString("SSN")==null?"":rs.getString("SSN"));
				car_mgr.setEtc			(rs.getString("ETC")==null?"":rs.getString("ETC"));
				car_mgr.setLic_result	(rs.getString("LIC_RESULT")==null?"":rs.getString("LIC_RESULT"));
				rtn.add(car_mgr);
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarMgrListNew]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtn;
		}			
	}

	//계약 수정 : 법인고객차량관리자 조회 (car_mgr)
	public Vector getCarMgrClientList(String client_id, String use_yn)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector rtn = new Vector();

		String query =  " select distinct mgr_id, mgr_st, mgr_nm, mgr_m_tel, mgr_title from CAR_MGR"+
						" where  mgr_st<>'대표이사' "+
						"        and (RENT_MNG_ID,RENT_L_CD) in (select rent_mng_id, rent_l_cd from cont where use_yn='Y' and client_id=?) ";
		
		if(!use_yn.equals("")) query += " and nvl(decode(use_yn,'1','Y',use_yn),'Y')='"+use_yn+"' ";


		query += " order by mgr_id ";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);
			rs = pstmt.executeQuery();
    	
			while(rs.next())
			{
				CarMgrBean car_mgr = new CarMgrBean();
				car_mgr.setMgr_st		(rs.getString("MGR_ST")==null?"":rs.getString("MGR_ST"));
				car_mgr.setMgr_nm		(rs.getString("MGR_NM")==null?"":rs.getString("MGR_NM"));
				car_mgr.setMgr_m_tel	(rs.getString("MGR_M_TEL")==null?"":rs.getString("MGR_M_TEL"));
				car_mgr.setMgr_title	(rs.getString("MGR_TITLE")==null?"":rs.getString("MGR_TITLE"));
				rtn.add(car_mgr);
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarMgrClientList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtn;
		}			
	}

	//출고지연대차 예약시스템 등록확인
	public int getRentContChk(String car_mng_id, String client_id, String car_rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int count = 0;
		String query = " select count(*) from rent_cont"+
						" where rent_st='10' and car_mng_id=? and cust_id=? and substr(deli_dt,1,8)=replace(?, '-', '')";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, car_mng_id);
			pstmt.setString(2, client_id);
			pstmt.setString(3, car_rent_st);
		    rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				count = rs.getInt(1);
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentContChk]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return count;
		}			
	}

	//출고지연대차 예약시스템 등록확인
	public String getRentContChkGetCD(String car_mng_id, String client_id, String car_rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;		
		String rent_s_cd = "";
		String query = " select rent_s_cd from rent_cont"+
						" where rent_st='10' and car_mng_id=? and cust_id=? and substr(deli_dt,1,8)=replace(?, '-', '')";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, car_mng_id);
			pstmt.setString(2, client_id);
			pstmt.setString(3, car_rent_st);
		    rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				rent_s_cd = rs.getString(1);
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentContChkGetCD]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rent_s_cd;
		}			
	}

	//CMS 고객 리스트 조회 (gubun - 1:상호, 2:계약번호)
	public Vector getCmsContList(String s_kd, String t_wd, String gubun1)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  "+
				" a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id,"+
				" a.rent_dt, c.firm_nm, d.car_no, b.rent_start_dt,"+
				" decode(nvl(e.cnt,0),0,'-','생성') scd_yn,"+
				" decode(f.reg_st,'1','등록','2','해지','미등록') reg_st,"+
				" decode(a.use_yn,'Y','진행','N','해지','미결') use_st,"+
				" f.cms_day, f.cms_bank, f.cms_acc_no, f.cms_dep_nm, \n"+				
			//	" decode(g.cbit,'1','신규','2','승인','3','해지신청','4','해지완료','7','임의해지','8','신고에러') cbit,"+
				" decode(g.cms_status, '0', '신규', '1','신규신청중','2','신규신청불능','3','신청완료','11','해지','12','해지신청중','13','해지완료','-') cbit, \n"+
				" h.user_nm, h2.user_nm as reg_nm   "+
				" from cont a, fee b, client c, car_reg d,"+
				" (select rent_mng_id, rent_l_cd, count(*) cnt from scd_fee group by rent_mng_id, rent_l_cd) e,"+
				" cms_mng f, cms.member_user g, users h, users h2  "+
				" where a.car_st<>'2'"+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1'"+
				" and (b.fee_pay_st='1' or f.app_dt is not null)"+
				" and a.client_id=c.client_id"+
				" and a.car_mng_id=d.car_mng_id(+)"+
				" and a.rent_mng_id=e.rent_mng_id(+) and a.rent_l_cd=e.rent_l_cd(+)"+
				" and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+)"+
				" and a.rent_l_cd=g.cms_primary_seq(+)"+
				" and nvl(b.ext_agnt,a.bus_id)=h.user_id "+
				" and nvl(f.update_id,f.reg_id)=h2.user_id(+) "+				
				" and a.rent_dt > '20071019'";

		String what = "";

		if(gubun1.equals("Y"))			query += " and g.cms_status is not null";
		else if(gubun1.equals("N"))		query += " and g.cms_status is null and nvl(a.use_yn,'N')='Y' and b.fee_pay_st='1'";

		if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";		
		if(s_kd.equals("4"))	what = "upper(nvl(h.user_nm, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(b.rent_start_dt, ' '))";	
		if(s_kd.equals("6"))	what = "upper(nvl(f.app_dt, ' '))";	
		if(s_kd.equals("7"))	what = "upper(nvl(f.cms_start_dt, ' '))";	
		if(s_kd.equals("8"))	what = "upper(nvl(h2.user_nm, ' '))";	


			


		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper(replace('%"+t_wd+"%','-','')) ";

		}else{
			if(gubun1.equals(""))		query += " and nvl(a.use_yn,'Y')='Y' and f.app_dt is null and f.cms_dep_ssn is null ";
		}	
		
		if(s_kd.equals("6")) 		query += " order by h2.user_nm, decode(a.use_yn,'Y','2','N','3','1'), decode(g.cms_status,'',0,1), b.rent_start_dt, a.rent_dt, a.rent_mng_id";
		else						query += " order by decode(a.use_yn,'Y','2','N','3','1'), decode(g.cms_status,'',0,1), b.rent_start_dt, a.rent_dt, a.rent_mng_id";

		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCmsContList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//CMS 고객 리스트 조회 (gubun - 1:상호, 2:계약번호)
	public Vector getCmsContList(String s_kd, String t_wd, String st_dt, String end_dt, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  "+
				" a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, a.car_st, \n"+
				" a.rent_dt, c.firm_nm, d.car_no, b.rent_start_dt,"+
				" decode(nvl(e.cnt,0),0,'-','생성') scd_yn,"+
				" decode(f.reg_st,'1',decode(f.app_dt,'','-','신청'),'2','해지','-') reg_st,"+
				" decode(a.use_yn,'Y','진행','N','해지','미결') use_st,"+
				" f.cms_day, f.cms_bank, f.cms_acc_no, f.cms_dep_nm, f.cms_start_dt, \n"+
				" decode(g.cms_status, '0', '신규', '1','신규신청중','2','신규신청불능','3','신청완료','11','해지','12','해지신청중','13','해지완료','-') cbit, \n"+
				" h.user_nm, h2.user_nm as reg_nm, h3.user_nm as app_nm, f.app_dt, b.rent_st, i.rent_suc_dt , \n"+
				"   case when i.rent_suc_dt is null and a.car_gu = '1' then  nvl(al.cms_code, d.cms_code) else nvl(al.cms_code,  nvl(d.cms_code, '9951572587') ) end cms_code \n"+
          	" from   cont a, fee b, client c, car_reg d, \n"+
				"        (select rent_mng_id, rent_l_cd, count(*) cnt from scd_fee group by rent_mng_id, rent_l_cd) e, \n"+
				"        cms_mng f, cms.member_user  g, users h, users h2, users h3, cont_etc i , allot al \n"+
				" where a.car_st in ('1','3') "+ //월렌트CMS는 별도로 한다.
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1' \n"+
				" and (b.fee_pay_st='1' or f.app_dt is not null)"+
				" and a.client_id=c.client_id"+
				" and a.car_mng_id=d.car_mng_id(+) \n"+
				" and a.rent_mng_id=e.rent_mng_id(+) and a.rent_l_cd=e.rent_l_cd(+)"+
				" and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+) \n"+
				" and a.rent_l_cd=g.cms_primary_seq(+)"+
				" and decode(b.rent_st,'1',a.bus_id,b.ext_agnt)=h.user_id \n"+
				" and f.reg_id=h2.user_id(+) "+
    			" and f.app_id=h3.user_id(+) "+
				" and a.rent_mng_id=i.rent_mng_id(+) and a.rent_l_cd=i.rent_l_cd(+) \n"+
				" and a.rent_mng_id=al.rent_mng_id(+) and a.rent_l_cd=al.rent_l_cd(+)   \n"+		
				" " ;


		String what = "";
		String dt1 = "";
		String dt2 = "";


		dt1 = "substr(f.app_dt,1,6)";
		dt2 = "f.app_dt";

		if(gubun3.equals("2"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
		else if(gubun3.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";
		else if(gubun3.equals("4"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";//전일
		else if(gubun3.equals("3")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}

		if(!gubun4.equals("")){	
			if(gubun4.equals("9"))		query += " and g.cms_status is null and nvl(a.use_yn,'Y')='Y' and b.fee_pay_st='1' and e.rent_l_cd||b.rent_start_dt is not null ";//
			else 						query += " and g.cms_status='"+gubun4+"'";
		}

		if(gubun1.equals("2"))			query += " and f.app_dt is not null and f.reg_st='2'";
		else{
			if(gubun1.equals("Y"))			query += " and f.app_dt is not null";
			else if(gubun1.equals("N"))		query += " and f.app_dt is null and nvl(a.use_yn,'Y')='Y' and b.fee_pay_st='1' and e.rent_l_cd||b.rent_start_dt is not null ";// 
		}

		if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";		
		if(s_kd.equals("4"))	what = "upper(nvl(h.user_nm, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(b.rent_start_dt, ' '))";	
		if(s_kd.equals("6"))	what = "upper(nvl(f.app_dt, ' '))";	
		if(s_kd.equals("7"))	what = "upper(nvl(f.cms_start_dt, ' '))";	
		if(s_kd.equals("8"))	what = "upper(nvl(h2.user_nm, ' '))";	
		if(s_kd.equals("9"))	what = "upper(nvl(f.cms_acc_no, ' '))";	
		if(s_kd.equals("10"))	what = "upper(nvl(h3.user_nm, ' '))";	


		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper(replace('%"+t_wd+"%','-','')) ";
		}	
		
		if(s_kd.equals("6")) 		query += " order by  f.cms_start_dt,   f.app_dt,  h2.user_nm, decode(a.use_yn,'Y','2','N','3','1'), decode(g.cms_status,'',0,1), b.rent_start_dt, a.rent_dt, a.rent_mng_id";
		else						query += " order by  f.cms_start_dt,   f.app_dt, decode(a.use_yn,'Y','2','N','3','1'), decode(g.cms_status,'',0,1), b.rent_start_dt, a.rent_dt, a.rent_mng_id";

		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCmsContList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//CMS 고객 리스트 조회 (gubun - 1:상호, 2:계약번호)
	public Vector getCmsContRmList(String s_kd, String t_wd, String st_dt, String end_dt, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  "+
				" a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, a.car_st, "+
				" a.rent_dt, c.firm_nm, d.car_no, b.rent_start_dt,"+
				" decode(nvl(e.cnt,0),0,'-','생성') scd_yn,"+
				" decode(f.reg_st,'1',decode(f.app_dt,'','-','신청'),'2','해지','-') reg_st,"+
				" decode(a.use_yn,'Y','진행','N','해지','미결') use_st,"+
				" f.cms_day, f.cms_bank, f.cms_acc_no, f.cms_dep_nm,"+
				" decode(g.cms_status, '0', '신규', '1','신규신청중','2','신규신청불능','3','신청완료','11','해지','12','해지신청중','13','해지완료','-') cbit, \n"+
				" h.user_nm, h2.user_nm as reg_nm, h3.user_nm as app_nm, f.app_dt, b.rent_st, i.rent_suc_dt, f.cms_start_dt "+
				" from   cont a, fee b, client c, car_reg d,"+
				"        (select rent_mng_id, rent_l_cd, count(*) cnt from scd_fee group by rent_mng_id, rent_l_cd) e,"+
				"        cms_mng f, cms.member_user  g, users h, users h2, users h3, cont_etc i, fee_rm j "+
				" where a.car_st = '4' "+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1'"+
				" and b.fee_pay_st not in ('2') "+ //무통장입금 제외
				" and a.client_id=c.client_id"+
				" and a.car_mng_id=d.car_mng_id(+)"+
				" and a.rent_mng_id=e.rent_mng_id(+) and a.rent_l_cd=e.rent_l_cd(+)"+
				" and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd  "+
				" and a.rent_l_cd=g.cms_primary_seq(+)"+
				" and decode(b.rent_st,'1',a.bus_id,b.ext_agnt)=h.user_id "+
				" and f.reg_id=h2.user_id(+) "+
    			" and f.app_id=h3.user_id(+) "+
				" and a.rent_mng_id=i.rent_mng_id(+) and a.rent_l_cd=i.rent_l_cd(+)"+				 		
				" and b.rent_mng_id=j.rent_mng_id and b.rent_l_cd=j.rent_l_cd and b.rent_st=j.rent_st "+				 		
				" and nvl(j.cms_type,'cms')='cms' " +		
				" " ;


		String what = "";
		String dt1 = "";
		String dt2 = "";


		dt1 = "substr(f.app_dt,1,6)";
		dt2 = "f.app_dt";

		if(gubun3.equals("2"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
		else if(gubun3.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";
		else if(gubun3.equals("4"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";//전일
		else if(gubun3.equals("3")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}

		if(!gubun4.equals("")){	
			if(gubun4.equals("9"))		query += " and g.cms_status is null and nvl(a.use_yn,'Y')='Y' and e.rent_l_cd||b.rent_start_dt is not null ";//
			else 						query += " and g.cms_status='"+gubun4+"'";
		}

		if(gubun1.equals("2"))			query += " and f.app_dt is not null and f.reg_st='2'";
		else{
			if(gubun1.equals("Y"))			query += " and f.app_dt is not null";
			else if(gubun1.equals("N"))		query += " and f.app_dt is null and nvl(a.use_yn,'Y')='Y' and e.rent_l_cd||b.rent_start_dt is not null ";// 
		}

		if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";		
		if(s_kd.equals("4"))	what = "upper(nvl(h.user_nm, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(b.rent_start_dt, ' '))";	
		if(s_kd.equals("6"))	what = "upper(nvl(f.app_dt, ' '))";	
		if(s_kd.equals("7"))	what = "upper(nvl(f.cms_start_dt, ' '))";	
		if(s_kd.equals("8"))	what = "upper(nvl(h2.user_nm, ' '))";	
		if(s_kd.equals("9"))	what = "upper(nvl(f.cms_acc_no, ' '))";	
		if(s_kd.equals("10"))	what = "upper(nvl(h3.user_nm, ' '))";	


		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper(replace('%"+t_wd+"%','-','')) ";
		}	
		
		if(s_kd.equals("6")) 		query += " order by h2.user_nm, decode(a.use_yn,'Y','2','N','3','1'), decode(g.cms_status,'',0,1), f.cms_start_dt, b.rent_start_dt, a.rent_dt, a.rent_mng_id";
		else						query += " order by decode(a.use_yn,'Y','2','N','3','1'), decode(g.cms_status,'',0,1), f.cms_start_dt,  b.rent_start_dt, a.rent_dt, a.rent_mng_id";

		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCmsContRmList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}


	//계약관리
	public Vector getContList(String s_kd, String t_wd, String andor)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  \n"+
					" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.rent_dt, a.use_yn, \n"+
					" b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					" j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					" nvl(ec.nm, ec2.nm) car_ext, \n"+
					" r.nm, g.rpt_no,  \n"+
					" decode(m.rent_st,'1','-','연장') ext_st, \n"+
					" decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					" decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					" decode(nvl(a.car_gu,a.reg_id),'1','신차','0','보유차') car_gu, \n"+
					" decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,  \n"+
					" decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	" decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약이관','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지') cls_st,"+
					" m.con_mon, m.rent_start_dt, m.rent_end_dt, o.cls_dt, p.migr_dt, \n"+
					" a.brch_id, c.mng_br_id, nvl(d.ext_agnt,a.bus_id) bus_id, c.bus_agnt_id, a.bus_id2, \n"+
					" k.user_nm bus_nm, l.user_nm bus_agnt_nm, n.user_nm bus_nm2, a.mng_id, u.user_nm as mng_nm, a.mng_id2, v.user_nm as mng_nm2,"+
					" a.sanction_id, s.user_nm as sanction_nm, \n"+
					" nvl(w.scan_cnt,0) scan_cnt\n"+
					" from \n"+
					"		cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, \n"+
					"		car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, users v, \n"+
					"		(select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"			from fee group by rent_mng_id, rent_l_cd) m, \n"+
					"       cls_cont o, sui p, allot q, (select * from code where c_st='0003') r, \n"+
					"		(select car_mng_id, min(car_no1)||' '||min(car_no2)||' '||min(car_no3)||' '||min(car_no4)||' '||min(car_no5)||' '||min(car_no6) car_no \n"+
					"			from  \n"+
					"			(select \n"+
					"			car_mng_id, \n"+
					"			decode(cha_seq,'1',car_no,'') car_no1, \n"+
					"			decode(cha_seq,'2',car_no,'') car_no2, \n"+
					"			decode(cha_seq,'3',car_no,'') car_no3, \n"+
					"			decode(cha_seq,'4',car_no,'') car_no4, \n"+
					"			decode(cha_seq,'5',car_no,'') car_no5, \n"+
					"			decode(cha_seq,'6',car_no,'') car_no6 \n"+
					"			from car_change \n"+
					"			) group by car_mng_id \n"+
					"		) t, \n"+
					"       (select rent_mng_id, rent_l_cd, count(*) scan_cnt from lc_scan group by rent_mng_id, rent_l_cd) w,\n"+
					"       (select * from code where c_st='0032') ec,\n"+
					"       (select * from code WHERE c_st='0032') ec2\n"+
					"  where \n"+
					"  a.client_id=b.client_id \n"+
					"  and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"  and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"  and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"  and a.car_mng_id=f.car_mng_id(+) \n"+
					"  and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd \n"+
					"  and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"  and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code \n"+
					"  and nvl(d.ext_agnt,a.bus_id)=k.user_id \n"+
					"  and c.bus_agnt_id=l.user_id(+) \n"+
					"  and a.bus_id2=n.user_id(+) \n"+
					"  and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"  and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"  and a.car_mng_id=p.car_mng_id(+) \n"+
					"  and a.rent_mng_id=q.rent_mng_id(+) and a.rent_l_cd=q.rent_l_cd(+) \n"+
					"  and q.cpt_cd=r.code(+) \n"+
					"  and a.sanction_id=s.user_id(+) \n"+
					"  and a.car_mng_id=t.car_mng_id(+) \n"+
					"  and a.mng_id=u.user_id(+) \n"+
					"  and a.mng_id2=v.user_id(+) \n"+
					"  and a.rent_mng_id=w.rent_mng_id(+) and a.rent_l_cd=w.rent_l_cd(+) \n"+
					"  and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+) \n"+
					" ";

	
			String what = "";

			if(s_kd.equals("1"))	what = "b.firm_nm";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "t.car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("6"))	what = "g.rpt_no";		
			if(s_kd.equals("7"))	what = "r.nm";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("9"))	what = "l.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("12"))	what = "v.user_nm";
			
			if(!what.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}else{
				query += " and nvl(a.use_yn,'Y')='Y' and nvl(d.rent_dt,a.rent_dt) like to_char(sysdate,'YYYYMM')||'%' and b.firm_nm not like '%아마존카%'\n";
			}

			query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContList(String s_kd, String t_wd, String andor)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리
	public Vector getContListNew(String s_kd, String t_wd, String andor, String gubun1, String gubun2)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  \n"+
					" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, a.use_yn, \n"+
					" b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					" j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					" nvl(ec.nm, ec2.nm) car_ext, \n"+
					" r.nm, g.rpt_no,  \n"+
					" decode(m.rent_st,'1','','연장') ext_st, \n"+
					" decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					" decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					" decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					" decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
					" decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,  \n"+
					" decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	" decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지') cls_st,"+
					" m.con_mon, m.rent_start_dt, m.rent_end_dt, o.cls_dt, p.migr_dt, \n"+
					" a.brch_id, c.mng_br_id, nvl(d.ext_agnt,a.bus_id) bus_id, c.bus_agnt_id, a.bus_id2, \n"+
					" k.user_nm as bus_nm, l.user_nm bus_agnt_nm, n.user_nm bus_nm2, a.mng_id, u.user_nm as mng_nm, a.mng_id2, v.user_nm as mng_nm2, a.bus_id3, decode(d.ext_agnt,'',x.user_nm,k.user_nm) as bus_nm3,"+
					" a.sanction_id, s.user_nm as sanction_nm, \n"+
					" nvl(w.scan_cnt,0) scan_cnt\n"+
					" from \n"+
					"		cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, \n"+
					"		car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, users v, \n"+
					"		(select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"			from fee group by rent_mng_id, rent_l_cd) m, \n"+
					"       cls_cont o, sui p, allot q, (select * from code where c_st='0003') r, \n"+
					"		(select car_mng_id, min(car_no1)||' '||min(car_no2)||' '||min(car_no3)||' '||min(car_no4)||' '||min(car_no5)||' '||min(car_no6) car_no \n"+
					"			from  \n"+
					"			(select \n"+
					"			car_mng_id, \n"+
					"			decode(cha_seq,'1',car_no,'') car_no1, \n"+
					"			decode(cha_seq,'2',car_no,'') car_no2, \n"+
					"			decode(cha_seq,'3',car_no,'') car_no3, \n"+
					"			decode(cha_seq,'4',car_no,'') car_no4, \n"+
					"			decode(cha_seq,'5',car_no,'') car_no5, \n"+
					"			decode(cha_seq,'6',car_no,'') car_no6 \n"+
					"			from car_change \n"+
					"			) group by car_mng_id \n"+
					"		) t, \n"+
					"       (select rent_mng_id, rent_l_cd, count(*) scan_cnt from lc_scan group by rent_mng_id, rent_l_cd) w, users x, (select * from cls_cont where cls_st in ('4','5')) y,\n"+
					"       (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2\n"+
					"  where \n"+
					"  a.client_id=b.client_id \n"+
					"  and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"  and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"  and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"  and a.car_mng_id=f.car_mng_id(+) \n"+
					"  and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd \n"+
					"  and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"  and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"  and nvl(d.ext_agnt,a.bus_id)=k.user_id \n"+
					"  and c.bus_agnt_id=l.user_id(+) \n"+
					"  and a.bus_id2=n.user_id(+) \n"+
					"  and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"  and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"  and a.car_mng_id=p.car_mng_id(+) \n"+
					"  and a.rent_mng_id=q.rent_mng_id(+) and a.rent_l_cd=q.rent_l_cd(+) \n"+
					"  and q.cpt_cd=r.code(+) \n"+
					"  and a.sanction_id=s.user_id(+) \n"+
					"  and a.car_mng_id=t.car_mng_id(+) \n"+
					"  and a.mng_id=u.user_id(+) \n"+
					"  and a.mng_id2=v.user_id(+) \n"+
					"  and a.rent_mng_id=w.rent_mng_id(+) and a.rent_l_cd=w.rent_l_cd(+) \n"+
					"  and a.bus_id3=x.user_id(+) \n"+
					"  and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"  and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)  \n"+
					" ";

	
			if(gubun1.equals("Y")) query += " and nvl(a.use_yn,'Y')='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";

			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			if(s_kd.equals("1"))	what = "b.firm_nm";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "t.car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("6"))	what = "g.rpt_no";		
			if(s_kd.equals("7"))	what = "r.nm";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("9"))	what = "l.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("12"))	what = "v.user_nm";
			if(s_kd.equals("13"))	what = "b.client_nm";
			if(s_kd.equals("14"))	what = "nvl(d.rent_dt,a.rent_dt)";
			if(s_kd.equals("15"))	what = "x.user_nm";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(s_kd.equals("14"))	t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
				query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc";
			}else{
				if(s_kd.equals("10")){
					query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt";
				}else{
					query += " and nvl(a.use_yn,'Y')='Y' and nvl(d.rent_dt,a.rent_dt) like to_char(sysdate,'YYYYMM')||'%' and b.firm_nm not like '%아마존카%'\n";
					query += " order by a.use_yn desc, decode(d.rent_st,'1',1,2) desc, nvl(a.car_gu,a.reg_id), a.rent_st desc, nvl(d.rent_dt,a.rent_dt)";
				}
			}



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContListNew]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리
	public Vector getContListNew(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  \n"+
					" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, a.use_yn, \n"+
					" b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					" j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
//					" decode(nvl(f.car_ext,h.car_ext),'1','서울','2','파주','3','부산','4','김해','5','대전','6','포천','7','인천','8','제주','9','광주','10','대구') car_ext, \n"+
					" nvl(ec.nm, ec2.nm) car_ext, \n"+
					" r.nm, g.rpt_no,  \n"+
					" decode(m.rent_st,'1','','연장') ext_st, \n"+
					" decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					" decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					" decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					" decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					" decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
					" decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,  \n"+
					" decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	" decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지') cls_st,"+
					" a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt, o.cls_dt, p.migr_dt, \n"+
					" a.brch_id, c.mng_br_id, nvl(d.ext_agnt,a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,mm.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					" k.user_nm as bus_nm, k.user_m_tel as bus_m_tel, "+
					" nvl(qu.user_nm,l.user_nm) bus_agnt_nm, nvl(qu.user_m_tel,l.user_m_tel) bus_agnt_m_tel,"+
					" n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel, "+
					" a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel, "+
					" a.mng_id2, v.user_nm as mng_nm2, v.user_m_tel as mng2_m_tel, "+
					" a.bus_id3, decode(d.ext_agnt,'',x.user_nm,k.user_nm) as bus_nm3, decode(d.ext_agnt,'',x.user_m_tel,k.user_m_tel) as bus3_m_tel, "+
					" a.sanction_id, s.user_nm as sanction_nm, \n"+
					" nvl(w.scan_cnt,0) scan_cnt, z.ins_com_id,\n"+
					" decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st,"+
					" m.rent_st as fee_rent_st, nvl(cn.in_cnt,0) in_cnt"+
					" from \n"+
					"		cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, \n"+
					"		car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, users v, \n"+
					"		(select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"			from fee group by rent_mng_id, rent_l_cd) m, \n"+
					"       cls_cont o, sui p, allot q, (select * from code where c_st='0003') r, \n"+
					"		(select car_mng_id, min(car_no1)||' '||min(car_no2)||' '||min(car_no3)||' '||min(car_no4)||' '||min(car_no5)||' '||min(car_no6) car_no \n"+
					"			from  \n"+
					"			(select \n"+
					"			car_mng_id, \n"+
					"			decode(cha_seq,'1',car_no,'') car_no1, \n"+
					"			decode(cha_seq,'2',car_no,'') car_no2, \n"+
					"			decode(cha_seq,'3',car_no,'') car_no3, \n"+
					"			decode(cha_seq,'4',car_no,'') car_no4, \n"+
					"			decode(cha_seq,'5',car_no,'') car_no5, \n"+
					"			decode(cha_seq,'6',car_no,'') car_no6 \n"+
					"			from car_change \n"+
					"			) group by car_mng_id \n"+
					"		) t, \n"+
					"       (select rent_mng_id, rent_l_cd, count(*) scan_cnt from lc_scan group by rent_mng_id, rent_l_cd) w, users x, (select * from cls_cont where cls_st in ('4','5')) y,\n"+
					"       (select car_mng_id, ins_com_id from insur where ins_sts='1' and ins_exp_dt > to_char(sysdate,'YYYYMMDD')) z,"+
					"       fee_etc mm, "+
					"       (select rent_mng_id, rent_l_cd, count(*) in_cnt from car_call_in where out_dt is null group by rent_mng_id, rent_l_cd) cn, users qu, "+
					"       (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2"+
					"  where \n"+
					"  a.client_id=b.client_id \n"+
					"  and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"  and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"  and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"  and a.car_mng_id=f.car_mng_id(+) \n"+
					"  and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd \n"+
					"  and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"  and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"  and nvl(d.ext_agnt,a.bus_id)=k.user_id \n"+
					"  and c.bus_agnt_id=l.user_id(+) \n"+
					"  and a.bus_id2=n.user_id(+) \n"+
					"  and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"  and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"  and a.car_mng_id=p.car_mng_id(+) \n"+
					"  and a.rent_mng_id=q.rent_mng_id(+) and a.rent_l_cd=q.rent_l_cd(+) \n"+
					"  and q.cpt_cd=r.code(+) \n"+
					"  and a.sanction_id=s.user_id(+) \n"+
					"  and a.car_mng_id=t.car_mng_id(+) \n"+
					"  and a.mng_id=u.user_id(+) \n"+
					"  and a.mng_id2=v.user_id(+) \n"+
					"  and a.rent_mng_id=w.rent_mng_id(+) and a.rent_l_cd=w.rent_l_cd(+) \n"+
					"  and a.bus_id3=x.user_id(+) \n"+
					"  and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"  and a.car_mng_id=z.car_mng_id(+)"+
					"  and d.rent_mng_id=mm.rent_mng_id(+) and d.rent_l_cd=mm.rent_l_cd(+) and d.rent_st=mm.rent_st(+) \n"+
					"  and a.rent_mng_id=cn.rent_mng_id(+) and a.rent_l_cd=cn.rent_l_cd(+) \n"+
					"  and mm.bus_agnt_id=qu.user_id(+) \n"+
					"  and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+) \n"+
					" ";

	
			if(gubun1.equals("Y")) query += " and nvl(a.use_yn,'Y')='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("I")) query += " and nvl(a.use_yn,'Y')='Y' and nvl(cn.in_cnt,0) > 0";
			if(gubun1.equals("G")) query += " and nvl(a.use_yn,'Y')='Y' and f.gps='Y' ";

			if(gubun3.equals("1")) query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2")) query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3")) query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4")) query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5")) query += " and a.car_st<>'2' and a.car_gu='2'";
			if(gubun3.equals("6")) query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and y.cls_st='5'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and y.cls_st='4'";

			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			if(s_kd.equals("1"))	what = "b.firm_nm";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "t.car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("6"))	what = "g.rpt_no";		
			if(s_kd.equals("7"))	what = "r.nm";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("9"))	what = "l.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("12"))	what = "v.user_nm";
			if(s_kd.equals("13"))	what = "b.client_nm";
			if(s_kd.equals("14"))	what = "nvl(d.rent_dt,a.rent_dt)";
			if(s_kd.equals("15"))	what = "x.user_nm";
			if(s_kd.equals("16"))	what = "j.car_nm";
			if(s_kd.equals("17"))	what = "f.init_reg_dt";
			if(s_kd.equals("18"))	what = "upper(nvl(to_char(a.sanction_date,'YYYYMMDD'), ' '))";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17"))	t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc ";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc";
			}else{
				if(gubun1.equals("I") || gubun1.equals("G")){
				}else{
					if(s_kd.equals("10")){
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt";
					}else{
						query += " and nvl(a.use_yn,'Y')='Y' and decode(y.cls_st,'5',nvl(c.rent_suc_dt,y.cls_dt),nvl(d.rent_dt,a.rent_dt)) like to_char(sysdate,'YYYYMM')||'%' and b.firm_nm not like '%아마존카%'\n";
						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc, nvl(d.rent_dt,a.rent_dt)";
					}
				}
			}



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContListNew]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리
	public Vector getContList_20091215(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select   \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, nvl(c.rent_suc_dt,y.cls_dt) as rent_suc_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext,\n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체', '7', '에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	"        decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지', '15', '말소') cls_st, \n"+
					"        a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,mm.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					"        k.user_nm as bus_nm, k.user_m_tel as bus_m_tel,  \n"+
					"        nvl(qu.user_nm,l.user_nm) bus_agnt_nm, nvl(qu.user_m_tel,l.user_m_tel) bus_agnt_m_tel, \n"+
					"        n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel,  \n"+
					"        a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel,  \n"+
					"        a.bus_id3, decode(d.ext_agnt,'',x.user_nm,k.user_nm) as bus_nm3, decode(d.ext_agnt,'',x.user_m_tel,k.user_m_tel) as bus3_m_tel,  \n"+
					"        a.sanction_id, s.user_nm as sanction_nm, \n"+
					"        nvl(w.scan_cnt,0) scan_cnt, z.ins_com_id,\n"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        m.rent_st as fee_rent_st, nvl(cn.in_cnt,0) in_cnt,  \n"+
					"	     nvl(w2.scan_cnt2,0) scan_cnt2  \n"+
					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+//car_pur g, 
					"		 car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, \n"+//users v, 
					"		 ( select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee  \n"+
					"          group by rent_mng_id, rent_l_cd \n"+
					"        ) m, \n"+
					"        cls_cont o, \n"+
					"        ( select rent_mng_id, rent_l_cd, count(*) scan_cnt from lc_scan group by rent_mng_id, rent_l_cd) w,  \n"+
					"	     users x,  \n"+
					"	     ( select * from cls_cont where cls_st in ('4','5')) y, \n"+
					// 보험만기일 기준 보험사로 변경 - 20120703
					"       (  select a.car_mng_id, a.ins_com_id  from insur a, ins_cls b  where  a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+) and  to_char(sysdate,'YYYYMMDD')  between to_char(to_date(a.ins_start_dt) + DECODE(a.INS_ST,'0', 0, 1) , 'yyyymmdd')  and decode(b.car_mng_id, null, a.ins_exp_dt, b.exp_dt)  ) z, \n"+
					"        fee_etc mm,  \n"+
					"        ( select rent_mng_id, rent_l_cd, count(*) in_cnt from car_call_in where out_dt is null group by rent_mng_id, rent_l_cd) cn, users qu,  \n"+
					"        ( select rent_mng_id, rent_l_cd, rent_st, count(*) scan_cnt2 from lc_scan where file_st in ('17','18') group by rent_mng_id, rent_l_cd, rent_st) w2,  \n"+
					"        ( select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2  \n"+
					" where  \n"+
					"        a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"        and nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id)=k.user_id \n"+					
					"        and c.bus_agnt_id=l.user_id(+) \n"+
					"        and a.bus_id2=n.user_id(+) \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"        and a.sanction_id=s.user_id(+) \n"+
					"        and a.mng_id=u.user_id(+) \n"+
					"        and a.rent_mng_id=w.rent_mng_id(+) and a.rent_l_cd=w.rent_l_cd(+) \n"+
					"        and a.bus_id3=x.user_id(+) \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id(+) and d.rent_l_cd=mm.rent_l_cd(+) and d.rent_st=mm.rent_st(+) \n"+
					"        and a.rent_mng_id=cn.rent_mng_id(+) and a.rent_l_cd=cn.rent_l_cd(+) \n"+
					"        and mm.bus_agnt_id=qu.user_id(+) \n"+
					"        and d.rent_mng_id=w2.rent_mng_id(+) and d.rent_l_cd=w2.rent_l_cd(+) and d.rent_st=w2.rent_st(+) \n"+
					"        and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)  \n"+
					" ";

	
			if(gubun1.equals("Y")) query += " and nvl(a.use_yn,'Y')='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("I")) query += " and nvl(a.use_yn,'Y')='Y' and nvl(cn.in_cnt,0) > 0";
			if(gubun1.equals("G")) query += " and nvl(a.use_yn,'Y')='Y' and f.gps='Y' ";
			if(gubun1.equals("R")) query += " and nvl(a.use_yn,'Y')='Y' and a.car_st='2' ";
			if(gubun1.equals("J")) query += " and nvl(a.use_yn,'Y')='Y' and a.car_st<>'2' and nvl(w2.scan_cnt2,0)=0 and d.rent_start_dt is not null and a.rent_dt > '20100430' ";
			if(gubun1.equals("E")) query += " and nvl(a.use_yn,'Y')='Y' and d.fee_chk='1' ";
			if(gubun1.equals("F")) query += " and nvl(a.use_yn,'Y')='Y' and h.car_origin='2' ";

			if(gubun3.equals("1")) query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2")) query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3")) query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4")) query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5")) query += " and a.car_st<>'2' and a.car_gu='2'";
			if(gubun3.equals("6")) query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and y.cls_st='5'";
			if(gubun3.equals("8")) query += " and a.car_st<>'2' and y.cls_st='4'";
			if(gubun3.equals("10")) query += " and a.car_st='1'";
			if(gubun3.equals("11")) query += " and a.car_st='3'";
			if(gubun3.equals("9")) query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("20")) query += " and a.rent_st in ('3','4') and d.rent_way='3' and d.rent_st='1' and k.loan_st='2' and n.loan_st='2'";


			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			if(s_kd.equals("1"))	what = "b.firm_nm||e.r_site";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no||' '||f.first_car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("9"))	what = "l.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("13"))	what = "b.client_nm||e.site_jang";
			if(s_kd.equals("14"))	what = "decode(d.rent_st,'1',a.rent_dt,d.rent_dt)";
			if(s_kd.equals("15"))	what = "x.user_nm";
			if(s_kd.equals("16"))	what = "j.car_nm";
			if(s_kd.equals("17"))	what = "f.init_reg_dt";
			if(s_kd.equals("18"))	what = "upper(nvl(to_char(a.sanction_date,'YYYYMMDD'), ' '))";
			if(s_kd.equals("19"))	what = "upper(nvl(b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' )||TEXT_DECRYPT(e.enp_no, 'pw' ) , ' '))";
			if(s_kd.equals("20"))	what = "i.jg_code";
			if(s_kd.equals("21"))	what = "nvl(c.rent_suc_dt,y.cls_dt)";
			if(s_kd.equals("22"))	what = "c.grt_suc_l_cd";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(!s_kd.equals("3") && !s_kd.equals("1") && !gubun1.equals("R"))		query += " and a.car_st<>'2'";				//차량번호 검색이 아닌경우 보유차는 뺄것
				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17")||s_kd.equals("18"))	t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%')  \n";

				if(s_kd.equals("14") && !gubun1.equals("R")) query += " and b.firm_nm not like '%아마존카%' \n";	

				if(s_kd.equals("14")) query += " and a.car_st in ('1','3') \n";	 //계약일자 검색시 보유차,월렌트는 보여주지 않는다.

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";
			}else{
				//차량회수 / GPS장착 / 보유차 / 미스캔
				if(gubun1.equals("I") || gubun1.equals("G") || gubun1.equals("R") || gubun1.equals("J") || gubun1.equals("E")){
				}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{
						//계약관리 디폴트 (당월계약분)
						/*승계미포함*/query += " and nvl(a.use_yn,'Y')='Y' and decode(d.rent_st,'1',a.rent_dt,d.rent_dt) like to_char(sysdate,'YYYYMM')||'%' and b.firm_nm not like '%아마존카%' and a.car_st in ('1','3') \n"; //계약관리 디폴트에서 보유차와 월렌트는 제외

						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), "+
							     "          decode(y.cls_st||decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')),'5', nvl(c.rent_suc_dt,y.cls_dt), nvl(d.rent_dt,a.rent_dt)) desc, "+
								 "          a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc \n";
					}
				}
			}

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContList_20091215]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }


	//계약관리
	public Vector getContList_20140923(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select   \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, nvl(c.rent_suc_dt,y.cls_dt) as rent_suc_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체', '7', '에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	"        decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지', '15', '말소') cls_st, \n"+
					"        a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,mm.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					"        k.user_nm as bus_nm, k.user_m_tel as bus_m_tel,  \n"+
					"        nvl(qu.user_nm,l.user_nm) bus_agnt_nm, nvl(qu.user_m_tel,l.user_m_tel) bus_agnt_m_tel, \n"+
					"        n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel,  \n"+
					"        a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel,  \n"+
					"        a.bus_id3, decode(d.ext_agnt,'',x.user_nm,k.user_nm) as bus_nm3, decode(d.ext_agnt,'',x.user_m_tel,k.user_m_tel) as bus3_m_tel,  \n"+
					"        a.sanction_id, s.user_nm as sanction_nm, \n"+
				    "        z.ins_com_id,\n"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        m.rent_st as fee_rent_st \n"+
					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, \n"+
					"		 ( select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee  \n"+
					"          group by rent_mng_id, rent_l_cd \n"+
					"        ) m, \n"+
					"        cls_cont o, \n"+
					"	     users x,  \n"+
					"	     ( select * from cls_cont where cls_st in ('4','5')) y, \n"+
					"        ( select a.car_mng_id, a.ins_com_id  from insur a, ins_cls b  where  a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+) and  to_char(sysdate,'YYYYMMDD')  between to_char(to_date(a.ins_start_dt) + DECODE(a.INS_ST,'0', 0, 1) , 'yyyymmdd')  and decode(b.car_mng_id, null, a.ins_exp_dt, b.exp_dt)  ) z, \n"+
					"        fee_etc mm,  \n"+
				    "        users qu,  \n"+
				    "        ( select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2  \n"+
					" where  \n"+
					"        a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code \n"+
					"        and nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id)=k.user_id \n"+					
					"        and c.bus_agnt_id=l.user_id(+) \n"+
					"        and a.bus_id2=n.user_id(+) \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"        and a.sanction_id=s.user_id(+) \n"+
					"        and a.mng_id=u.user_id(+) \n"+
					"        and a.bus_id3=x.user_id(+) \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id(+) and d.rent_l_cd=mm.rent_l_cd(+) and d.rent_st=mm.rent_st(+) \n"+
					"        and mm.bus_agnt_id=qu.user_id(+) and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)  \n"+
					" ";

	
			if(gubun1.equals("Y")) query += " and nvl(a.use_yn,'Y')='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("R")) query += " and nvl(a.use_yn,'Y')='Y' and a.car_st='2' ";
			if(gubun1.equals("E")) query += " and nvl(a.use_yn,'Y')='Y' and d.fee_chk='1' ";
			if(gubun1.equals("F")) query += " and nvl(a.use_yn,'Y')='Y' and h.car_origin='2' ";

			if(gubun3.equals("1")) query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2")) query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3")) query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4")) query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5")) query += " and a.car_st<>'2' and a.car_gu='2'";
			if(gubun3.equals("6")) query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and y.cls_st='5'";
			if(gubun3.equals("8")) query += " and a.car_st<>'2' and y.cls_st='4'";
			if(gubun3.equals("10")) query += " and a.car_st='1'";
			if(gubun3.equals("11")) query += " and a.car_st='3'";
			if(gubun3.equals("9")) query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("20")) query += " and a.rent_st in ('3','4') and d.rent_way='3' and d.rent_st='1' and k.loan_st='2' and n.loan_st='2'";


			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			if(s_kd.equals("1"))	what = "b.firm_nm||e.r_site";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no||' '||f.first_car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("9"))	what = "nvl(qu.user_nm,l.user_nm)";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("13"))	what = "b.client_nm||e.site_jang";
			if(s_kd.equals("14"))	what = "decode(d.rent_st,'1',a.rent_dt,d.rent_dt)";
			if(s_kd.equals("15"))	what = "x.user_nm";
			if(s_kd.equals("16"))	what = "j.car_nm";
			if(s_kd.equals("17"))	what = "f.init_reg_dt";						
			if(s_kd.equals("18"))	what = "upper(nvl(to_char(a.sanction_date,'YYYYMMDD'), ' '))";
			if(s_kd.equals("19"))	what = "upper(nvl(b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' ) ||TEXT_DECRYPT(e.enp_no, 'pw' ) , ' '))";
			if(s_kd.equals("20"))	what = "i.jg_code";
			if(s_kd.equals("21"))	what = "upper(nvl(nvl(c.rent_suc_dt,y.cls_dt), ' '))";
			if(s_kd.equals("22"))	what = "upper(nvl(c.grt_suc_l_cd, ' '))";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(!s_kd.equals("3") && !s_kd.equals("1") && !gubun1.equals("R"))		query += " and a.car_st<>'2'";				//차량번호 검색이 아닌경우 보유차는 뺄것
				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17")||s_kd.equals("18"))	t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%')  \n";

				if(s_kd.equals("14") && !gubun1.equals("R")) query += " and b.client_id<>'000228'\n";	

				if(s_kd.equals("14")) query += " and a.car_st in ('1','3') \n";	 //계약일자 검색시 보유차,월렌트는 보여주지 않는다.

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";
			}else{
				//차량회수 / GPS장착 / 보유차 / 미스캔
				if(gubun1.equals("I") || gubun1.equals("G") || gubun1.equals("R") || gubun1.equals("J") || gubun1.equals("E")){
				}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{
						//계약관리 디폴트 (당월계약분)
						/*승계미포함*/query += " and nvl(a.use_yn,'Y')='Y' and decode(d.rent_st,'1',a.rent_dt,d.rent_dt) like to_char(sysdate,'YYYYMM')||'%' and b.client_id<>'000228' and a.car_st in ('1','3') \n"; //계약관리 디폴트에서 보유차와 월렌트는 제외

						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), "+
							     "          decode(y.cls_st||decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')),'5', nvl(c.rent_suc_dt,y.cls_dt), nvl(d.rent_dt,a.rent_dt)) desc, "+
								 "          a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc \n";
					}
				}
			}

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContList_20140923]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//보증보험 리스트 조회 (gubun - 1:상호, 2:계약번호)
	public Vector getGuaInsureList(String s_kd, String t_wd, String gubun1)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select"+
				" a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, a.rent_dt, d.firm_nm,"+
				" decode(a.use_yn,'Y','진행','N','해지','미결') use_st,"+
				" decode(c.gi_dt,'','미등록','등록') reg_st,"+
				" c.gi_no, c.gi_amt, c.gi_fee, c.gi_start_dt, c.gi_end_dt, c.gi_jijum, c.gi_dt,"+
				" a.rent_start_dt, a.rent_end_dt "+
				" from cont a, car_etc b, gua_ins c, client d"+
				" where"+
				" a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd"+
				" and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd"+
				" and a.client_id=d.client_id"+
				" AND (b.gi_st='1' or NVL(c.gi_st,'0')='1') \n"+
                " ";

		String what = "";

		if(s_kd.equals("1"))	what = "upper(nvl(d.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			
		if(!what.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";

			if(gubun1.equals("Y"))		query += " and c.gi_dt is not null";
			else if(gubun1.equals("N"))	query += " and c.gi_dt is null";

		}else{
			query += " and nvl(a.use_yn,'Y')='Y' and c.gi_dt is null";
		}	
		
		query += " order by decode(a.use_yn,'Y','2','N','3','1'), decode(c.gi_dt,'',0,1), a.rent_dt, a.rent_mng_id";


		try {
				
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getGuaInsureList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//계약이력리스트
	public Vector getContHistory(String rent_mng_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select"+
				" b.firm_nm, c.car_no, c.car_nm, "+
				" decode(d.CLS_DT, '', '', substr(d.CLS_DT, 1, 4) || '-' || substr(d.CLS_DT, 5, 2) || '-'||substr(d.CLS_DT, 7, 2)) CLS_DT,"+
				" decode(d.CLS_ST, '1','계약만료', '2','중도해약', '3','영업소변경', '4','차종변경', '5','계약이관', '6','매각', '7','출고전해지', '8','매입옵션') CLS_ST"+
				" from cont a, client b, car_reg c, cls_cont d"+
				" where a.client_id=b.client_id"+
				" and a.car_mng_id=c.car_mng_id"+
				" and a.rent_mng_id=d.rent_mng_id(+) and a.rent_l_cd=d.rent_l_cd(+)"+
				" and a.rent_mng_id='"+rent_mng_id+"'"+
				" order by a.rent_dt, a.reg_dt, a.update_dt";

		try {
				
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContHistory]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//계약변경이력리스트
	public Vector getLcRentCngHList(String rent_mng_id, String rent_l_cd, String cng_item)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select * from LC_RENT_CNG_H where rent_mng_id=? and rent_l_cd=? and cng_item=? order by seq desc";

		if(cng_item.equals("p_addr")){
			query = " select * from LC_RENT_CNG_H where rent_mng_id=? and rent_l_cd=? and cng_item in ('p_addr','lic_no','mgr_lic_no') order by seq desc";
		}

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			if(!cng_item.equals("p_addr")){
				pstmt.setString(3, cng_item);
			}

	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//계약서 항목변경/이력남기기
	public boolean updateLcRentCngH(LcRentCngHBean bean)
	{
		getConnection();
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		ResultSet rs = null;
		boolean flag = true;


		String query1 = " SELECT nvl(max(seq),0)+1 from lc_rent_cng_h where rent_mng_id=? and rent_l_cd=?";

		String query2 = " insert into lc_rent_cng_h (rent_mng_id, rent_l_cd, seq, cng_item, old_value, new_value, cng_cau, cng_id, cng_dt) values "+
						" (?, ?, ?, ?, ?, replace(?,',',''), ?, ?, to_char(sysdate,'YYYYMMDD'))";

		String query3 = "";

		if(bean.getCng_item().equals("car_st") || bean.getCng_item().equals("bus_id2") || bean.getCng_item().equals("bus_id") || bean.getCng_item().equals("mng_id") || bean.getCng_item().equals("mng_id2") || bean.getCng_item().equals("bus_st")){

			if(bean.getCng_item().equals("bus_id2") && bean.getCng_cau().equals("기본식자동배정")){
				query3 = " update cont      set "+bean.getCng_item()+"='"+bean.getNew_value()+"', mng_id='' where rent_mng_id=? and rent_l_cd=?";
			}else{
				query3 = " update cont      set "+bean.getCng_item()+"='"+bean.getNew_value()+"' where rent_mng_id=? and rent_l_cd=?";
			}

		}else if(bean.getCng_item().equals("rent_way")){

			query3 = " update fee       set "+bean.getCng_item()+"='"+bean.getNew_value()+"' where rent_mng_id=? and rent_l_cd=?";

		}else if(bean.getCng_item().equals("mng_br_id") || bean.getCng_item().equals("est_area") || bean.getCng_item().equals("county") || bean.getCng_item().equals("bus_agnt_id")){

			query3 = " update cont_etc  set "+bean.getCng_item()+"='"+bean.getNew_value()+"' where rent_mng_id=? and rent_l_cd=?";

		}else if(bean.getCng_item().equals("grt_amt")){

			query3 = " update fee  set grt_amt_s="+bean.getS_amt()+" where rent_mng_id=? and rent_l_cd=? and rent_st='"+bean.getRent_st()+"'";

		}else if(bean.getCng_item().equals("pp_amt")){

			query3 = " update fee  set pp_s_amt="+bean.getS_amt()+",   pp_v_amt="+bean.getV_amt()+"   where rent_mng_id=? and rent_l_cd=? and rent_st='"+bean.getRent_st()+"'";

		}else if(bean.getCng_item().equals("ifee_amt")){

			query3 = " update fee  set ifee_s_amt="+bean.getS_amt()+", ifee_v_amt="+bean.getV_amt()+" where rent_mng_id=? and rent_l_cd=? and rent_st='"+bean.getRent_st()+"'";

		}else if(bean.getCng_item().equals("fee_amt")){

			query3 = " update fee  set fee_s_amt="+bean.getS_amt()+",  fee_v_amt="+bean.getV_amt()+"  where rent_mng_id=? and rent_l_cd=? and rent_st='"+bean.getRent_st()+"'";

		}else if(bean.getCng_item().equals("inv_amt")){

			query3 = " update fee  set inv_s_amt="+bean.getS_amt()+",  inv_v_amt="+bean.getV_amt()+"  where rent_mng_id=? and rent_l_cd=? and rent_st='"+bean.getRent_st()+"'";

		}else if(bean.getCng_item().equals("opt_amt")){

			query3 = " update fee  set opt_s_amt="+bean.getS_amt()+",  opt_v_amt="+bean.getV_amt()+"  where rent_mng_id=? and rent_l_cd=? and rent_st='"+bean.getRent_st()+"'";

		}else if(bean.getCng_item().equals("suc_cls_dt")){

			query3 = " update cls_cont  set cls_dt=replace('"+bean.getNew_value()+"','-','')  where rent_mng_id=? and rent_l_cd=? ";
		}

		try 
		{
			conn.setAutoCommit(false);

			pstmt1 = conn.prepareStatement(query1);
			pstmt1.setString(1, bean.getRent_mng_id	());
			pstmt1.setString(2, bean.getRent_l_cd	());
		   	rs = pstmt1.executeQuery();
			if(rs.next())
			{
				bean.setSeq(rs.getInt(1));
			}
			pstmt1.close();
			rs.close();

			pstmt2 = conn.prepareStatement(query2);
			pstmt2.setString(1, bean.getRent_mng_id	());
			pstmt2.setString(2, bean.getRent_l_cd	());
			pstmt2.setInt   (3, bean.getSeq			());
			pstmt2.setString(4, bean.getCng_item	());
			pstmt2.setString(5, bean.getOld_value	());
			pstmt2.setString(6, bean.getNew_value	());
			pstmt2.setString(7, bean.getCng_cau		());
			pstmt2.setString(8, bean.getCng_id		());
		    pstmt2.executeUpdate();
			pstmt2.close();

			if(!query3.equals("")){
				pstmt3 = conn.prepareStatement(query3);
				pstmt3.setString(1, bean.getRent_mng_id	());
				pstmt3.setString(2, bean.getRent_l_cd	());
			    pstmt3.executeUpdate();
				pstmt3.close();				
			}

			conn.commit();


	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateLcRentCngH]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt1 != null)	pstmt1.close();
				if(rs != null)		rs.close();
				if(pstmt2 != null)	pstmt2.close();
				if(pstmt3 != null)	pstmt3.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약 삭제하기
	public boolean deleteCont(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		PreparedStatement pstmt4 = null;
		PreparedStatement pstmt5 = null;
		PreparedStatement pstmt6 = null;
		PreparedStatement pstmt7 = null;
		PreparedStatement pstmt8 = null;
		PreparedStatement pstmt9 = null;
		PreparedStatement pstmt10 = null;
		PreparedStatement pstmt11 = null;
		PreparedStatement pstmt12 = null;
		PreparedStatement pstmt13 = null;
		PreparedStatement pstmt14 = null;
		PreparedStatement pstmt15 = null;
		PreparedStatement pstmt16 = null;
		PreparedStatement pstmt17 = null;
		PreparedStatement pstmt18 = null;
		PreparedStatement pstmt19 = null;
		PreparedStatement pstmt20 = null;
		PreparedStatement pstmt21 = null;
		PreparedStatement pstmt22 = null;
		PreparedStatement pstmt23 = null;
		PreparedStatement pstmt24 = null;
		PreparedStatement pstmt25 = null;
		PreparedStatement pstmt26 = null;
		PreparedStatement pstmt27 = null;

		boolean flag = true;

		String query1  = " delete from cont				where rent_mng_id=? and rent_l_cd=?";
		String query2  = " delete from car_mgr			where rent_mng_id=? and rent_l_cd=?";
		String query3  = " delete from allot			where rent_mng_id=? and rent_l_cd=?";
		String query4  = " delete from car_etc			where rent_mng_id=? and rent_l_cd=?";
		String query5  = " delete from car_pur			where rent_mng_id=? and rent_l_cd=?";
		String query6  = " delete from cls_cont			where rent_mng_id=? and rent_l_cd=?";
		String query7  = " delete from cltr				where rent_mng_id=? and rent_l_cd=?";
		String query8  = " delete from commi			where rent_mng_id=? and rent_l_cd=?";
		String query9  = " delete from fee				where rent_mng_id=? and rent_l_cd=?";
		String query10 = " delete from scd_fee			where rent_mng_id=? and rent_l_cd=?";
		String query11 = " delete from scd_ext			where rent_mng_id=? and rent_l_cd=?";
		String query12 = " delete from gua_ins			where rent_mng_id=? and rent_l_cd=?";
		String query13 = " delete from cont_etc			where rent_mng_id=? and rent_l_cd=?";
		String query14 = " delete from cont_eval		where rent_mng_id=? and rent_l_cd=?";
		String query15 = " delete from cont_gur			where rent_mng_id=? and rent_l_cd=?";
		String query16 = " delete from lc_rent_cng_h	where rent_mng_id=? and rent_l_cd=?";
		String query17 = " delete from lc_scan			where rent_mng_id=? and rent_l_cd=?";
		String query18 = " delete from taecha			where rent_mng_id=? and rent_l_cd=?";
		String query19 = " delete from cms_mng			where rent_mng_id=? and rent_l_cd=?";
		String query20 = " delete from fee_etc			where rent_mng_id=? and rent_l_cd=?";
		String query21 = " delete from fee_rm			where rent_mng_id=? and rent_l_cd=?";
		String query22 = " delete from tint 			where rent_mng_id=? and rent_l_cd=?";
		String query23 = " delete from doc_settle  	    where doc_id like '%"+rent_l_cd+"%'";
		String query24 = " delete from acar_attach_file where content_seq like '"+rent_mng_id+""+rent_l_cd+"%'";
		String query25 = " delete from scd_fee_est		where rent_mng_id=? and rent_l_cd=?";
		String query26 = " delete from car_tint 		where rent_mng_id=? and rent_l_cd=?";
		String query27 = " delete from card_cms_mng     where rent_mng_id=? and rent_l_cd=?";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query1);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		    pstmt.executeUpdate();
			pstmt.close();

			pstmt2 = conn.prepareStatement(query2);
			pstmt2.setString(1, rent_mng_id);
			pstmt2.setString(2, rent_l_cd);
		    pstmt2.executeUpdate();
			pstmt2.close();

			pstmt3 = conn.prepareStatement(query3);
			pstmt3.setString(1, rent_mng_id);
			pstmt3.setString(2, rent_l_cd);
		    pstmt3.executeUpdate();
			pstmt3.close();

			pstmt4 = conn.prepareStatement(query4);
			pstmt4.setString(1, rent_mng_id);
			pstmt4.setString(2, rent_l_cd);
		    pstmt4.executeUpdate();
			pstmt4.close();

			pstmt5 = conn.prepareStatement(query5);
			pstmt5.setString(1, rent_mng_id);
			pstmt5.setString(2, rent_l_cd);
		    pstmt5.executeUpdate();
			pstmt5.close();

			pstmt6 = conn.prepareStatement(query6);
			pstmt6.setString(1, rent_mng_id);
			pstmt6.setString(2, rent_l_cd);
		    pstmt6.executeUpdate();
			pstmt6.close();

			pstmt7 = conn.prepareStatement(query7);
			pstmt7.setString(1, rent_mng_id);
			pstmt7.setString(2, rent_l_cd);
		    pstmt7.executeUpdate();
			pstmt7.close();

			pstmt8 = conn.prepareStatement(query8);
			pstmt8.setString(1, rent_mng_id);
			pstmt8.setString(2, rent_l_cd);
		    pstmt8.executeUpdate();
			pstmt8.close();

			pstmt9 = conn.prepareStatement(query9);
			pstmt9.setString(1, rent_mng_id);
			pstmt9.setString(2, rent_l_cd);
		    pstmt9.executeUpdate();
			pstmt9.close();

			pstmt10 = conn.prepareStatement(query10);
			pstmt10.setString(1, rent_mng_id);
			pstmt10.setString(2, rent_l_cd);
		    pstmt10.executeUpdate();
			pstmt10.close();

			pstmt11 = conn.prepareStatement(query11);
			pstmt11.setString(1, rent_mng_id);
			pstmt11.setString(2, rent_l_cd);
		    pstmt11.executeUpdate();
			pstmt11.close();


			pstmt12 = conn.prepareStatement(query12);
			pstmt12.setString(1, rent_mng_id);
			pstmt12.setString(2, rent_l_cd);
		    pstmt12.executeUpdate();
			pstmt12.close();

			pstmt13 = conn.prepareStatement(query13);
			pstmt13.setString(1, rent_mng_id);
			pstmt13.setString(2, rent_l_cd);
		    pstmt13.executeUpdate();
			pstmt13.close();

			pstmt14 = conn.prepareStatement(query14);
			pstmt14.setString(1, rent_mng_id);
			pstmt14.setString(2, rent_l_cd);
		    pstmt14.executeUpdate();
			pstmt14.close();

			pstmt15 = conn.prepareStatement(query15);
			pstmt15.setString(1, rent_mng_id);
			pstmt15.setString(2, rent_l_cd);
		    pstmt15.executeUpdate();
			pstmt15.close();

			pstmt16 = conn.prepareStatement(query16);
			pstmt16.setString(1, rent_mng_id);
			pstmt16.setString(2, rent_l_cd);
		    pstmt16.executeUpdate();
			pstmt16.close();

			pstmt17 = conn.prepareStatement(query17);
			pstmt17.setString(1, rent_mng_id);
			pstmt17.setString(2, rent_l_cd);
		    pstmt17.executeUpdate();
			pstmt17.close();

			pstmt18 = conn.prepareStatement(query18);
			pstmt18.setString(1, rent_mng_id);
			pstmt18.setString(2, rent_l_cd);
		    pstmt18.executeUpdate();
			pstmt18.close();

			pstmt19 = conn.prepareStatement(query19);
			pstmt19.setString(1, rent_mng_id);
			pstmt19.setString(2, rent_l_cd);
		    pstmt19.executeUpdate();
			pstmt19.close();

			pstmt20 = conn.prepareStatement(query20);
			pstmt20.setString(1, rent_mng_id);
			pstmt20.setString(2, rent_l_cd);
		    pstmt20.executeUpdate();
			pstmt20.close();

			pstmt21 = conn.prepareStatement(query21);
			pstmt21.setString(1, rent_mng_id);
			pstmt21.setString(2, rent_l_cd);
		    pstmt21.executeUpdate();
			pstmt21.close();

			pstmt22 = conn.prepareStatement(query22);
			pstmt22.setString(1, rent_mng_id);
			pstmt22.setString(2, rent_l_cd);
		    pstmt22.executeUpdate();
			pstmt22.close();

			pstmt23 = conn.prepareStatement(query23);
		    pstmt23.executeUpdate();
			pstmt23.close();

			pstmt24 = conn.prepareStatement(query24);
		    pstmt24.executeUpdate();
			pstmt24.close();
			
			pstmt25 = conn.prepareStatement(query25);
			pstmt25.setString(1, rent_mng_id);
			pstmt25.setString(2, rent_l_cd);
		    pstmt25.executeUpdate();
			pstmt25.close();

			pstmt26 = conn.prepareStatement(query26);
			pstmt26.setString(1, rent_mng_id);
			pstmt26.setString(2, rent_l_cd);
		    pstmt26.executeUpdate();
			pstmt26.close();

			pstmt27 = conn.prepareStatement(query27);
			pstmt27.setString(1, rent_mng_id);
			pstmt27.setString(2, rent_l_cd);
		    pstmt27.executeUpdate();
			pstmt27.close();

			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:deleteCont]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
				if(pstmt2 != null)	pstmt2.close();
				if(pstmt3 != null)	pstmt3.close();
				if(pstmt4 != null)	pstmt4.close();
				if(pstmt5 != null)	pstmt5.close();
				if(pstmt6 != null)	pstmt6.close();
				if(pstmt7 != null)	pstmt7.close();
				if(pstmt8 != null)	pstmt8.close();
				if(pstmt9 != null)	pstmt9.close();
				if(pstmt10 != null)	pstmt10.close();
				if(pstmt11 != null)	pstmt11.close();
				if(pstmt12 != null)	pstmt12.close();
				if(pstmt13 != null)	pstmt13.close();
				if(pstmt14 != null)	pstmt14.close();
				if(pstmt15 != null)	pstmt15.close();
				if(pstmt16 != null)	pstmt16.close();
				if(pstmt17 != null)	pstmt17.close();
				if(pstmt18 != null)	pstmt18.close();
				if(pstmt19 != null)	pstmt19.close();
				if(pstmt20 != null)	pstmt20.close();
				if(pstmt21 != null)	pstmt21.close();
				if(pstmt22 != null)	pstmt22.close();
				if(pstmt23 != null)	pstmt23.close();
				if(pstmt24 != null)	pstmt24.close();
				if(pstmt25 != null)	pstmt25.close();
				if(pstmt26 != null)	pstmt26.close();
				if(pstmt27 != null)	pstmt27.close();

			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//고객신용평가 이력리스트
	public Vector getDecClientHList(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select distinct a.client_id, decode(b.dec_gr,'','0','1') dec_st, nvl(b.dec_gr,a.spr_kd) dec_gr, nvl(b.dec_f_dt,a.rent_dt) dec_f_dt, nvl(b.dec_f_id,a.bus_id) dec_f_id"+
				" from cont a, cont_etc b"+
				" where a.client_id=? and a.rent_mng_id=b.rent_mng_id(+) and a.rent_l_cd=b.rent_l_cd(+)"+
				" and nvl(b.dec_gr,a.spr_kd) is not null";

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);

	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getDecClientHList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//고객신용평가 이력리스트
	public Vector getDecContHList(String client_id, String dec_gr, String dec_f_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select a.rent_mng_id, a.rent_l_cd, a.rent_dt, nvl(c.car_no,'미등록') car_no, f.car_nm, a.bus_id"+
				" from cont a, cont_etc b, car_reg c, car_etc d, car_nm e, car_mng f"+
				" where a.client_id=? "+
				" and a.rent_mng_id=b.rent_mng_id(+) and a.rent_l_cd=b.rent_l_cd(+)"+
				" and a.car_mng_id=c.car_mng_id(+) "+
				" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
				" and d.car_id=e.car_id and d.car_seq=e.car_seq and e.car_comp_id=f.car_comp_id and e.car_cd=f.code"+
				" and nvl(b.dec_gr,a.spr_kd)=? and nvl(b.dec_f_dt,a.rent_dt)=?";

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);
			pstmt.setString(2, dec_gr);
			pstmt.setString(3, dec_f_dt);

	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getDecContHList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//초기선납금 입금확인
	public String getPpPaySt(String rent_mng_id, String rent_l_cd, String rent_st, String pp_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String st = "-";
		int pp_amt = 0;
		int pay_amt = 0;
		int jan_amt = 0;
		String query = "";


		query = " select sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt))-sum(ext_pay_amt) jan_amt"+
				" from scd_ext"+
				" where rent_mng_id=? and rent_l_cd=? and rent_st=? and ext_st in ('0','1','2','5')";
		
		if(!pp_st.equals(""))	query += " and ext_st=?";

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, rent_st);
			if(!pp_st.equals("")){
				pstmt.setString(4, pp_st);
			}
			
	    	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{				
				pp_amt  = rs.getInt(1);
				pay_amt = rs.getInt(2);
				jan_amt = rs.getInt(3);
			}

			if(pp_amt > 0 && pay_amt == 0 && jan_amt  > 0)	st = "미입금";
			if(pp_amt > 0 && pay_amt  > 0 && jan_amt == 0)	st = "입금";
			if(pp_amt > 0 && pay_amt  > 0 && jan_amt  > 0)	st = "잔액";
			if(pp_amt > 0 && pay_amt  > 0 && jan_amt  < 0)	st = "입금";
			
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getPpPaySt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return st;
		}		
	}

	//초기선납금 입금확인
	public int getPpNoPayAmt(String rent_mng_id, String rent_l_cd, String rent_st, String pp_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int pp_amt = 0;
		int pay_amt = 0;
		int jan_amt = 0;
		String query = "";


		query = " select sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt))-sum(ext_pay_amt) jan_amt"+
				" from scd_ext"+
				" where rent_mng_id=? and rent_l_cd=? and rent_st=? and ext_st in ('0','1','2')";
		
		if(!pp_st.equals(""))	query += " and ext_st=?";

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, rent_st);
			if(!pp_st.equals("")){
				pstmt.setString(4, pp_st);
			}
			
	    	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{				
				pp_amt  = rs.getInt(1);
				pay_amt = rs.getInt(2);
				jan_amt = rs.getInt(3);
			}

		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getPpNoPayAmt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return jan_amt;
		}		
	}

	//초기선납금 입금확인
	public int getPpPayAmt(String rent_mng_id, String rent_l_cd, String rent_st, String pp_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int pp_amt = 0;
		int pay_amt = 0;
		int jan_amt = 0;
		String query = "";


		query = " select sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt))-sum(ext_pay_amt) jan_amt"+
				" from scd_ext"+
				" where rent_mng_id=? and rent_l_cd=? and rent_st=? and ext_st in ('0','1','2')";
		
		if(!pp_st.equals(""))	query += " and ext_st=?";

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, rent_st);
			if(!pp_st.equals("")){
				pstmt.setString(4, pp_st);
			}
			
	    	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{				
				pp_amt  = rs.getInt(1);
				pay_amt = rs.getInt(2);
				jan_amt = rs.getInt(3);
			}

		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getPpPayAmt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return pay_amt;
		}		
	}

	//계약수정 : 대여기타정보 조회
	public ContCarBean getContFeeEtc(String m_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCarBean car = new ContCarBean();
		String query = "";

		query = " select RENT_MNG_ID, RENT_L_CD, RENT_ST, sh_car_amt, sh_year, sh_month, sh_day, sh_day_bas_dt, sh_amt, sh_ja, sh_km, sh_tot_km, sh_km_bas_dt, "+
				"        chk_id, chk_dt, cms_not_cau, sh_init_reg_dt, bus_agnt_id, bus_agnt_per, bus_agnt_r_per, cls_n_mon, cls_n_amt, "+
				"        bc_est_id, bc_s_a, bc_s_b, bc_s_c, bc_s_d, bc_s_e, bc_s_f, bc_s_g, bc_s_i, bc_s_i2, bc_b_a, bc_b_b, bc_b_d, bc_b_e1, bc_b_e2, "+
                "        bc_b_k, bc_b_n, bc_b_g, bc_b_u, bc_b_ac, agree_dist, bc_b_g_cont, bc_b_u_cont, bc_b_ac_cont, bc_etc, "+
                "        over_run_amt, over_run_day, over_serv_amt, agree_dist_yn, min_agree_dist, max_agree_dist, cng_chk_id, cng_chk_dt, cng_chk_st, "+
                "        to_char(reg_dt,'YYYYMMDD') reg_dt, con_day, con_etc, bc_b_t, over_bas_km, cust_est_km, bus_cau, bus_yn, bus_cau_dt, "+
				"        credit_sac_id, credit_sac_dt, dc_ra_st, dc_ra_sac_id, dc_ra_etc, driver_add_amt, driver_add_v_amt, return_select, br_to, br_to_st, br_from, br_from_st, bc_dlv_yn, "+	//운전차추가요금(부가세)추가(2018.03.30)
                "        rtn_run_amt, rtn_run_amt_yn "+
				" from   fee_etc "+
				" where  RENT_MNG_ID = ? and RENT_L_CD = ? and rent_st=?";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_st);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				car.setRent_mng_id		(rs.getString("RENT_MNG_ID")		==null?"":rs.getString("RENT_MNG_ID"));
				car.setRent_l_cd		(rs.getString("RENT_L_CD")			==null?"":rs.getString("RENT_L_CD"));
				car.setRent_st			(rs.getString("RENT_ST")			==null?"":rs.getString("RENT_ST"));
				car.setSh_car_amt		(rs.getString("sh_car_amt")			==null?0:Integer.parseInt(rs.getString("sh_car_amt")));
				car.setSh_year			(rs.getString("sh_year")			==null?"":rs.getString("sh_year"));
				car.setSh_month			(rs.getString("sh_month")			==null?"":rs.getString("sh_month"));
				car.setSh_day			(rs.getString("sh_day")				==null?"":rs.getString("sh_day"));
				car.setSh_day_bas_dt	(rs.getString("sh_day_bas_dt")		==null?"":rs.getString("sh_day_bas_dt"));
				car.setSh_amt			(rs.getString("sh_amt")				==null?0:Integer.parseInt(rs.getString("sh_amt")));
				car.setSh_ja			(rs.getString("sh_ja")				==null?0:AddUtil.parseFloat(rs.getString("sh_ja")));
				car.setSh_km			(rs.getString("sh_km")				==null?0:Integer.parseInt(rs.getString("sh_km")));
				car.setSh_tot_km		(rs.getString("sh_tot_km")			==null?0:Integer.parseInt(rs.getString("sh_tot_km")));
				car.setSh_km_bas_dt		(rs.getString("sh_km_bas_dt")		==null?"":rs.getString("sh_km_bas_dt"));
				car.setChk_id			(rs.getString("chk_id")				==null?"":rs.getString("chk_id"));
				car.setChk_dt			(rs.getString("chk_dt")				==null?"":rs.getString("chk_dt"));
				car.setCms_not_cau		(rs.getString("cms_not_cau")		==null?"":rs.getString("cms_not_cau"));
				car.setSh_init_reg_dt	(rs.getString("sh_init_reg_dt")		==null?"":rs.getString("sh_init_reg_dt"));
				car.setBus_agnt_id		(rs.getString("bus_agnt_id")		==null?"":rs.getString("bus_agnt_id"));
				car.setBus_agnt_per		(rs.getString("bus_agnt_per")		==null?0:AddUtil.parseFloat(rs.getString("bus_agnt_per")));
				car.setBus_agnt_r_per	(rs.getString("bus_agnt_r_per")		==null?0:AddUtil.parseFloat(rs.getString("bus_agnt_r_per")));
				car.setCls_n_mon		(rs.getString("cls_n_mon")			==null?"":rs.getString("cls_n_mon"));
				car.setCls_n_amt		(rs.getString("cls_n_amt")			==null?0:Integer.parseInt(rs.getString("cls_n_amt")));
				car.setBc_est_id		(rs.getString("bc_est_id")			==null?"":rs.getString("bc_est_id"));
				car.setBc_s_a			(rs.getString("bc_s_a")				==null?0:Integer.parseInt(rs.getString("bc_s_a")));
				car.setBc_s_b			(rs.getString("bc_s_b")				==null?"":rs.getString("bc_s_b"));
				car.setBc_s_c			(rs.getString("bc_s_c")				==null?0:Integer.parseInt(rs.getString("bc_s_c")));
				car.setBc_s_d			(rs.getString("bc_s_d")				==null?0:AddUtil.parseFloat(rs.getString("bc_s_d")));
				car.setBc_s_e			(rs.getString("bc_s_e")				==null?0:AddUtil.parseFloat(rs.getString("bc_s_e")));
				car.setBc_s_f			(rs.getString("bc_s_f")				==null?0:Integer.parseInt(rs.getString("bc_s_f")));
				car.setBc_s_g			(rs.getString("bc_s_g")				==null?0:Integer.parseInt(rs.getString("bc_s_g")));
				car.setBc_s_i			(rs.getString("bc_s_i")				==null?0:AddUtil.parseFloat(rs.getString("bc_s_i")));
				car.setBc_s_i2			(rs.getString("bc_s_i2")			==null?0:AddUtil.parseFloat(rs.getString("bc_s_i2")));
				car.setBc_b_a			(rs.getString("bc_b_a")				==null?0:Integer.parseInt(rs.getString("bc_b_a")));
				car.setBc_b_b			(rs.getString("bc_b_b")				==null?0:Integer.parseInt(rs.getString("bc_b_b")));
				car.setBc_b_d			(rs.getString("bc_b_d")				==null?0:Integer.parseInt(rs.getString("bc_b_d")));
				car.setBc_b_e1			(rs.getString("bc_b_e1")			==null?0:AddUtil.parseFloat(rs.getString("bc_b_e1")));
				car.setBc_b_e2			(rs.getString("bc_b_e2")			==null?0:Integer.parseInt(rs.getString("bc_b_e2")));
				car.setBc_b_k			(rs.getString("bc_b_k")				==null?0:Integer.parseInt(rs.getString("bc_b_k")));
				car.setBc_b_n			(rs.getString("bc_b_n")				==null?0:Integer.parseInt(rs.getString("bc_b_n")));
				car.setBc_b_g			(rs.getString("bc_b_g")				==null?0:Integer.parseInt(rs.getString("bc_b_g")));
				car.setBc_b_u			(rs.getString("bc_b_u")				==null?0:Integer.parseInt(rs.getString("bc_b_u")));
				car.setBc_b_ac			(rs.getString("bc_b_ac")			==null?0:Integer.parseInt(rs.getString("bc_b_ac")));
				car.setAgree_dist		(rs.getString("agree_dist")			==null?0:Integer.parseInt(rs.getString("agree_dist")));
				car.setBc_b_g_cont		(rs.getString("bc_b_g_cont")		==null?"":rs.getString("bc_b_g_cont"));
				car.setBc_b_u_cont		(rs.getString("bc_b_u_cont")		==null?"":rs.getString("bc_b_u_cont"));
				car.setBc_b_ac_cont		(rs.getString("bc_b_ac_cont")		==null?"":rs.getString("bc_b_ac_cont"));
				car.setBc_etc			(rs.getString("bc_etc")				==null?"":rs.getString("bc_etc"));
				car.setOver_run_amt		(rs.getString("over_run_amt")		==null?0:Integer.parseInt(rs.getString("over_run_amt")));
				car.setOver_run_day		(rs.getString("over_run_day")		==null?0:Integer.parseInt(rs.getString("over_run_day")));
				car.setOver_serv_amt	(rs.getString("over_serv_amt")		==null?0:Integer.parseInt(rs.getString("over_serv_amt")));
				car.setAgree_dist_yn	(rs.getString("agree_dist_yn")		==null?"":rs.getString("agree_dist_yn"));
				car.setMin_agree_dist	(rs.getString("min_agree_dist")		==null?0:Integer.parseInt(rs.getString("min_agree_dist")));
				car.setMax_agree_dist	(rs.getString("max_agree_dist")		==null?0:Integer.parseInt(rs.getString("max_agree_dist")));
				car.setCng_chk_id		(rs.getString("cng_chk_id")			==null?"":rs.getString("cng_chk_id"));
				car.setCng_chk_dt		(rs.getString("cng_chk_dt")			==null?"":rs.getString("cng_chk_dt"));
				car.setCng_chk_st		(rs.getString("cng_chk_st")			==null?"":rs.getString("cng_chk_st"));
				car.setReg_dt			(rs.getString("reg_dt")				==null?"":rs.getString("reg_dt"));
				car.setCon_day			(rs.getString("con_day")			==null?"":rs.getString("con_day"));
				car.setCon_etc			(rs.getString("con_etc")			==null?"":rs.getString("con_etc"));
				car.setBc_b_t			(rs.getString("bc_b_t")				==null?0:Integer.parseInt(rs.getString("bc_b_t")));
				car.setOver_bas_km		(rs.getString("over_bas_km")		==null?0:Integer.parseInt(rs.getString("over_bas_km")));
				car.setCust_est_km		(rs.getString("cust_est_km")		==null?0:Integer.parseInt(rs.getString("cust_est_km")));
				car.setBus_cau			(rs.getString("bus_cau")			==null?"":rs.getString("bus_cau"));
				car.setBus_yn			(rs.getString("bus_yn")				==null?"":rs.getString("bus_yn"));
				car.setBus_cau_dt		(rs.getString("bus_cau_dt")			==null?"":rs.getString("bus_cau_dt"));
				car.setCredit_sac_id	(rs.getString("credit_sac_id")		==null?"":rs.getString("credit_sac_id"));
				car.setCredit_sac_dt	(rs.getString("credit_sac_dt")		==null?"":rs.getString("credit_sac_dt"));
				car.setDc_ra_st			(rs.getString("dc_ra_st")			==null?"":rs.getString("dc_ra_st"));
				car.setDc_ra_sac_id		(rs.getString("dc_ra_sac_id")		==null?"":rs.getString("dc_ra_sac_id"));
				car.setDc_ra_etc		(rs.getString("dc_ra_etc")			==null?"":rs.getString("dc_ra_etc"));
				car.setDriver_add_amt	(rs.getString("driver_add_amt")		==null?0:Integer.parseInt(rs.getString("driver_add_amt")));
				car.setDriver_add_v_amt	(rs.getString("driver_add_v_amt")	==null?0:Integer.parseInt(rs.getString("driver_add_v_amt")));	//운전차추가요금(부가세)추가(2018.03.30) 
				car.setReturn_select	(rs.getString("return_select")		==null?"":rs.getString("return_select"));
				car.setBr_to_st			(rs.getString("br_to_st")			==null?"":rs.getString("br_to_st"));
				car.setBr_to			(rs.getString("br_to")				==null?"":rs.getString("br_to"));
				car.setBr_from			(rs.getString("br_from")			==null?"":rs.getString("br_from"));
				car.setBr_from_st		(rs.getString("br_from_st")			==null?"":rs.getString("br_from_st"));
				car.setBc_dlv_yn		(rs.getString("bc_dlv_yn")			==null?"":rs.getString("bc_dlv_yn"));
				car.setRtn_run_amt		(rs.getString("rtn_run_amt")		==null?0:Integer.parseInt(rs.getString("rtn_run_amt")));
				car.setRtn_run_amt_yn	(rs.getString("rtn_run_amt_yn")		==null?"":rs.getString("rtn_run_amt_yn"));

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeEtc]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return car;
		}				
	}

	//계약수정 : 대여기타정보 조회
	public ContCarBean getContFeeEtcAdd(String m_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCarBean car = new ContCarBean();
		String query = "";
		query = " select * from fee_etc_add where RENT_MNG_ID = ? and RENT_L_CD = ? and rent_st=?";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_st);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				car.setRent_mng_id		(rs.getString("RENT_MNG_ID")	==null?"":rs.getString("RENT_MNG_ID"));
				car.setRent_l_cd		(rs.getString("RENT_L_CD")		==null?"":rs.getString("RENT_L_CD"));
				car.setRent_st			(rs.getString("RENT_ST")		==null?"":rs.getString("RENT_ST"));
				car.setSh_car_amt		(rs.getString("sh_car_amt")		==null?0:Integer.parseInt(rs.getString("sh_car_amt")));
				car.setSh_year			(rs.getString("sh_year")		==null?"":rs.getString("sh_year"));
				car.setSh_month			(rs.getString("sh_month")		==null?"":rs.getString("sh_month"));
				car.setSh_day			(rs.getString("sh_day")			==null?"":rs.getString("sh_day"));
				car.setSh_day_bas_dt	(rs.getString("sh_day_bas_dt")	==null?"":rs.getString("sh_day_bas_dt"));
				car.setSh_amt			(rs.getString("sh_amt")			==null?0:Integer.parseInt(rs.getString("sh_amt")));
				car.setSh_ja			(rs.getString("sh_ja")			==null?0:AddUtil.parseFloat(rs.getString("sh_ja")));
				car.setSh_km			(rs.getString("sh_km")			==null?0:Integer.parseInt(rs.getString("sh_km")));
				car.setSh_tot_km		(rs.getString("sh_tot_km")		==null?0:Integer.parseInt(rs.getString("sh_tot_km")));
				car.setSh_km_bas_dt		(rs.getString("sh_km_bas_dt")	==null?"":rs.getString("sh_km_bas_dt"));
				car.setChk_id			(rs.getString("chk_id")			==null?"":rs.getString("chk_id"));
				car.setChk_dt			(rs.getString("chk_dt")			==null?"":rs.getString("chk_dt"));
				car.setCms_not_cau		(rs.getString("cms_not_cau")	==null?"":rs.getString("cms_not_cau"));
				car.setSh_init_reg_dt	(rs.getString("sh_init_reg_dt")	==null?"":rs.getString("sh_init_reg_dt"));
				car.setBus_agnt_id		(rs.getString("bus_agnt_id")	==null?"":rs.getString("bus_agnt_id"));
				car.setBus_agnt_per		(rs.getString("bus_agnt_per")	==null?0:AddUtil.parseFloat(rs.getString("bus_agnt_per")));
				car.setBus_agnt_r_per	(rs.getString("bus_agnt_r_per")	==null?0:AddUtil.parseFloat(rs.getString("bus_agnt_r_per")));
				car.setCls_n_mon		(rs.getString("cls_n_mon")		==null?"":rs.getString("cls_n_mon"));
				car.setCls_n_amt		(rs.getString("cls_n_amt")		==null?0:Integer.parseInt(rs.getString("cls_n_amt")));
				car.setBc_est_id		(rs.getString("bc_est_id")		==null?"":rs.getString("bc_est_id"));
				car.setBc_s_a			(rs.getString("bc_s_a")			==null?0:Integer.parseInt(rs.getString("bc_s_a")));
				car.setBc_s_b			(rs.getString("bc_s_b")			==null?"":rs.getString("bc_s_b"));
				car.setBc_s_c			(rs.getString("bc_s_c")			==null?0:Integer.parseInt(rs.getString("bc_s_c")));
				car.setBc_s_d			(rs.getString("bc_s_d")			==null?0:AddUtil.parseFloat(rs.getString("bc_s_d")));
				car.setBc_s_e			(rs.getString("bc_s_e")			==null?0:AddUtil.parseFloat(rs.getString("bc_s_e")));
				car.setBc_s_f			(rs.getString("bc_s_f")			==null?0:Integer.parseInt(rs.getString("bc_s_f")));
				car.setBc_s_g			(rs.getString("bc_s_g")			==null?0:Integer.parseInt(rs.getString("bc_s_g")));
				car.setBc_s_i			(rs.getString("bc_s_i")			==null?0:AddUtil.parseFloat(rs.getString("bc_s_i")));
				car.setBc_s_i2			(rs.getString("bc_s_i2")		==null?0:AddUtil.parseFloat(rs.getString("bc_s_i2")));
				car.setBc_b_a			(rs.getString("bc_b_a")			==null?0:Integer.parseInt(rs.getString("bc_b_a")));
				car.setBc_b_b			(rs.getString("bc_b_b")			==null?0:Integer.parseInt(rs.getString("bc_b_b")));
				car.setBc_b_d			(rs.getString("bc_b_d")			==null?0:Integer.parseInt(rs.getString("bc_b_d")));
				car.setBc_b_e1			(rs.getString("bc_b_e1")		==null?0:AddUtil.parseFloat(rs.getString("bc_b_e1")));
				car.setBc_b_e2			(rs.getString("bc_b_e2")		==null?0:Integer.parseInt(rs.getString("bc_b_e2")));
				car.setBc_b_k			(rs.getString("bc_b_k")			==null?0:Integer.parseInt(rs.getString("bc_b_k")));
				car.setBc_b_n			(rs.getString("bc_b_n")			==null?0:Integer.parseInt(rs.getString("bc_b_n")));
				car.setBc_b_g			(rs.getString("bc_b_g")			==null?0:Integer.parseInt(rs.getString("bc_b_g")));
				car.setBc_b_u			(rs.getString("bc_b_u")			==null?0:Integer.parseInt(rs.getString("bc_b_u")));
				car.setBc_b_ac			(rs.getString("bc_b_ac")		==null?0:Integer.parseInt(rs.getString("bc_b_ac")));
				car.setAgree_dist		(rs.getString("agree_dist")		==null?0:Integer.parseInt(rs.getString("agree_dist")));
				car.setBc_b_g_cont		(rs.getString("bc_b_g_cont")	==null?"":rs.getString("bc_b_g_cont"));
				car.setBc_b_u_cont		(rs.getString("bc_b_u_cont")	==null?"":rs.getString("bc_b_u_cont"));
				car.setBc_b_ac_cont		(rs.getString("bc_b_ac_cont")	==null?"":rs.getString("bc_b_ac_cont"));
				car.setBc_etc			(rs.getString("bc_etc")			==null?"":rs.getString("bc_etc"));
				car.setOver_run_amt		(rs.getString("over_run_amt")	==null?0:Integer.parseInt(rs.getString("over_run_amt")));
				car.setOver_run_day		(rs.getString("over_run_day")	==null?0:Integer.parseInt(rs.getString("over_run_day")));
				car.setOver_serv_amt	(rs.getString("over_serv_amt")	==null?0:Integer.parseInt(rs.getString("over_serv_amt")));
				car.setAgree_dist_yn	(rs.getString("agree_dist_yn")	==null?"":rs.getString("agree_dist_yn"));
				car.setMin_agree_dist	(rs.getString("min_agree_dist")	==null?0:Integer.parseInt(rs.getString("min_agree_dist")));
				car.setMax_agree_dist	(rs.getString("max_agree_dist")	==null?0:Integer.parseInt(rs.getString("max_agree_dist")));
				car.setDriver_add_amt	(rs.getString("driver_add_amt")	==null?0:Integer.parseInt(rs.getString("driver_add_amt")));
				car.setDriver_add_v_amt	(rs.getString("driver_add_v_amt")==null?0:Integer.parseInt(rs.getString("driver_add_v_amt")));	//운전차추가요금(부가세)추가(2018.03.30)
				car.setRtn_run_amt		(rs.getString("rtn_run_amt")	==null?0:Integer.parseInt(rs.getString("rtn_run_amt")));
				car.setRtn_run_amt_yn	(rs.getString("rtn_run_amt_yn")	==null?"":rs.getString("rtn_run_amt_yn"));

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeEtcAdd]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return car;
		}				
	}

	//계약수정 : 대여기타정보 조회
	public ContCarBean getContFeeEtcDt(String m_id, String l_cd, String rent_start_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCarBean car = new ContCarBean();
		String query = "";

		query = " select * from fee_etc where (rent_mng_id, rent_l_cd, rent_st) in (select rent_mng_id, rent_l_cd, rent_st from fee where RENT_MNG_ID = ? and RENT_L_CD = ? and rent_start_dt=?)";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_start_dt);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				car.setRent_mng_id		(rs.getString("RENT_MNG_ID")		==null?"":rs.getString("RENT_MNG_ID"));
				car.setRent_l_cd		(rs.getString("RENT_L_CD")			==null?"":rs.getString("RENT_L_CD"));
				car.setRent_st			(rs.getString("RENT_ST")			==null?"":rs.getString("RENT_ST"));
				car.setSh_car_amt		(rs.getString("sh_car_amt")			==null?0:Integer.parseInt(rs.getString("sh_car_amt")));
				car.setSh_year			(rs.getString("sh_year")			==null?"":rs.getString("sh_year"));
				car.setSh_month			(rs.getString("sh_month")			==null?"":rs.getString("sh_month"));
				car.setSh_day			(rs.getString("sh_day")				==null?"":rs.getString("sh_day"));
				car.setSh_day_bas_dt	(rs.getString("sh_day_bas_dt")		==null?"":rs.getString("sh_day_bas_dt"));
				car.setSh_amt			(rs.getString("sh_amt")				==null?0:Integer.parseInt(rs.getString("sh_amt")));
				car.setSh_ja			(rs.getString("sh_ja")				==null?0:AddUtil.parseFloat(rs.getString("sh_ja")));
				car.setSh_km			(rs.getString("sh_km")				==null?0:Integer.parseInt(rs.getString("sh_km")));
				car.setSh_tot_km		(rs.getString("sh_tot_km")			==null?0:Integer.parseInt(rs.getString("sh_tot_km")));
				car.setSh_km_bas_dt		(rs.getString("sh_km_bas_dt")		==null?"":rs.getString("sh_km_bas_dt"));
				car.setChk_id			(rs.getString("chk_id")				==null?"":rs.getString("chk_id"));
				car.setChk_dt			(rs.getString("chk_dt")				==null?"":rs.getString("chk_dt"));
				car.setCms_not_cau		(rs.getString("cms_not_cau")		==null?"":rs.getString("cms_not_cau"));
				car.setSh_init_reg_dt	(rs.getString("sh_init_reg_dt")		==null?"":rs.getString("sh_init_reg_dt"));
				car.setBus_agnt_id		(rs.getString("bus_agnt_id")		==null?"":rs.getString("bus_agnt_id"));
				car.setBus_agnt_per		(rs.getString("bus_agnt_per")		==null?0:AddUtil.parseFloat(rs.getString("bus_agnt_per")));
				car.setBus_agnt_r_per	(rs.getString("bus_agnt_r_per")		==null?0:AddUtil.parseFloat(rs.getString("bus_agnt_r_per")));
				car.setCls_n_mon		(rs.getString("cls_n_mon")			==null?"":rs.getString("cls_n_mon"));
				car.setCls_n_amt		(rs.getString("cls_n_amt")			==null?0:Integer.parseInt(rs.getString("cls_n_amt")));
				car.setBc_est_id		(rs.getString("bc_est_id")			==null?"":rs.getString("bc_est_id"));
				car.setBc_s_a			(rs.getString("bc_s_a")				==null?0:Integer.parseInt(rs.getString("bc_s_a")));
				car.setBc_s_b			(rs.getString("bc_s_b")				==null?"":rs.getString("bc_s_b"));
				car.setBc_s_c			(rs.getString("bc_s_c")				==null?0:Integer.parseInt(rs.getString("bc_s_c")));
				car.setBc_s_d			(rs.getString("bc_s_d")				==null?0:AddUtil.parseFloat(rs.getString("bc_s_d")));
				car.setBc_s_e			(rs.getString("bc_s_e")				==null?0:AddUtil.parseFloat(rs.getString("bc_s_e")));
				car.setBc_s_f			(rs.getString("bc_s_f")				==null?0:Integer.parseInt(rs.getString("bc_s_f")));
				car.setBc_s_g			(rs.getString("bc_s_g")				==null?0:Integer.parseInt(rs.getString("bc_s_g")));
				car.setBc_s_i			(rs.getString("bc_s_i")				==null?0:AddUtil.parseFloat(rs.getString("bc_s_i")));
				car.setBc_s_i2			(rs.getString("bc_s_i2")			==null?0:AddUtil.parseFloat(rs.getString("bc_s_i2")));
				car.setBc_b_a			(rs.getString("bc_b_a")				==null?0:Integer.parseInt(rs.getString("bc_b_a")));
				car.setBc_b_b			(rs.getString("bc_b_b")				==null?0:Integer.parseInt(rs.getString("bc_b_b")));
				car.setBc_b_d			(rs.getString("bc_b_d")				==null?0:Integer.parseInt(rs.getString("bc_b_d")));
				car.setBc_b_e1			(rs.getString("bc_b_e1")			==null?0:AddUtil.parseFloat(rs.getString("bc_b_e1")));
				car.setBc_b_e2			(rs.getString("bc_b_e2")			==null?0:Integer.parseInt(rs.getString("bc_b_e2")));
				car.setBc_b_k			(rs.getString("bc_b_k")				==null?0:Integer.parseInt(rs.getString("bc_b_k")));
				car.setBc_b_n			(rs.getString("bc_b_n")				==null?0:Integer.parseInt(rs.getString("bc_b_n")));
				car.setBc_b_g			(rs.getString("bc_b_g")				==null?0:Integer.parseInt(rs.getString("bc_b_g")));
				car.setBc_b_u			(rs.getString("bc_b_u")				==null?0:Integer.parseInt(rs.getString("bc_b_u")));
				car.setBc_b_ac			(rs.getString("bc_b_ac")			==null?0:Integer.parseInt(rs.getString("bc_b_ac")));
				car.setAgree_dist		(rs.getString("agree_dist")			==null?0:Integer.parseInt(rs.getString("agree_dist")));
				car.setBc_b_g_cont		(rs.getString("bc_b_g_cont")		==null?"":rs.getString("bc_b_g_cont"));
				car.setBc_b_u_cont		(rs.getString("bc_b_u_cont")		==null?"":rs.getString("bc_b_u_cont"));
				car.setBc_b_ac_cont		(rs.getString("bc_b_ac_cont")		==null?"":rs.getString("bc_b_ac_cont"));
				car.setBc_etc			(rs.getString("bc_etc")				==null?"":rs.getString("bc_etc"));
				car.setOver_run_amt		(rs.getString("over_run_amt")		==null?0:Integer.parseInt(rs.getString("over_run_amt")));
				car.setOver_run_day		(rs.getString("over_run_day")		==null?0:Integer.parseInt(rs.getString("over_run_day")));
				car.setOver_serv_amt	(rs.getString("over_serv_amt")		==null?0:Integer.parseInt(rs.getString("over_serv_amt")));
				car.setAgree_dist_yn	(rs.getString("agree_dist_yn")		==null?"":rs.getString("agree_dist_yn"));
				car.setMin_agree_dist	(rs.getString("min_agree_dist")		==null?0:Integer.parseInt(rs.getString("min_agree_dist")));
				car.setMax_agree_dist	(rs.getString("max_agree_dist")		==null?0:Integer.parseInt(rs.getString("max_agree_dist")));
				car.setCng_chk_id		(rs.getString("cng_chk_id")			==null?"":rs.getString("cng_chk_id"));
				car.setCng_chk_dt		(rs.getString("cng_chk_dt")			==null?"":rs.getString("cng_chk_dt"));
				car.setCng_chk_st		(rs.getString("cng_chk_st")			==null?"":rs.getString("cng_chk_st"));
				car.setReg_dt			(rs.getString("reg_dt")				==null?"":rs.getString("reg_dt"));
				car.setCon_day			(rs.getString("con_day")			==null?"":rs.getString("con_day"));
				car.setCon_etc			(rs.getString("con_etc")			==null?"":rs.getString("con_etc"));
				car.setBc_b_t			(rs.getString("bc_b_t")				==null?0:Integer.parseInt(rs.getString("bc_b_t")));
				car.setOver_bas_km		(rs.getString("over_bas_km")		==null?0:Integer.parseInt(rs.getString("over_bas_km")));
				car.setCust_est_km		(rs.getString("cust_est_km")		==null?0:Integer.parseInt(rs.getString("cust_est_km")));
				car.setBus_cau			(rs.getString("bus_cau")			==null?"":rs.getString("bus_cau"));
				car.setBus_yn			(rs.getString("bus_yn")				==null?"":rs.getString("bus_yn"));
				car.setBus_cau_dt		(rs.getString("bus_cau_dt")			==null?"":rs.getString("bus_cau_dt"));
				car.setCredit_sac_id	(rs.getString("credit_sac_id")		==null?"":rs.getString("credit_sac_id"));
				car.setCredit_sac_dt	(rs.getString("credit_sac_dt")		==null?"":rs.getString("credit_sac_dt"));
				car.setDc_ra_st			(rs.getString("dc_ra_st")			==null?"":rs.getString("dc_ra_st"));
				car.setDc_ra_sac_id		(rs.getString("dc_ra_sac_id")		==null?"":rs.getString("dc_ra_sac_id"));
				car.setDc_ra_etc		(rs.getString("dc_ra_etc")			==null?"":rs.getString("dc_ra_etc"));
				car.setDriver_add_amt	(rs.getString("driver_add_amt")		==null?0:Integer.parseInt(rs.getString("driver_add_amt")));
				car.setDriver_add_v_amt	(rs.getString("driver_add_v_amt")	==null?0:Integer.parseInt(rs.getString("driver_add_v_amt")));	//운전차추가요금(부가세)추가(2018.03.30)
				car.setReturn_select	(rs.getString("return_select")		==null?"":rs.getString("return_select"));
				car.setRtn_run_amt		(rs.getString("rtn_run_amt")		==null?0:Integer.parseInt(rs.getString("rtn_run_amt")));
				car.setRtn_run_amt_yn	(rs.getString("rtn_run_amt_yn")		==null?"":rs.getString("rtn_run_amt_yn"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeEtcDt]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return car;
		}				
	}

	//계약등록 : 차량 삽입 (fee_etc)
	public boolean insertFeeEtc(ContCarBean car)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into FEE_ETC "+
						" (RENT_MNG_ID, RENT_L_CD, RENT_ST, "+
						"  SH_CAR_AMT, SH_YEAR, SH_MONTH, SH_DAY, SH_DAY_BAS_DT, SH_AMT, SH_JA, SH_KM, SH_KM_BAS_DT, "+
						"  REG_DT, CMS_NOT_CAU, SH_INIT_REG_DT, BUS_AGNT_ID, BUS_AGNT_PER, BUS_AGNT_R_PER, CLS_N_MON, CLS_N_AMT, "+
						"  BC_EST_ID, BC_S_A, BC_S_B, BC_S_C, BC_S_D, BC_S_E, BC_S_F, BC_S_G, BC_S_I, BC_B_A, "+
						"  BC_B_B, BC_B_D, BC_B_E1, BC_B_E2, BC_B_K, BC_B_N, BC_B_G, BC_B_U, BC_B_AC, AGREE_DIST, "+
						"  BC_B_G_CONT, BC_B_U_CONT, SH_TOT_KM, BC_B_AC_CONT, BC_ETC, "+						
						"  OVER_RUN_AMT, OVER_RUN_DAY, OVER_SERV_AMT, AGREE_DIST_YN, MIN_AGREE_DIST, MAX_AGREE_DIST, "+
						"  CHK_ID, CHK_DT, CON_DAY, CON_ETC, OVER_BAS_KM, CUST_EST_KM, "+
						"  credit_sac_id, credit_sac_dt, dc_ra_st, dc_ra_sac_id, dc_ra_etc, driver_add_amt, driver_add_v_amt, return_select, "+		//운전차추가요금(부가세)추가(2018.03.30)	
						"  br_to, br_to_st, br_from, br_from_st, bc_dlv_yn, rtn_run_amt, rtn_run_amt_yn "+	
						")"+
						"  values "+
						"( ?, ?, ?,   "+
						"  ?, ?, ?, ?, replace(?, '-', ''),   ?, ?, ?, replace(?, '-', ''), "+
						" sysdate, ?, replace(?, '-', ''), ?, ?, ?, ?, ?, "+
						" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "+
						" ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "+
						" ?, ?, ?, ?, ?, "+						
						" ?, ?, ?, ?, ?, ?, "+
						" ?,  ";

		if(car.getChk_id().equals(""))	query += " '' ";
		else							query += " sysdate";	

		query += " , ?, ?, ?, ?,   ?, replace(?, '-', ''), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";	//운전차추가요금(부가세)추가(2018.03.30)

		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			
			pstmt.setString(1,  car.getRent_mng_id		());			
			pstmt.setString(2,  car.getRent_l_cd		());			
			pstmt.setString(3,  car.getRent_st			());			
			pstmt.setInt   (4,  car.getSh_car_amt		());
			pstmt.setString(5,  car.getSh_year			());
			pstmt.setString(6,  car.getSh_month			());
			pstmt.setString(7,  car.getSh_day			());
			pstmt.setString(8,  car.getSh_day_bas_dt	());
			pstmt.setInt   (9,  car.getSh_amt			());
			pstmt.setFloat (10, car.getSh_ja			());
			pstmt.setInt   (11, car.getSh_km			());
			pstmt.setString(12, car.getSh_km_bas_dt		());
			pstmt.setString(13, car.getCms_not_cau		());
			pstmt.setString(14, car.getSh_init_reg_dt	());
			pstmt.setString(15, car.getBus_agnt_id		());
			pstmt.setFloat (16, car.getBus_agnt_per		());
			pstmt.setFloat (17, car.getBus_agnt_r_per	());
			pstmt.setString(18, car.getCls_n_mon		());
			pstmt.setInt   (19, car.getCls_n_amt		());
			pstmt.setString(20, car.getBc_est_id		());			
			pstmt.setInt   (21, car.getBc_s_a			());			
			pstmt.setString(22, car.getBc_s_b			());			
			pstmt.setInt   (23, car.getBc_s_c			());
			pstmt.setFloat (24, car.getBc_s_d			());
			pstmt.setFloat (25, car.getBc_s_e			());
			pstmt.setInt   (26, car.getBc_s_f			());
			pstmt.setInt   (27, car.getBc_s_g			());
			pstmt.setFloat (28, car.getBc_s_i			());
			pstmt.setInt   (29, car.getBc_b_a			());
			pstmt.setInt   (30, car.getBc_b_b			());
			pstmt.setInt   (31, car.getBc_b_d			());
			pstmt.setFloat (32, car.getBc_b_e1			());
			pstmt.setInt   (33, car.getBc_b_e2			());
			pstmt.setInt   (34, car.getBc_b_k			());
			pstmt.setInt   (35, car.getBc_b_n			());
			pstmt.setInt   (36, car.getBc_b_g			());
			pstmt.setInt   (37, car.getBc_b_u			());
			pstmt.setInt   (38, car.getBc_b_ac			());
			pstmt.setInt   (39, car.getAgree_dist		());
			pstmt.setString(40, car.getBc_b_g_cont		());
			pstmt.setString(41, car.getBc_b_u_cont		());
			pstmt.setInt   (42, car.getSh_tot_km		());
			pstmt.setString(43, car.getBc_b_ac_cont		());
			pstmt.setString(44, car.getBc_etc			());
			pstmt.setInt   (45, car.getOver_run_amt		());
			pstmt.setInt   (46, car.getOver_run_day		());
			pstmt.setInt   (47, car.getOver_serv_amt	());
			pstmt.setString(48, car.getAgree_dist_yn	());
			pstmt.setInt   (49, car.getMin_agree_dist	());
			pstmt.setInt   (50, car.getMax_agree_dist	());
			pstmt.setString(51, car.getChk_id			());
			pstmt.setString(52, car.getCon_day			().trim());
			pstmt.setString(53, car.getCon_etc			());
			pstmt.setInt   (54, car.getOver_bas_km		());
			pstmt.setInt   (55, car.getCust_est_km		());
			pstmt.setString(56, car.getCredit_sac_id	());
			pstmt.setString(57, car.getCredit_sac_dt	());
			pstmt.setString(58, car.getDc_ra_st			());
			pstmt.setString(59, car.getDc_ra_sac_id		());
			pstmt.setString(60, car.getDc_ra_etc		());
			pstmt.setInt   (61, car.getDriver_add_amt	());
			pstmt.setInt   (62, car.getDriver_add_v_amt	());	//운전차추가요금(부가세)추가(2018.03.30)
			pstmt.setString(63, car.getReturn_select	());
			pstmt.setString(64, car.getBr_to());
			pstmt.setString(65, car.getBr_to_st());
			pstmt.setString(66, car.getBr_from());
			pstmt.setString(67, car.getBr_from_st());
			pstmt.setString(68, car.getBc_dlv_yn());
			pstmt.setInt   (69, car.getRtn_run_amt		());
			pstmt.setString(70, car.getRtn_run_amt_yn());
			
		    pstmt.executeUpdate();
			pstmt.close();

			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertFeeEtc]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	public boolean updateFeeEtc(ContCarBean car)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE_ETC set "+
						" sh_car_amt	= ?, "+
						" sh_year		= ?, "+
						" sh_month		= ?, "+
						" sh_day		= ?, "+
						" sh_day_bas_dt	= replace(?, '-', ''), "+
						" sh_amt		= ?, "+
						" sh_ja			= ?, "+
						" sh_km			= ?, "+
						" sh_km_bas_dt	= replace(?, '-', ''), "+
						" cms_not_cau	= ?, "+
						" sh_init_reg_dt= replace(?, '-', ''), "+
						" bus_agnt_id	= ?, "+
						" bus_agnt_per	= ?, "+
						" bus_agnt_r_per= ?, "+
						" cls_n_mon		= ?, "+
						" cls_n_amt		= ?, "+
						" BC_EST_ID		= ?, "+
						" BC_S_A		= ?, "+
						" BC_S_B		= ?, "+
						" BC_S_C		= ?, "+
						" BC_S_D		= ?, "+
						" BC_S_E		= ?, "+
						" BC_S_F		= ?, "+
						" BC_S_G		= ?, "+
						" BC_S_I		= ?, "+
						" BC_B_A		= ?, "+
						" BC_B_B		= ?, "+
						" BC_B_D		= ?, "+
						" BC_B_E1		= ?, "+
						" BC_B_E2		= ?, "+
						" BC_B_K		= ?, "+
						" BC_B_N		= ?, "+
						" BC_B_G		= ?, "+
						" BC_B_U		= ?, "+
						" BC_B_AC		= ?, "+
						" AGREE_DIST	= ?, "+
						" BC_B_G_CONT	= ?, "+
						" BC_B_U_CONT	= ?, "+
						" sh_tot_km		= ?, "+
						" BC_B_AC_CONT	= ?, "+
						" BC_ETC		= ?, "+
						" OVER_RUN_AMT	= ?, "+
						" OVER_RUN_DAY	= ?, "+
						" OVER_SERV_AMT	= ?, "+
						" AGREE_DIST_YN	= ?, "+
						" MIN_AGREE_DIST= ?, "+
						" MAX_AGREE_DIST= ?, "+
						" con_day		= ?, "+
						" con_etc		= ?, "+
						" BC_B_T		= ?, "+
						" OVER_BAS_KM	= ?, "+
						" CUST_EST_KM	= ?, "+
						" credit_sac_id	= ?, "+
						" credit_sac_dt	= replace(?, '-', ''), "+
						" dc_ra_st		= ?, "+
						" dc_ra_sac_id	= ?, "+
						" dc_ra_etc		= ?, "+
						" driver_add_amt= ?, "+
						" driver_add_v_amt= ?, "+ //운전차추가요금(부가세)추가(2018.03.30)
						" return_select= ?,  "+	
						" br_to = ?,  "+	
						" br_to_st = ?,  "+	
						" br_from = ?,  "+
						" br_from_st = ?,  "+
						" bc_dlv_yn = ?,  "+
						" rtn_run_amt = ?,  "+
						" rtn_run_amt_yn = ?  "+

						" where RENT_MNG_ID = ? and RENT_L_CD = ? and rent_st=?";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setInt   (1,  car.getSh_car_amt		());
			pstmt.setString(2,  car.getSh_year			());
			pstmt.setString(3,  car.getSh_month			());
			pstmt.setString(4,  car.getSh_day			());
			pstmt.setString(5,  car.getSh_day_bas_dt	());
			pstmt.setInt   (6,  car.getSh_amt			());
			pstmt.setFloat (7,  car.getSh_ja			());
			pstmt.setInt   (8,  car.getSh_km			());
			pstmt.setString(9,  car.getSh_km_bas_dt		());
			pstmt.setString(10, car.getCms_not_cau		());
			pstmt.setString(11, car.getSh_init_reg_dt	());
			pstmt.setString(12, car.getBus_agnt_id		());
			pstmt.setFloat (13, car.getBus_agnt_per		());
			pstmt.setFloat (14, car.getBus_agnt_r_per	());
			pstmt.setString(15, car.getCls_n_mon		());
			pstmt.setInt   (16, car.getCls_n_amt		());

			pstmt.setString(17, car.getBc_est_id		());			
			pstmt.setInt   (18, car.getBc_s_a			());			
			pstmt.setString(19, car.getBc_s_b			());			
			pstmt.setInt   (20, car.getBc_s_c			());
			pstmt.setFloat (21, car.getBc_s_d			());
			pstmt.setFloat (22, car.getBc_s_e			());
			pstmt.setInt   (23, car.getBc_s_f			());
			pstmt.setInt   (24, car.getBc_s_g			());
			pstmt.setFloat (25, car.getBc_s_i			());

			pstmt.setInt   (26, car.getBc_b_a			());
			pstmt.setInt   (27, car.getBc_b_b			());
			pstmt.setInt   (28, car.getBc_b_d			());
			pstmt.setFloat (29, car.getBc_b_e1			());
			pstmt.setInt   (30, car.getBc_b_e2			());
			pstmt.setInt   (31, car.getBc_b_k			());
			pstmt.setInt   (32, car.getBc_b_n			());
			pstmt.setInt   (33, car.getBc_b_g			());
			pstmt.setInt   (34, car.getBc_b_u			());
			pstmt.setInt   (35, car.getBc_b_ac			());
			pstmt.setInt   (36, car.getAgree_dist		());
			pstmt.setString(37, car.getBc_b_g_cont		());
			pstmt.setString(38, car.getBc_b_u_cont		());
			pstmt.setInt   (39, car.getSh_tot_km		());
			pstmt.setString(40, car.getBc_b_ac_cont		());
			pstmt.setString(41, car.getBc_etc			());
			pstmt.setInt   (42, car.getOver_run_amt		());
			pstmt.setInt   (43, car.getOver_run_day		());
			pstmt.setInt   (44, car.getOver_serv_amt	());
			pstmt.setString(45, car.getAgree_dist_yn	());
			pstmt.setInt   (46, car.getMin_agree_dist	());
			pstmt.setInt   (47, car.getMax_agree_dist	());
			pstmt.setString(48, car.getCon_day			());
			pstmt.setString(49, car.getCon_etc			());
			pstmt.setInt   (50, car.getBc_b_t			());
			pstmt.setInt   (51, car.getOver_bas_km		());
			pstmt.setInt   (52, car.getCust_est_km		());

			pstmt.setString(53, car.getCredit_sac_id	());
			pstmt.setString(54, car.getCredit_sac_dt	());
			pstmt.setString(55, car.getDc_ra_st			());
			pstmt.setString(56, car.getDc_ra_sac_id		());
			pstmt.setString(57, car.getDc_ra_etc		());
			pstmt.setInt   (58, car.getDriver_add_amt	());
			pstmt.setInt   (59, car.getDriver_add_v_amt	());	//운전차추가요금(부가세)추가(2018.03.30)

			pstmt.setString(60, car.getReturn_select	());			
			pstmt.setString(61, car.getBr_to());			
			pstmt.setString(62, car.getBr_to_st());			
			pstmt.setString(63, car.getBr_from());			
			pstmt.setString(64, car.getBr_from_st());			
			pstmt.setString(65, car.getBc_dlv_yn());
			
			pstmt.setInt   (66, car.getRtn_run_amt		());
			pstmt.setString(67, car.getRtn_run_amt_yn());

			pstmt.setString(68, car.getRent_mng_id		());			
			pstmt.setString(69, car.getRent_l_cd		());			
			pstmt.setString(70, car.getRent_st			());			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateFeeEtc]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	
	
	public boolean updateFeeEtcAdd(ContCarBean car)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE_ETC_ADD set "+
						" sh_car_amt	= ?, "+
						" sh_year		= ?, "+
						" sh_month		= ?, "+
						" sh_day		= ?, "+
						" sh_day_bas_dt	= replace(?, '-', ''), "+
						" sh_amt		= ?, "+
						" sh_ja			= ?, "+
						" sh_km			= ?, "+
						" sh_km_bas_dt	= replace(?, '-', ''), "+
						" cms_not_cau	= ?, "+
						" sh_init_reg_dt= replace(?, '-', ''), "+
						" bus_agnt_id	= ?, "+
						" bus_agnt_per	= ?, "+
						" bus_agnt_r_per= ?, "+
						" cls_n_mon		= ?, "+
						" cls_n_amt		= ?, "+
						" BC_EST_ID		= ?, "+
						" BC_S_A		= ?, "+
						" BC_S_B		= ?, "+
						" BC_S_C		= ?, "+
						" BC_S_D		= ?, "+
						" BC_S_E		= ?, "+
						" BC_S_F		= ?, "+
						" BC_S_G		= ?, "+
						" BC_S_I		= ?, "+

						" BC_B_A		= ?, "+
						" BC_B_B		= ?, "+
						" BC_B_D		= ?, "+
						" BC_B_E1		= ?, "+
						" BC_B_E2		= ?, "+
						" BC_B_K		= ?, "+
						" BC_B_N		= ?, "+
						" BC_B_G		= ?, "+
						" BC_B_U		= ?, "+
						" BC_B_AC		= ?, "+
						" AGREE_DIST	= ?, "+
						" BC_B_G_CONT	= ?, "+
						" BC_B_U_CONT	= ?, "+
						" sh_tot_km		= ?, "+
						" BC_B_AC_CONT	= ?, "+
						" BC_ETC		= ?, "+
						" OVER_RUN_AMT	= ?, "+
						" OVER_RUN_DAY	= ?, "+
						" OVER_SERV_AMT	= ?, "+
						" AGREE_DIST_YN	= ?, "+
						" MIN_AGREE_DIST= ?, "+
						" MAX_AGREE_DIST= ?, "+
						" con_day		= ?, "+
						" BC_B_T		= ?, "+
						" driver_add_amt= ?, "+
						" driver_add_v_amt= ?,  "+
						" rtn_run_amt	= ?,  "+
						" rtn_run_amt_yn= ?  "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and rent_st=?";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setInt   (1,  car.getSh_car_amt		());
			pstmt.setString(2,  car.getSh_year			());
			pstmt.setString(3,  car.getSh_month			());
			pstmt.setString(4,  car.getSh_day			());
			pstmt.setString(5,  car.getSh_day_bas_dt	());
			pstmt.setInt   (6,  car.getSh_amt			());
			pstmt.setFloat (7,  car.getSh_ja			());
			pstmt.setInt   (8,  car.getSh_km			());
			pstmt.setString(9,  car.getSh_km_bas_dt		());
			pstmt.setString(10, car.getCms_not_cau		());
			pstmt.setString(11, car.getSh_init_reg_dt	());
			pstmt.setString(12, car.getBus_agnt_id		());
			pstmt.setFloat (13, car.getBus_agnt_per		());
			pstmt.setFloat (14, car.getBus_agnt_r_per	());
			pstmt.setString(15, car.getCls_n_mon		());
			pstmt.setInt   (16, car.getCls_n_amt		());
			pstmt.setString(17, car.getBc_est_id		());			
			pstmt.setInt   (18, car.getBc_s_a			());			
			pstmt.setString(19, car.getBc_s_b			());			
			pstmt.setInt   (20, car.getBc_s_c			());
			pstmt.setFloat (21, car.getBc_s_d			());
			pstmt.setFloat (22, car.getBc_s_e			());
			pstmt.setInt   (23, car.getBc_s_f			());
			pstmt.setInt   (24, car.getBc_s_g			());
			pstmt.setFloat (25, car.getBc_s_i			());
			pstmt.setInt   (26, car.getBc_b_a			());
			pstmt.setInt   (27, car.getBc_b_b			());
			pstmt.setInt   (28, car.getBc_b_d			());
			pstmt.setFloat (29, car.getBc_b_e1			());
			pstmt.setInt   (30, car.getBc_b_e2			());
			pstmt.setInt   (31, car.getBc_b_k			());
			pstmt.setInt   (32, car.getBc_b_n			());
			pstmt.setInt   (33, car.getBc_b_g			());
			pstmt.setInt   (34, car.getBc_b_u			());
			pstmt.setInt   (35, car.getBc_b_ac			());
			pstmt.setInt   (36, car.getAgree_dist		());
			pstmt.setString(37, car.getBc_b_g_cont		());
			pstmt.setString(38, car.getBc_b_u_cont		());
			pstmt.setInt   (39, car.getSh_tot_km		());
			pstmt.setString(40, car.getBc_b_ac_cont		());
			pstmt.setString(41, car.getBc_etc			());
			pstmt.setInt   (42, car.getOver_run_amt		());
			pstmt.setInt   (43, car.getOver_run_day		());
			pstmt.setInt   (44, car.getOver_serv_amt	());
			pstmt.setString(45, car.getAgree_dist_yn	());
			pstmt.setInt   (46, car.getMin_agree_dist	());
			pstmt.setInt   (47, car.getMax_agree_dist	());
			pstmt.setString(48, car.getCon_day			());
			pstmt.setInt   (49, car.getBc_b_t			());
			pstmt.setInt   (50, car.getDriver_add_amt	());
			pstmt.setInt   (51, car.getDriver_add_v_amt	());	//운전차추가요금(부가세)추가(2018.03.30)
			
			pstmt.setInt   (52, car.getRtn_run_amt		());
			pstmt.setString(53, car.getRtn_run_amt_yn	());
			
			pstmt.setString(54, car.getRent_mng_id		());			
			pstmt.setString(55, car.getRent_l_cd		());			
			pstmt.setString(56, car.getRent_st			());			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateFeeEtcAdd]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//고객신용등급판정 조회-고객별 최종평가분
	
	public ContCmsBean getCmsMng(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCmsBean bean = new ContCmsBean();
		String query = "";
		String a_table = "";
		String b_table = "";

		a_table = " select a.*, b.client_id from cms_mng a, cont b where a.rent_l_cd=b.rent_l_cd";

		b_table = " select b.client_id, max(a.reg_dt||a.rent_mng_id) max_cms from cms_mng a, cont b where a.rent_l_cd=b.rent_l_cd and b.client_id=? group by b.client_id";

		query = " select a.* from ("+a_table+") a, ("+b_table+") b where a.client_id=b.client_id and a.reg_dt||a.rent_mng_id=b.max_cms";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, client_id);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				bean.setRent_mng_id(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				bean.setRent_l_cd(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				bean.setSeq(rs.getString("SEQ")==null?"":rs.getString("SEQ"));
				bean.setCms_st(rs.getString("CMS_ST")==null?"":rs.getString("CMS_ST"));
				bean.setCms_amt(rs.getInt("CMS_AMT"));
				bean.setCp_st(rs.getString("CP_ST")==null?"":rs.getString("CP_ST"));
				bean.setCms_start_dt(rs.getString("CMS_START_DT")==null?"":rs.getString("CMS_START_DT"));
				bean.setCms_end_dt(rs.getString("CMS_END_DT")==null?"":rs.getString("CMS_END_DT"));
				bean.setCms_day(rs.getString("CMS_DAY")==null?"":rs.getString("CMS_DAY"));
				bean.setCms_bank(rs.getString("CMS_BANK")==null?"":rs.getString("CMS_BANK"));
				bean.setCms_acc_no(rs.getString("CMS_ACC_NO")==null?"":rs.getString("CMS_ACC_NO"));
				bean.setCms_dep_nm(rs.getString("CMS_DEP_NM")==null?"":rs.getString("CMS_DEP_NM"));
				bean.setCms_dep_ssn(rs.getString("CMS_DEP_SSN")==null?"":rs.getString("CMS_DEP_SSN"));
				bean.setCms_dep_post(rs.getString("CMS_DEP_POST")==null?"":rs.getString("CMS_DEP_POST"));
				bean.setCms_dep_addr(rs.getString("CMS_DEP_ADDR")==null?"":rs.getString("CMS_DEP_ADDR"));
				bean.setCms_etc(rs.getString("CMS_ETC")==null?"":rs.getString("CMS_ETC"));
				bean.setCms_tel(rs.getString("CMS_TEL")==null?"":rs.getString("CMS_TEL"));
				bean.setCms_m_tel(rs.getString("CMS_M_TEL")==null?"":rs.getString("CMS_M_TEL"));
				bean.setCms_email(rs.getString("CMS_EMAIL")==null?"":rs.getString("CMS_EMAIL"));
				bean.setApp_dt(rs.getString("APP_DT")==null?"":rs.getString("APP_DT"));
				bean.setReg_dt(rs.getString("REG_DT")==null?"":rs.getString("REG_DT"));
				bean.setReg_id(rs.getString("REG_ID")==null?"":rs.getString("REG_ID"));
				bean.setUpdate_dt(rs.getString("UPDATE_DT")==null?"":rs.getString("UPDATE_DT"));
				bean.setUpdate_id(rs.getString("UPDATE_ID")==null?"":rs.getString("UPDATE_ID"));
				bean.setReg_st(rs.getString("REG_ST")==null?"":rs.getString("REG_ST"));		
				bean.setCms_bk		(rs.getString("CMS_BK")==null?"":rs.getString("CMS_BK"));
				bean.setBank_cd		(rs.getString("BANK_CD")==null?"":rs.getString("BANK_CD"));
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCmsMng]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bean;
		}
	}

	//영업수당관리 리스트 조회
	public Vector getCommiPayList(String s_kd, String t_wd, String gubun1, String gubun2, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = ""; 

		query = " select  "+
				" a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id,"+
				" a.rent_dt, c.firm_nm, d.car_no, b.rent_start_dt,"+
				" e.gi_st, f.gi_dt, g.pp_amt, g.pay_amt, g.jan_amt,"+
				"h.sup_dt, h.comm_r_rt, h.req_dt, i.user_nm as req_nm, h.emp_id, j.emp_nm, j.file_name1, j.file_name2,"+
				//" h.commi, "
				"        (h.commi + decode(h.add_st1,'1',nvl(h.add_amt1,0),0) + decode(h.add_st2,'1',nvl(h.add_amt2,0),0) + decode(h.add_st3,'1',nvl(h.add_amt3,0),0)  +nvl(h.dlv_con_commi,0) +nvl(h.dlv_tns_commi,0)+nvl(h.agent_commi,0)   ) as commi, "+
				"        (h.inc_amt+h.res_amt+nvl(h.vat_amt,0)) as commi_fee, h.dif_amt,"+				
				" decode(a.use_yn,'Y','진행','N','해지','미결') use_st,"+
				" decode(e.gi_st,'1',decode(f.gi_dt,'','미가입','가입완료'),'면제') gi_st2,"+
				" decode(g.pp_amt,0,'-',decode(g.pay_amt,0,'미입금',decode(g.jan_amt,0,'입금완료','잔액'))) pp_st, l.doc_no"+				
				" from cont a, fee b, client c, car_reg d, car_etc e, gua_ins f,"+
				" (select rent_mng_id, rent_l_cd, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0))-sum(ext_pay_amt) jan_amt from scd_ext where rent_st='1' and ext_st in ('0','1','2') group by rent_mng_id, rent_l_cd) g,"+
				" (select * from commi where agnt_st in ('1','7')) h, users i, car_off_emp j, (select * from doc_settle where doc_st='1') l"+
				" where h.emp_id is not null and a.car_st<>'2' and nvl(a.car_gu,a.reg_id)='1'"+
				" and a.rent_mng_id=b.RENT_MNG_ID and a.rent_l_cd=b.rent_l_cd and b.rent_st='1'"+
				" and a.client_id=c.client_id"+
				" and a.car_mng_id=d.car_mng_id(+)"+
				" and a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd"+
				" and b.rent_mng_id=f.rent_mng_id(+) and b.rent_l_cd=f.rent_l_cd(+) and b.rent_st=f.rent_st(+) "+
				" and a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+)"+
				" and a.rent_mng_id=h.rent_mng_id(+) and a.rent_l_cd=h.rent_l_cd(+)"+
				" and h.req_id=i.user_id(+)"+
				" and h.emp_id=j.emp_id(+)"+// and h.commi >0
				" and a.rent_l_cd=l.doc_id(+)"+
				" and (h.commi + decode(h.add_st1,'1',nvl(h.add_amt1,0),0) + decode(h.add_st2,'1',nvl(h.add_amt2,0),0) + decode(h.add_st3,'1',nvl(h.add_amt3,0),0)  +nvl(h.dlv_con_commi,0) +nvl(h.dlv_tns_commi,0)+nvl(h.agent_commi,0)   )>0 "+
				" ";//


		String what = "";
		String dt1 = "";
		String dt2 = "";

		if(gubun1.equals("Y")){		
			query += " and h.sup_dt is not null";//지급
			dt1 = "substr(h.sup_dt,1,6)";			
			dt2 = "h.sup_dt";
		}else if(gubun1.equals("N")){
			query += " and h.sup_dt is null  and l.doc_step='3'";//미지급
			dt1 = "to_char(l.user_dt1,'YYYYMM')";			
			dt2 = "to_char(l.user_dt1,'YYYYMMDD')";
		}

		if(gubun2.equals("1"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
		else if(gubun2.equals("3"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";
		else if(gubun2.equals("2")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}

		if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";
		if(s_kd.equals("4"))	what = "upper(nvl(i.user_nm, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(j.emp_nm, ' '))";	
		if(s_kd.equals("9"))	what = "upper(nvl(j.emp_id, ' '))";	
		 
			
		if(!what.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";
		}	
		
		query += " order by decode(a.use_yn,'Y','2','N','3','1'), "+dt2+" desc, a.rent_dt, b.rent_start_dt, a.rent_mng_id";

		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCommiPayList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//계약승계시 대여료스케줄 이관처리
	public boolean updateScdFeeCng(String rent_mng_id, String rent_l_cd, String fee_tm, String new_rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		boolean flag = true;
		String query = " update SCD_FEE set "+
						" rent_l_cd	= ? "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and to_number(fee_tm)>=to_number(?)";

		//기발행거래명세서 있으면 미사용 처리
		String query2 = " update TAX_ITEM set "+
						"        use_yn	= 'N' "+
						" where  nvl(use_yn,'Y')='Y' "+
						"        and item_id in ( "+
						"                         select a.item_id "+
			            "                         from   tax_item_list a, tax_item c, tax b "+
						"                         where  a.gubun='1' and a.RENT_L_CD = ? "+
//						"		                         and to_number(a.tm)>=to_number(?) "+
						"		                         and a.tm >= ? "+
						"                                and a.item_id=c.item_id and nvl(c.use_yn,'Y')='Y'"+
						"                                and a.item_id=b.item_id(+) and b.item_id is null "+
						"                        )";

		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1, new_rent_l_cd);
			pstmt.setString(2, rent_mng_id);
			pstmt.setString(3, rent_l_cd);
			pstmt.setString(4, fee_tm.trim());
		    pstmt.executeUpdate();
			pstmt.close();

			pstmt2 = conn.prepareStatement(query2);			
			pstmt2.setString(1, rent_l_cd);
			pstmt2.setString(2, fee_tm.trim());
		    pstmt2.executeUpdate();
			pstmt2.close();


			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateScdFeeCng]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
				if(pstmt2 != null)	pstmt2.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	
	
	//계약승계시 대여료스케줄 이관처리
	public boolean updateScdFeeCng2(String rent_mng_id, String rent_l_cd, String fee_tm, String new_rent_l_cd, String cng_cau)
	{
		getConnection();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		boolean flag = true;
		String query = " update SCD_FEE set "+
						" rent_l_cd	= ?, cng_dt=to_char(sysdate,'YYYYMMDD'), cng_cau=? "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and to_number(fee_tm)>=to_number(?)";

		//기발행거래명세서 있으면 미사용 처리
		String query2 = " update TAX_ITEM set "+
						"        use_yn	= 'N' "+
						" where  nvl(use_yn,'Y')='Y' "+
						"        and item_id in ( "+
						"                         select a.item_id "+
			            "                         from   tax_item_list a, tax_item c, tax b "+
						"                         where  a.gubun='1' and a.RENT_L_CD = ? "+
						"		                         and a.tm >= ? "+
						"                                and a.item_id=c.item_id and nvl(c.use_yn,'Y')='Y'"+
						"                                and a.item_id=b.item_id(+) and b.item_id is null "+
						"                        )";

		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1, new_rent_l_cd);
			pstmt.setString(2, cng_cau);
			pstmt.setString(3, rent_mng_id);
			pstmt.setString(4, rent_l_cd);
			pstmt.setString(5, fee_tm.trim());
		    pstmt.executeUpdate();
			pstmt.close();

			pstmt2 = conn.prepareStatement(query2);			
			pstmt2.setString(1, rent_l_cd);
			pstmt2.setString(2, fee_tm.trim());
		    pstmt2.executeUpdate();
			pstmt2.close();


			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateScdFeeCng2]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
				if(pstmt2 != null)	pstmt2.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}		

	//변경계약의 원계약내용 조회
	public Hashtable getContBeginning(String rent_mng_id, String reg_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select"+
				" a.rent_l_cd, decode(e.rent_st,'1',a.rent_dt,e.rent_dt) rent_dt, b.firm_nm, b.client_nm, b.client_id, b.client_st, c.car_no, c.car_nm, "+
				" decode(d.CLS_DT, '', '', substr(d.CLS_DT, 1, 4) || '-' || substr(d.CLS_DT, 5, 2) || '-'||substr(d.CLS_DT, 7, 2)) CLS_DT,"+
				" decode(d.CLS_ST, '1','계약만료', '2','중도해약', '3','영업소변경', '4','차종변경', '5','계약승계', '6','매각', '7','출고전해지', '8','매입옵션') CLS_ST,"+
				" d.cls_cau, d.r_mon, d.r_day, d.cls_dt as b_cls_dt, b.enp_no, substr(text_decrypt(b.ssn, 'pw'), 1, 6) ssn "+
				" from cont a, client b, car_reg c, cls_cont d, fee e, (select rent_mng_id, rent_l_cd, max(rent_st) rent_st from fee group by rent_mng_id, rent_l_cd) f "+
				" where a.client_id=b.client_id"+
				" and a.car_mng_id=c.car_mng_id(+) "+
				" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd and d.cls_st in ('4','5') "+
				" and d.rent_mng_id='"+rent_mng_id+"' and d.reg_dt='"+reg_dt+"'"+
				" and a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd  "+				
				" and e.rent_mng_id=f.rent_mng_id and e.rent_l_cd=f.rent_l_cd and e.rent_st=f.rent_st  "+
				" order by a.rent_dt, a.reg_dt, a.update_dt";

		try{	
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		}catch (SQLException e){
			System.out.println("[AddContDatabase:getContBeginning]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();			
			return ht;
		}
	}

	//영업수당문서처리관리 리스트 조회
	public Vector getCommiDocList(String s_kd, String t_wd, String gubun1)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  "+
				"        a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, a.bus_id,"+
				"        a.rent_dt, c.firm_nm, d.car_no, b.rent_start_dt,"+
				"        e.gi_st, f.gi_dt, g.pp_amt, g.pay_amt, g.jan_amt,"+
				"        h.commi, h.sup_dt, h.comm_r_rt, h.req_dt, decode(i.dept_id,'0007','부산','0008','대전','') dept_nm, i.user_nm as bus_nm, h.emp_id, j.emp_nm, j.file_name1, j.file_name2,"+
				"        decode(a.use_yn,'Y','진행','N','해지','미결') use_st,"+
				"        decode(e.gi_st,'1',decode(f.gi_dt,'','미가입','가입완료'),'면제') gi_st2,"+
				"        decode(g.pp_amt,0,'-',decode(g.pay_amt,0,'미입금',decode(g.jan_amt,0,'입금완료','잔액'))) pp_st,"+
				"        decode(k.rent_l_cd,'','미생성','생성') scd_yn, nvl(n.scan_cnt,0) scan_cnt, l.*,"+
				"        decode(l.doc_bit,'1','기안','2','결재','3','수신','4','승인','5','처리','대기') bit"+
				" from   cont a, fee b, client c, car_reg d, car_etc e, gua_ins f,"+
				"        (select rent_mng_id, rent_l_cd, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0))-sum(ext_pay_amt) jan_amt from scd_ext where rent_st='1' and ext_st in ('0','1','2') group by rent_mng_id, rent_l_cd) g,"+
				"        (select * from commi where agnt_st='1') h,"+
				"        users i, car_off_emp j,"+
				"        (select rent_mng_id, rent_l_cd from scd_fee group by rent_mng_id, rent_l_cd) k, "+
				"        doc_settle l,"+
				"        (select rent_mng_id, rent_l_cd, count(*) scan_cnt from lc_scan group by rent_mng_id, rent_l_cd) n"+
				" where  a.car_st<>'2' and nvl(a.car_gu,a.reg_id)='1' "+							//nvl(a.use_yn,'Y')='Y' and 
				"        and h.emp_id is not null and h.comm_r_rt>0 "+									//and h.sup_dt is null
				"        and a.rent_mng_id=b.RENT_MNG_ID and a.rent_l_cd=b.rent_l_cd and b.rent_st='1'"+
				"        and a.client_id=c.client_id"+
				"        and a.car_mng_id=d.car_mng_id(+)"+
				"        and a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd"+
				"        and b.rent_mng_id=f.rent_mng_id(+) and b.rent_l_cd=f.rent_l_cd(+) and b.rent_st=f.rent_st(+) "+
				"        and a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+)"+
				"        and a.rent_mng_id=h.rent_mng_id(+) and a.rent_l_cd=h.rent_l_cd(+)"+
				"        and a.rent_mng_id=k.rent_mng_id(+) and a.rent_l_cd=k.rent_l_cd(+)"+
				"        and a.rent_mng_id=n.rent_mng_id(+) and a.rent_l_cd=n.rent_l_cd(+)"+
				"        and h.emp_id=j.emp_id(+)"+
				"        and a.rent_l_cd=l.doc_id(+)"+
				"        and l.user_id1=i.user_id(+)";

		String what = "";

		if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";
		if(s_kd.equals("4"))	what = "upper(nvl(i.user_nm, ' '))";	
			
		if(!what.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";

			if(gubun1.equals("Y"))		query += " and l.user_dt8 is not null";
			else if(gubun1.equals("N"))	query += " and l.user_dt8 is null";

			query += " and a.rent_dt >= '20071101'";


		}else{
			query += " and nvl(a.use_yn,'Y')='Y' and h.sup_dt is null and a.rent_dt >= '20071101'";
		}	
		
		query += " order by decode(a.use_yn,'Y','2','N','3','1'), h.sup_dt desc, a.rent_dt, b.rent_start_dt, a.rent_mng_id";

		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCommiDocList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	/**
	 * 사원별 지급수수료 리스트
	 */
	public Vector getCommis(String emp_id)
	{
		getConnection();
		Vector vt = new Vector();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String query = "";
		query = " select"+
				" a.*, b.dlv_dt, c.firm_nm"+
				" from COMMI a, cont b, client c"+
				" where a.emp_id = '"+emp_id+"' and a.agnt_st<>'2' and a.commi >0"+
				" and a.rent_mng_id = b.rent_mng_id and a.rent_l_cd = b.rent_l_cd"+
		        " and b.client_id=c.client_id"+
				" order by b.dlv_dt desc";
						
		try {
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCommis]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}	

	//계약관리-미검수현황
	public Vector getContNoChkList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  \n"+
					" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, a.use_yn, \n"+
					" b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					" j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					" nvl(ec.nm, ec2.nm) car_ext, \n"+
					" decode(m.rent_st,'1','','연장') ext_st, \n"+
					" decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					" decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					" decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					" decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					" decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					" decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,  \n"+
					" decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
					" d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt, \n"+
					" a.brch_id, c.mng_br_id, nvl(d.ext_agnt,a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,o.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					" k.user_nm as bus_nm, n.user_nm bus_nm2, a.mng_id, a.mng_id2, a.bus_id3, l.user_nm as chk_nm,"+
					" a.sanction_id, s.user_nm as sanction_nm, \n"+
					" decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st,"+
				    " decode(o.chk_id,'','미점검','점검') chk_st, c.rent_suc_dt "+
					" from \n"+
					"		cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, \n"+
					"		car_etc h, car_nm i, car_mng j, users k, users n, users s, \n"+
					"		(select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"			from fee group by rent_mng_id, rent_l_cd) m, \n"+
					"       (select * from cls_cont where cls_st in ('4','5')) y, fee_etc o, users l,\n"+
					"       (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 \n"+
					"  where \n"+
					"  a.use_yn='Y' \n"+
					"  and a.client_id=b.client_id \n"+
					"  and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"  and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"  and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"  and a.car_mng_id=f.car_mng_id(+) \n"+
					"  and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd \n"+
					"  and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"  and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"  and nvl(d.ext_agnt,a.bus_id)=k.user_id \n"+
					"  and a.bus_id2=n.user_id(+) \n"+
					"  and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"  and a.sanction_id=s.user_id(+) \n"+
					"  and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"  and d.rent_mng_id=o.rent_mng_id(+) and d.rent_l_cd=o.rent_l_cd(+) and d.rent_st=o.rent_st(+) \n"+
					"  and o.chk_id=l.user_id(+) \n"+
					"  and to_char(o.reg_dt,'YYYYMMDD')>='20101231' "+
					"  and b.client_id<>'000228' "+
			        "  and case when d.rent_st > '1' and y.cls_st is null then 'N' when d.rent_st > '1' and sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')) in (1,0) then 'N' else 'Y' end = 'Y' "+
			        "  and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)   "+
					" ";

	
			//계약상태
			if(gubun1.equals("Y")) query += " and a.use_yn='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("1")) query += " and y.cls_st is null and d.rent_st='1'";
			if(gubun1.equals("2")) query += " and d.rent_st<>'1' and (y.cls_st is null or decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장',''))='연장') ";
			if(gubun1.equals("3")) query += " and nvl(y.cls_st,'0')<>'0' and decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) is null";

			//검수여부
			if(gubun3.equals("1")) query += " and o.chk_dt is null ";
			if(gubun3.equals("2")) query += " and o.chk_dt is not null ";

			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(f.car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(f.car_doc_no, ' '))";	
			if(s_kd.equals("5"))	what = "upper(nvl(f.car_num, ' '))";	
			if(s_kd.equals("6"))	what = "upper(nvl(g.rpt_no, ' '))";		
			if(s_kd.equals("7"))	what = "upper(nvl(r.nm, ' '))";	
			if(s_kd.equals("8"))	what = "upper(nvl(k.user_nm, ' '))";	
			if(s_kd.equals("10"))	what = "upper(nvl(n.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(b.client_nm, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(nvl(d.rent_dt,a.rent_dt), ' '))";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14"))		t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
				query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc";
			}else{
				if(s_kd.equals("10")){
					query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt";
				}else{
					query += " order by a.use_yn desc, decode(d.rent_st,'1',1,2) desc, a.car_gu, a.rent_st desc, nvl(d.rent_dt,a.rent_dt)";
				}
			}



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContNoChkList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리-계약변경미확인현황
	public Vector getContNoCngChkList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  \n"+
					" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, a.use_yn, \n"+
					" b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					" j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					" nvl(ec.nm, ec2.nm) car_ext, \n"+
					" decode(m.rent_st,'1','','연장') ext_st, \n"+
					" decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					" decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					" decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					" decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					" decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
					" decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					" decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
					" d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt, \n"+
					" a.brch_id, c.mng_br_id, nvl(d.ext_agnt,a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,o.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					" k.user_nm as bus_nm, n.user_nm bus_nm2, a.mng_id, a.mng_id2, a.bus_id3, decode(o.cng_chk_dt,'','',l.user_nm) as chk_nm,"+
					" a.sanction_id, s.user_nm as sanction_nm, a.sanction, to_char(a.sanction_date,'YYYYMMDD') sanction_date, to_char(o.reg_dt,'YYYYMMDD') cng_reg_dt, o.cng_chk_dt, \n"+
					" decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st,"+
				    " decode(o.cng_chk_dt,'','미점검','점검') chk_st"+
					" from \n"+
					"		fee_etc o, fee d, cont a, client b, cont_etc c, client_site e, car_reg f, car_pur g, \n"+
					"		car_etc h, car_nm i, car_mng j, users k, users n, users s, \n"+
					"		(select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"			from fee group by rent_mng_id, rent_l_cd) m, \n"+
					"       (select * from cls_cont where cls_st in ('4','5')) y, users l,\n"+
					"       (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2\n"+
					"  where \n"+
					"  nvl(o.cng_chk_id,'-')<>'-' "+
					"  and to_char(o.reg_dt,'YYYYMMDD')>='20100422' "+
					"  and o.rent_mng_id=d.rent_mng_id and o.rent_l_cd=d.rent_l_cd and o.rent_st=d.rent_st \n"+
					"  and o.rent_mng_id=a.rent_mng_id and o.rent_l_cd=a.rent_l_cd \n"+
					"  and nvl(a.use_yn,'Y')<>'N' and a.car_st in ('1','3') "+
					"  and a.client_id=b.client_id \n"+
					"  and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"  and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"  and a.car_mng_id=f.car_mng_id(+) \n"+
					"  and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd \n"+
					"  and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"  and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"  and nvl(d.ext_agnt,a.bus_id)=k.user_id  \n"+
					"  and a.bus_id2=n.user_id(+) \n"+
					"  and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"  and a.sanction_id=s.user_id(+) \n"+
					"  and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"  and o.cng_chk_id=l.user_id(+) \n"+
					"  and b.client_id<>'000228' "+
					"  and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)  "+
					" ";

	
			//계약상태
			if(gubun1.equals("Y")) query += " and a.use_yn='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";

			//검수여부
			if(gubun3.equals("1")) query += " and o.cng_chk_dt is null";
			if(gubun3.equals("2")) query += " and nvl(o.cng_chk_dt,'-')<>'-'";

			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(f.car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(f.car_doc_no, ' '))";	
			if(s_kd.equals("5"))	what = "upper(nvl(f.car_num, ' '))";	
			if(s_kd.equals("6"))	what = "upper(nvl(g.rpt_no, ' '))";		
			if(s_kd.equals("7"))	what = "upper(nvl(r.nm, ' '))";	
			if(s_kd.equals("8"))	what = "upper(nvl(k.user_nm, ' '))";	
			if(s_kd.equals("10"))	what = "upper(nvl(n.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(b.client_nm, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(nvl(d.rent_dt,a.rent_dt), ' '))";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14"))		t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
				query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc";
			}else{
				if(s_kd.equals("10")){ //영업담당자
					query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt";
				}else{
					query += " order by a.use_yn desc, a.SANCTION_DATE desc, a.sanction desc, o.reg_dt desc, decode(d.rent_st,'1',1,2) desc, nvl(a.car_gu,a.reg_id), a.rent_st desc, nvl(d.rent_dt,a.rent_dt)";
				}
			}



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContNoCngChkList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약수정 : 검수처리
	public boolean updateFeeEtcCheck(String m_id, String l_cd, String rent_st, String user_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update fee_etc set chk_id=?, chk_dt=sysdate where rent_mng_id=? and rent_l_cd=? and rent_st=?";


		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, user_id);
			pstmt.setString(2, m_id);
			pstmt.setString(3, l_cd);
			pstmt.setString(4, rent_st);
			pstmt.executeUpdate();
		   	 pstmt.close();			
		        conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateFeeEtcCheck]\n"+e);
			e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 변경계약확인
	public boolean updateFeeEtcCngCheck(String m_id, String l_cd, String rent_st, String user_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update fee_etc set cng_chk_id=?, cng_chk_dt=sysdate where rent_mng_id=? and rent_l_cd=? and rent_st=?";


		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, user_id);
			pstmt.setString(2, m_id);
			pstmt.setString(3, l_cd);
			pstmt.setString(4, rent_st);
			pstmt.executeUpdate();
		    pstmt.close();

		    conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateFeeEtcCngCheck]\n"+e);
			e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약수정 : 변경계약확인
	public boolean updateFeeEtcCngCheckInit(String m_id, String l_cd, String rent_st, String user_id, String cng_chk_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update fee_etc set cng_chk_id=?, cng_chk_st=? where rent_mng_id=? and rent_l_cd=? and rent_st=?";


		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, user_id);
			pstmt.setString(2, cng_chk_st);
			pstmt.setString(3, m_id);
			pstmt.setString(4, l_cd);
			pstmt.setString(5, rent_st);
			pstmt.executeUpdate();
		    pstmt.close();

		    conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateFeeEtcCngCheckInit]\n"+e);
			e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//선수금 입금내역
	public Hashtable getScdExtPay(String rent_mng_id, String rent_l_cd, String rent_st, String ext_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select"+
				" count(*) cnt, min(ext_pay_dt) min_pay_dt, max(ext_pay_dt) max_pay_dt, sum(ext_pay_amt) pay_amt"+
				" from scd_ext"+
				" where rent_mng_id=? and rent_l_cd=? and rent_st=? and ext_st=? and ext_pay_dt is not null";
			

		try{	
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, rent_st);
			pstmt.setString(4, ext_st);

		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		}catch (SQLException e){
			System.out.println("[AddContDatabase:getScdExtPay]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();			
			return ht;
		}
	}

	//선수금 입금내역
	public Hashtable getScdExtEtcPay(String rent_mng_id, String rent_l_cd, String ext_st, String ext_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select"+
				" count(*) cnt, min(ext_pay_dt) min_pay_dt, max(ext_pay_dt) max_pay_dt, sum(ext_pay_amt) pay_amt"+
				" from scd_ext"+
				" where rent_mng_id=? and rent_l_cd=? and ext_st=? and ext_id=? and ext_pay_dt is not null";
			
		try{	
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, ext_st);
			pstmt.setString(4, ext_id);

		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
		}catch (SQLException e){
			System.out.println("[AddContDatabase:getScdExtPay]\n"+e);
	  		e.printStackTrace();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();			
			return ht;
		}
	}


	//계약현황판 리스트 조회
	public Vector getRentBoardList(String s_kd, String t_wd, String gubun1, String gubun2, String st_dt, String end_dt, String sort, String asc)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select "+
				" decode(a.car_st,'1','렌트','3','리스','2','예비','5','업무대여') car_st,\n"+
				" nvl(ec.nm, ec2.nm) car_ext,\n"+
				" decode(d.udt_st,'1','본사','2','부산지점','3','대전지점','4','고객','5','대구지점','6','광주지점','') udt_st, \n"+
				" nvl(c.car_no,d.est_car_no) car_no, \n"+		
				" a.DRIVING_AGE, DECODE(s.INSUR_PER,'1','아마존카','2','고객') AS insur_per, DECODE(s.INSURANT,'1','아마존카','2','고객') AS insurant, a.GCP_KD, a.BACDT_KD, \n"+
				" (f.CAR_CS_AMT + f.CAR_CV_AMT + f.OPT_CS_AMT +f.OPT_CV_AMT + f.CLR_CS_AMT + f.CLR_CV_AMT-f.tax_dc_s_amt-f.tax_dc_v_amt) tot_amt, \n"+
				" a.rent_mng_id, a.rent_l_cd, a.use_yn, a.client_id, NVL(e.ENP_NO, TEXT_DECRYPT(e.ssn, 'pw' ) ) ssn, a.car_mng_id, a.rent_dt, a.bus_id, c.taking_p, \n"+
				" nvl(c.car_num,d.car_num) car_num, e.firm_nm, h.car_nm, g.car_name, f.colo, f.sun_per, \n"+
				" nvl(d.dlv_brch,l.car_off_nm) dlv_brch, d.rpt_no, d.dlv_ext, substr(d.dlv_est_dt,1,8) dlv_est_dt, a.dlv_dt, d.udt_est_dt, d.udt_dt, d.pur_pay_dt, \n"+
				" m.pp_amt, m.pay_amt, m.jan_amt, \n"+
				" decode(m.pp_amt,0,'면제',decode(m.jan_amt,0,'완납','잔액')) pp_st,\n"+
				" decode(f.gi_st,'1',decode(n.gi_dt,'','미가입','가입완료'),'면제') gi_st,\n"+
				" decode(o.car_mng_id,'','미가입','가입') ins_st, \n"+
				" decode(b.rent_way,'1','일반식','기본식') rent_way,\n"+
				" (f.car_fs_amt+f.car_fv_amt+f.sd_cs_amt+f.sd_cv_amt-f.dc_cs_amt-f.dc_cv_amt) car_amt,\n"+
				" decode(b.rent_start_dt,'',decode(c.init_reg_dt,'',decode(a.dlv_dt,'','출고예정','등록예정'),'납품예정'),decode(c.init_reg_dt,'',decode(a.dlv_dt,'','출고예정','등록예정'),'납품완료')) rent_st,\n"+
				" substr(f.reg_est_dt,1,8) reg_est_dt, c.init_reg_dt, \n"+
				" substr(b.rent_est_dt,1,8) rent_est_dt, b.rent_start_dt, d.rent_ext, p.off_nm, \n"+
				" i.user_nm as bus_nm, j.user_nm as bus_nm2, k.user_nm as mng_nm, v.br_nm, \n"+
				" decode(b.rent_start_dt,'',decode(c.init_reg_dt,'',decode(a.dlv_dt,'','4','3'),'2'),'1') sort1, substr(d.dlv_est_dt,1,8) sort2, a.rent_dt sort3, \n"+
				" l.car_off_tel, nvl(s.car_deli_dt,b.rent_start_dt) as car_deli_dt, s.car_deli_est_dt, \n"+
				" decode(d.acq_cng_yn,'Y','있음','N','없음') acq_cng_yn, d.cpt_cd, c.acq_amt, \n"+
				" decode(q.doc_id,'','',to_char(q.user_dt2,'YYYYMMDD')) doc_user_dt2, \n"+

		//		" u.imgfile5, u.imgfile2, "+

				" substr(r.sup_est_dt,1,8) sup_est_dt, \n"+
				" r.tint_no, decode(decode(r.blackbox_yn,'',s.blackbox_yn,r.blackbox_yn),'Y','장착','배송(광주)','4','배송(대전)','') blackbox_yn_nm, \n"+
				" r.blackbox_img, r.blackbox_img2,  \n"+
				" s.arrival_dt,\n"+
				// s.arrival_dt | 2017.11.30 | 납품준비상황 도착시간 추가

				" substr(r2.sup_est_dt,1,8) sup_est_dt2,\n"+
				" r2.tint_no as tint_no2, r2.s1_yn, r2.s2_yn, r2.b_yn, r2.n_yn, r2.e_yn, r2.b_com_nm, r2.b_model_nm, r2.b_serial_no,  \n"+

                // h2 사진 안가져온다. 20180226
			//	"       '' attach_file_type1, '' attach_file_seq1, "+
			//	"       '' attach_file_type2, '' attach_file_seq2, "+
			//	"       '' file_reg_dt, "+

                " z.emp_nm as agent_emp_nm, z.emp_m_tel as agent_emp_m_tel, \n"+
                
				" i.br_id as br_id, nvl2(c.init_reg_dt,'ud','id') as reg_gubun, e.client_nm as client_nm, f.imm_amt as imm_amt, \n"+

				// 납품준비상황에 자동차등록 연결작업 2017. 11. 28
				" g.car_id, g.car_seq, v2.jg_g_16, v2.jg_g_17, v2.jg_g_7, cp.to_est_dt,  substr(cp.to_est_dt,9,2) as to_est_dt_h, \n"+	//저공해스티커발급대상여부, 승차정원, 전기차구분
				" g.car_comp_id,  \n"+	//테스라 블랙박스 내장형
				
				//" v4.nm as cpt_nm, "+
				" w.cpt_nm, \n"+
				" s.hook_yn, \n"+
				" f.new_license_plate \n"+
				
				" from cont a, fee b, car_reg c, car_pur d, client e, car_etc f, car_nm g, car_mng h, users i, users j, users k, gua_ins n, branch v, \n"+

				"	   tint r, \n"+

				"       (SELECT rent_mng_id, rent_l_cd, min(tint_no) tint_no,  \n"+
				"               MIN(DECODE(tint_st,'1',DECODE(tint_yn,'Y','Y'))) s1_yn, \n"+
				"               MIN(DECODE(tint_st,'2',DECODE(tint_yn,'Y','Y'))) s2_yn, \n"+
				"               MIN(DECODE(tint_st,'3',DECODE(tint_yn,'Y','Y'))) b_yn, \n"+
				"               MIN(DECODE(tint_st,'4',DECODE(tint_yn,'Y','Y'))) n_yn, \n"+
				"               MIN(DECODE(tint_st,'5',DECODE(tint_yn,'Y','Y'))) e_yn, \n"+
				"               sum(DECODE(tint_st,'1',nvl(tint_amt,0))) s1_amt, \n"+
				"               sum(DECODE(tint_st,'2',nvl(tint_amt,0))) s2_amt, \n"+
				"               sum(DECODE(tint_st,'3',nvl(tint_amt,0))) b_amt, \n"+
				"               sum(DECODE(tint_st,'4',nvl(tint_amt,0))) n_amt, \n"+
				"               sum(DECODE(tint_st,'5',nvl(tint_amt,0))) e_amt,  \n"+
				"               sum(nvl(tint_amt,0)) tot_amt, \n"+
				"               MIN(DECODE(tint_st,'3',com_nm)) b_com_nm, \n"+
				"               MIN(DECODE(tint_st,'3',model_nm)) b_model_nm, \n"+
				"               MIN(DECODE(tint_st,'3',serial_no)) b_serial_no, \n"+
				"               min(sup_est_dt) sup_est_dt, min(sup_dt) sup_dt, MIN(reg_dt) reg_dt, MIN(conf_dt) conf_dt, MIN(req_dt) req_dt, MIN(reg_id) reg_id, \n"+
				"               SUM(tint_su) tint_su \n"+
				"        FROM   CAR_TINT \n"+
                "        where  rent_l_cd is not null \n"+
				"        GROUP BY rent_mng_id, rent_l_cd  \n"+
				"	    ) r2, \n"+


				"	   cont_etc s, \n"+
				"	   esti_jg_var v2,\n"+
				//"      allot w,  apprsl u, "+
				"      (SELECT b.rent_mng_id, b.rent_l_cd, c.nm AS cpt_nm FROM fine_doc a, fine_doc_list b, code c WHERE  a.doc_id LIKE '총무%' AND a.doc_id=b.doc_id AND a.gov_id=c.code AND c.c_st='0003') w, \n"+		
				"	   (select sh_code, max(seq) seq FROM esti_jg_var GROUP BY sh_code) v3,"+
				"      (select a.*, c.car_off_nm, c.car_off_tel from commi a, car_off_emp b, car_off c where a.agnt_st='2' and a.emp_id=b.emp_id and b.car_off_id=c.car_off_id) l,\n"+
				"      (select rent_mng_id, rent_l_cd, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0))-sum(ext_pay_amt) jan_amt from scd_ext where rent_st='1' and ext_st in ('0','1','2') group by rent_mng_id, rent_l_cd) m,\n"+
				"      (select car_mng_id from insur where to_char(sysdate,'YYYYMMDD') between ins_start_dt and ins_exp_dt group by car_mng_id) o,\n"+
				"      (select rent_mng_id, rent_l_cd, min(off_nm) off_nm from consignment where cons_cau='1' group by rent_mng_id, rent_l_cd) p,\n"+
				"      (select * from cls_cont where cls_st in ('4','5') and rent_l_cd not in ('D114HHGR00233')) t, \n"+
				"      (select * from doc_settle where doc_st='5' and doc_step='3') q, \n"+
                "       (select code, nm from code where c_st='0001' and code<>'0000') v, \n"+
				//"       (select code, nm from code where c_st='0003' and code<>'0000') v4, "+
                "       car_off_emp z, \n"+
                "       (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2, \n"+
                "		(select rent_mng_id, rent_l_cd, MIN(to_est_dt) to_est_dt from CONS_PUR  group by rent_mng_id, rent_l_cd) cp \n"+
				" where \n"+
				" nvl(a.use_yn,'Y')='Y' and decode(a.rent_l_cd,'S114KK5S00001','1',a.car_st)<>'2' and a.car_gu='1' and d.dlv_est_dt is not null \n"+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1' \n"+
				" and a.car_mng_id=c.car_mng_id(+) \n"+
				" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
				" and a.rent_mng_id=cp.rent_mng_id(+) AND a.rent_l_cd=cp.rent_l_cd(+) \n"+
				" and a.client_id=e.client_id \n"+
				" and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd \n"+
				" and f.car_id=g.car_id and f.car_seq=g.car_seq and g.car_comp_id=h.car_comp_id and g.car_cd=h.code \n"+
				" and a.bus_id=i.user_id(+) and i.br_id=v.br_id(+) \n"+
				" and a.bus_id2=j.user_id(+) \n"+
				" and a.mng_id=k.user_id(+) \n"+
				" and a.rent_mng_id=l.rent_mng_id(+) and a.rent_l_cd=l.rent_l_cd(+) \n"+
				" and a.rent_mng_id=m.rent_mng_id(+) and a.rent_l_cd=m.rent_l_cd(+) \n"+
				" and b.rent_mng_id=n.rent_mng_id(+) and b.rent_l_cd=n.rent_l_cd(+) and b.rent_st=n.rent_st(+) \n"+
				" and a.car_mng_id=o.car_mng_id(+) \n"+
				" and a.rent_mng_id=p.rent_mng_id(+) and a.rent_l_cd=p.rent_l_cd(+) \n"+
				" and a.rent_mng_id=w.rent_mng_id(+) and a.rent_l_cd=w.rent_l_cd(+) \n"+		

				" and a.rent_mng_id=r.rent_mng_id(+) and a.rent_l_cd=r.rent_l_cd(+) and nvl(r.tint_cau,'1')='1' \n"+
				" and a.rent_mng_id=r2.rent_mng_id(+) and a.rent_l_cd=r2.rent_l_cd(+) \n"+

				" and a.rent_mng_id=s.rent_mng_id(+) and a.rent_l_cd=s.rent_l_cd(+) \n"+
				" and d.req_code=q.doc_id(+) \n"+
				" and a.rent_mng_id=t.rent_mng_id(+) and a.reg_dt=t.reg_dt(+) and t.rent_l_cd is null \n"+
//				" and a.car_mng_id=u.car_mng_id(+)"+
//				" and r2.tint_no=h2.tint_no(+) "+
				" and g.car_comp_id =v.code \n"+
				//" and w.cpt_cd =v4.code(+) "+
				" and a.agent_emp_id =z.emp_id(+) \n"+
				" and g.jg_code=v2.sh_code and v2.sh_code=v3.sh_code and v2.seq=v3.seq \n"+
				" and c.car_ext = ec.nm_cd(+) and f.car_ext = ec2.nm_cd(+) \n"+
				" ";

		if(!gubun1.equals("4"))	query += " and nvl( b.rent_start_dt ,'99999999') >= to_char(sysdate,'YYYYMMDD') ";
		
		String what = "";
		String dt1 = "";
		String dt2 = "";

		if(s_kd.equals("1"))	what = "upper(nvl(e.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "a.rent_l_cd";	
		if(s_kd.equals("3"))	what = "nvl(c.car_no,d.est_car_no)";
		if(s_kd.equals("4"))	what = "i.user_nm";	
		if(s_kd.equals("5"))	what = "upper(nvl(i.br_id||v.br_nm, ' '))";	
		if(s_kd.equals("6"))	what = "nvl(c.car_ext,f.car_ext)||nvl(ec.nm, ec2.nm)";	
		if(s_kd.equals("7"))	what = "decode(d.udt_st,'1','본사','2','부산지점','3','대전지점','4','고객','5','대구지점','6','광주지점','')";	
		if(s_kd.equals("8"))	what = "v.nm";	
		if(s_kd.equals("9"))	what = "nvl(d.dlv_brch,l.car_off_nm)";	
		if(s_kd.equals("10"))	what = "SUBSTR( f.reg_est_dt, 1, 8 )";	
		if(s_kd.equals("11"))	what = "h.car_nm";
		
			
		if(!what.equals("") && !t_wd.equals("")){
			if(s_kd.equals("4") && t_wd.equals("에이전트")) {
				query += " and i.dept_id='1000' ";
			}else if(s_kd.equals("1") || s_kd.equals("5")) {
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}else if(s_kd.equals("10")){
				query += " and "+what+" like replace('"+t_wd+"','-','') ";
			}else {
				query += " and "+what+" like '%"+t_wd+"%' ";
			}
		}	

		if(gubun1.equals("1")){//출고예정
			query += " and a.dlv_dt is null and c.init_reg_dt is null";
			dt1		= "substr(d.dlv_est_dt,1,6)";
			dt2		= "d.dlv_est_dt";
		}else if(gubun1.equals("2")){//등록예정
			query += " and a.dlv_dt is not null and c.init_reg_dt is null";
			dt1		= "substr(f.reg_est_dt,1,6)";
			dt2		= "f.reg_est_dt";
		}else if(gubun1.equals("3")){//납품예정
			query += " and c.init_reg_dt is not null";
			dt1		= "substr(b.rent_est_dt,1,6)";
			dt2		= "b.rent_est_dt";
		}else if(gubun1.equals("5")){//신차등록예정
			dt1		= "substr(f.reg_est_dt,1,6)";
			dt2		= "f.reg_est_dt";
		}else{
			dt1		= "substr(a.rent_dt,1,6)";			
			dt2		= "a.rent_dt";				
		}

		if(gubun2.equals("1"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
		else if(gubun2.equals("3"))		query += " and "+dt2+" like to_char(sysdate,'YYYYMMDD')||'%'";
		else if(gubun2.equals("4"))		query += " and "+dt2+" like to_char(sysdate+1,'YYYYMMDD')||'%'";
		else if(gubun2.equals("2")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}

		if(sort.equals("")) {	
			if(gubun1.equals("1"))			query += " order by decode(nvl(c.car_ext,f.car_ext), '1','1', '2','2', '3','5', '4','6', '5','7', '6','2', '7','3', '8','4', '9','9', '10','10'), d.udt_est_dt, d.udt_st, d.dlv_est_dt, decode(d.rpt_no,'',1,0), a.rent_dt, e.firm_nm, a.car_st, h.car_nm";
			else if(gubun1.equals("2") || gubun1.equals("5"))		query += " order by decode(nvl(c.car_ext,f.car_ext), '1','1', '2','2', '3','5', '4','6', '5','7', '6','2', '7','3', '8','4', '9','9', '10','10'), d.udt_est_dt, d.udt_st, f.reg_est_dt, a.rent_dt, e.firm_nm, a.car_st, h.car_nm";
			else if(gubun1.equals("3"))		query += " order by b.rent_est_dt, a.rent_dt, e.firm_nm, a.car_st, h.car_nm";
			else							query += " order by decode(c.init_reg_dt,'',0,1), decode(nvl(c.car_ext,f.car_ext),'1','1', '2','2', '3','5', '4','6', '5','7', '6','2', '7','3', '8','4', '9','9', '10','10'), d.udt_est_dt, d.udt_st, f.reg_est_dt, decode(b.rent_start_dt,'',decode(c.init_reg_dt,'',decode(a.dlv_dt,'','4','3'),'5'),'6'), substr(d.dlv_est_dt,1,8), nvl(c.car_no,d.est_car_no), a.rent_dt, e.firm_nm, a.car_st, h.car_nm";
		//용도
		}else if(sort.equals("1")) {
			query += " order by 1";
		//등록지	
		}else if(sort.equals("2")) {
			query += " order by 2";
		//인수지	
		}else if(sort.equals("3")) {
			query += " order by 3";
		//차량번호	
		}else if(sort.equals("4")) {
			query += " order by 4";
		}
		
		if(!sort.equals("") && asc.equals("1")) {
			query += " desc";
		}		
		
		try {
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentBoardList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//계약현황판 리스트 조회
	public Vector getRentBoardInsList(String s_kd, String t_wd, String gubun1, String gubun2, String st_dt, String end_dt, String mod_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select c.taking_p, a.DRIVING_AGE, DECODE(s.INSUR_PER,'1','아마존카','2','고객') AS insur_per, DECODE(s.INSURANT,'1','아마존카','2','고객') AS insurant, a.GCP_KD, a.BACDT_KD, "+
				" (f.CAR_CS_AMT + f.CAR_CV_AMT + f.OPT_CS_AMT +f.OPT_CV_AMT + f.CLR_CS_AMT + f.CLR_CV_AMT-f.tax_dc_s_amt-f.tax_dc_v_amt) tot_amt,"+
				" a.rent_mng_id, a.rent_l_cd, a.use_yn, a.client_id, NVL(e.ENP_NO, TEXT_DECRYPT(e.ssn, 'pw' ) ) ssn, a.car_mng_id, a.rent_dt, a.bus_id, "+
				" nvl(c.car_no,d.est_car_no) car_no, nvl(c.car_num,d.car_num) car_num, e.firm_nm, h.car_nm, g.car_name, f.colo, f.sun_per,"+
				" nvl(d.dlv_brch,l.car_off_nm) dlv_brch, d.rpt_no, d.dlv_ext, substr(d.dlv_est_dt,1,8) dlv_est_dt, a.dlv_dt, d.udt_est_dt, d.udt_dt, d.pur_pay_dt,"+
				" decode(d.udt_st,'1','본사','2','부산지점','3','대전지점','4','고객','5','대구지점','6','광주지점','') udt_st,"+
				" m.pp_amt, m.pay_amt, m.jan_amt,"+
				" decode(m.pp_amt,0,'면제',decode(m.jan_amt,0,'완납','잔액')) pp_st,"+
				" decode(f.gi_st,'1',decode(n.gi_dt,'','미가입','가입완료'),'면제') gi_st,"+
				" decode(o.car_mng_id,'','미가입','가입') ins_st,"+
				" decode(a.car_st,'1','렌트','3','리스','2','예비','5','업무대여') car_st,"+
				" decode(b.rent_way,'1','일반식','기본식') rent_way,"+
				" (f.car_fs_amt+f.car_fv_amt+f.sd_cs_amt+f.sd_cv_amt-f.dc_cs_amt-f.dc_cv_amt) car_amt,"+
				" decode(b.rent_start_dt,'',decode(c.init_reg_dt,'',decode(a.dlv_dt,'','출고예정','등록예정'),'납품예정'),decode(c.init_reg_dt,'',decode(a.dlv_dt,'','출고예정','등록예정'),'납품완료')) rent_st,"+
				" nvl(ec.nm, ec2.nm) car_ext,"+
				" substr(f.reg_est_dt,1,8) reg_est_dt, c.init_reg_dt,"+
				" substr(b.rent_est_dt,1,8) rent_est_dt, b.rent_start_dt, d.rent_ext, p.off_nm,"+
				" i.user_nm as bus_nm, j.user_nm as bus_nm2, k.user_nm as mng_nm, q.br_nm, "+
				" decode(b.rent_start_dt,'',decode(c.init_reg_dt,'',decode(a.dlv_dt,'','4','3'),'2'),'1') sort1, substr(d.dlv_est_dt,1,8) sort2, a.rent_dt sort3, "+
				" l.car_off_tel, nvl(s.car_deli_dt,b.rent_start_dt) as car_deli_dt, s.car_deli_est_dt, "+
				" decode(d.acq_cng_yn,'Y','있음','N','없음') acq_cng_yn, d.cpt_cd, c.acq_amt, "+
				" decode(q.doc_id,'','',to_char(q.user_dt2,'YYYYMMDD')) doc_user_dt2, "+

				" u.imgfile5, u.imgfile2, "+

				" substr(r.sup_est_dt,1,8) sup_est_dt, "+
				" r.tint_no, decode(decode(r.blackbox_yn,'',s.blackbox_yn,r.blackbox_yn),'Y','장착','배송(광주)','4','배송(대전)','') blackbox_yn_nm, "+
				" r.blackbox_img, r.blackbox_img2,  "+

				" substr(r2.sup_est_dt,1,8) sup_est_dt2, "+
				" r2.tint_no as tint_no2, r2.s1_yn, r2.s2_yn, r2.b_yn, r2.n_yn, r2.e_yn, r2.b_com_nm, r2.b_model_nm, r2.b_serial_no,  "+

				"       h2.attach_file_type1, h2.attach_file_seq1, "+
				"       h2.attach_file_type2, h2.attach_file_seq2, "+
				"       h2.file_reg_dt, mod(ROWNUM,"+mod_st+") mod_st, "+

				"       decode(s.com_emp_yn,'Y','가입','N','미가입','') com_emp_yn "+


				" from cont a, fee b, car_reg c, car_pur d, client e, car_etc f, car_nm g, car_mng h, users i, users j, users k, gua_ins n, branch q, "+

				"	   tint r, "+

				"       (SELECT rent_mng_id, rent_l_cd, min(tint_no) tint_no,  "+
				"               MIN(DECODE(tint_st,'1',DECODE(tint_yn,'Y','Y'))) s1_yn, "+
				"               MIN(DECODE(tint_st,'2',DECODE(tint_yn,'Y','Y'))) s2_yn, "+
				"               MIN(DECODE(tint_st,'3',DECODE(tint_yn,'Y','Y'))) b_yn, "+
				"               MIN(DECODE(tint_st,'4',DECODE(tint_yn,'Y','Y'))) n_yn, "+
				"               MIN(DECODE(tint_st,'5',DECODE(tint_yn,'Y','Y'))) e_yn,  "+
				"               sum(DECODE(tint_st,'1',nvl(tint_amt,0))) s1_amt, "+
				"               sum(DECODE(tint_st,'2',nvl(tint_amt,0))) s2_amt, "+
				"               sum(DECODE(tint_st,'3',nvl(tint_amt,0))) b_amt, "+
				"               sum(DECODE(tint_st,'4',nvl(tint_amt,0))) n_amt, "+
				"               sum(DECODE(tint_st,'5',nvl(tint_amt,0))) e_amt,  "+
				"               sum(nvl(tint_amt,0)) tot_amt,  "+
				"               MIN(DECODE(tint_st,'3',com_nm)) b_com_nm, "+
				"               MIN(DECODE(tint_st,'3',model_nm)) b_model_nm, "+
				"               MIN(DECODE(tint_st,'3',serial_no)) b_serial_no, "+
				"               min(sup_est_dt) sup_est_dt, min(sup_dt) sup_dt, MIN(reg_dt) reg_dt, MIN(conf_dt) conf_dt, MIN(req_dt) req_dt, MIN(reg_id) reg_id, "+
				"               SUM(tint_su) tint_su "+
				"        FROM   CAR_TINT "+
                "        where  rent_l_cd is not null "+
				"        GROUP BY rent_mng_id, rent_l_cd  "+
				"	    ) r2, "+


				"	   cont_etc s, "+
				"	   apprsl u, "+
				"      (select a.*, c.car_off_nm, c.car_off_tel from commi a, car_off_emp b, car_off c where a.agnt_st='2' and a.emp_id=b.emp_id and b.car_off_id=c.car_off_id) l,"+
				"      (select rent_mng_id, rent_l_cd, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0))-sum(ext_pay_amt) jan_amt from scd_ext where rent_st='1' and ext_st in ('0','1','2') group by rent_mng_id, rent_l_cd) m,"+
				"      (select car_mng_id from insur where to_char(sysdate,'YYYYMMDD') between ins_start_dt and ins_exp_dt group by car_mng_id) o,"+
				"      (select rent_mng_id, rent_l_cd, min(off_nm) off_nm from consignment where cons_cau='1' group by rent_mng_id, rent_l_cd) p,"+
				"      (select * from cls_cont where cls_st in ('4','5') and rent_l_cd not in ('D114HHGR00233')) t, "+
				"      (select * from doc_settle where doc_st='5' and doc_step='3') q, "+
				//사진
				"       (select SUBSTR(content_seq,1,12) tint_no, "+
				"	            max(decode(substr(content_seq,13),'1',file_type)) attach_file_type1, max(decode(substr(content_seq,13),'1',seq)) attach_file_seq1, "+
				"	            max(decode(substr(content_seq,13),'2',file_type)) attach_file_type2, max(decode(substr(content_seq,13),'2',seq)) attach_file_seq2, "+
				"	            TO_CHAR(MAX(reg_date),'YYYYMMDD') file_reg_dt "+
				"	     from ACAR_ATTACH_FILE where ISDELETED = 'N' and content_code='TINT' group by SUBSTR(content_seq,1,12)) h2, "+
				"	     (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 "+
				" where"+
				" nvl(a.use_yn,'Y')='Y' and decode(a.rent_l_cd,'S114KK5S00001','1',a.car_st)<>'2' and a.car_gu='1' and d.dlv_est_dt is not null"+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1' "+
				" and a.car_mng_id=c.car_mng_id(+)"+
				" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
				" and a.client_id=e.client_id"+
				" and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd"+
				" and f.car_id=g.car_id and f.car_seq=g.car_seq and g.car_comp_id=h.car_comp_id and g.car_cd=h.code"+
				" and a.bus_id=i.user_id(+) and i.br_id=q.br_id(+)"+
				" and a.bus_id2=j.user_id(+)"+
				" and a.mng_id=k.user_id(+)"+
				" and a.rent_mng_id=l.rent_mng_id(+) and a.rent_l_cd=l.rent_l_cd(+)"+
				" and a.rent_mng_id=m.rent_mng_id(+) and a.rent_l_cd=m.rent_l_cd(+)"+
				" and b.rent_mng_id=n.rent_mng_id(+) and b.rent_l_cd=n.rent_l_cd(+) and b.rent_st=n.rent_st(+) "+
				" and a.car_mng_id=o.car_mng_id(+)"+
				" and a.rent_mng_id=p.rent_mng_id(+) and a.rent_l_cd=p.rent_l_cd(+)"+

				" and a.rent_mng_id=r.rent_mng_id(+) and a.rent_l_cd=r.rent_l_cd(+) and nvl(r.tint_cau,'1')='1'"+
				" and a.rent_mng_id=r2.rent_mng_id(+) and a.rent_l_cd=r2.rent_l_cd(+) "+

				" and a.rent_mng_id=s.rent_mng_id(+) and a.rent_l_cd=s.rent_l_cd(+)"+
				" and d.req_code=q.doc_id(+)"+
				" and a.rent_mng_id=t.rent_mng_id(+) and a.reg_dt=t.reg_dt(+) and t.rent_l_cd is null "+
				" and nvl(nvl(s.car_deli_dt,b.rent_start_dt),'99999999') >= to_char(sysdate,'YYYYMMDD')"+
				" and a.car_mng_id=u.car_mng_id(+)"+
				" and r2.tint_no=h2.tint_no(+) "+
				" and c.car_ext = ec.nm_cd(+) and f.car_ext = ec2.nm_cd(+)  "+
				" ";

		String what = "";
		String dt1 = "";
		String dt2 = "";

		if(s_kd.equals("1"))	what = "upper(nvl(e.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(nvl(c.car_no,d.est_car_no), ' '))";
		if(s_kd.equals("4"))	what = "upper(nvl(i.user_nm, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(i.br_id||q.br_nm, ' '))";	
		if(s_kd.equals("6"))	what = "upper(nvl(nvl(c.car_ext,f.car_ext)||nvl(ec.nm, ec2.nm), ' '))";	
		if(s_kd.equals("7"))	what = "upper(nvl(decode(d.udt_st,'1','본사','2','부산지점','3','대전지점','4','고객','5','대구지점','6','광주지점',''), ' '))";	
		if(s_kd.equals("99"))	what = "decode(a.car_st,'3','리스','렌트')";
		
			
		if(!what.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";
		}	

		if(gubun1.equals("1")){//출고예정
			query += " and a.dlv_dt is null and c.init_reg_dt is null";
			dt1		= "substr(d.dlv_est_dt,1,6)";
			dt2		= "d.dlv_est_dt";
		}else if(gubun1.equals("2")){//등록예정
			query += " and a.dlv_dt is not null and c.init_reg_dt is null";
			dt1		= "substr(f.reg_est_dt,1,6)";
			dt2		= "f.reg_est_dt";
		}else if(gubun1.equals("3")){//납품예정
			query += " and c.init_reg_dt is not null";
			dt1		= "substr(b.rent_est_dt,1,6)";
			dt2		= "b.rent_est_dt";
		}else{
			dt1		= "substr(a.rent_dt,1,6)";			
			dt2		= "a.rent_dt";				
		}

		if(gubun2.equals("1"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
		else if(gubun2.equals("3"))		query += " and "+dt2+" like to_char(sysdate,'YYYYMMDD')||'%'";
		else if(gubun2.equals("4"))		query += " and "+dt2+" like to_char(sysdate+1,'YYYYMMDD')||'%'";
		else if(gubun2.equals("2")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}


		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentBoardInsList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	/**
	 * 계약 예비담당자 리스트
	 */
	public Vector getContMng_id2Lists()
	{
		getConnection();
		Vector vt = new Vector();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String query = "";
		
		query = " select rent_mng_id, rent_l_cd, bus_id, mng_id, bus_id2, mng_id2, rent_way " +
				"  from cont_n_view where nvl(use_yn, 'Y' ) = 'Y' and  nvl(mng_id2,'999999') <> '999999' ";
							
		try {
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContMng_id2Lists]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}
	
		//계약수정 : 예비배정자  null로
	public boolean updateMng_id2(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CONT set "+
							" MNG_ID2		= null "+
							" where RENT_MNG_ID = ? and RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.executeUpdate();
			pstmt.close();

			conn.commit();

	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateMng_id2]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//영업효율등록현황
	public Vector getContBcList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select"+
					"        a.rent_mng_id, a.rent_l_cd, b.rent_st,"+
					"        decode(a.use_yn,'','미결','Y','진행','N','해지') use_yn,"+
					"        decode(c.bc_est_id,'','N','Y') bc_est_yn,"+
					"        decode(b.rent_st,'1',e.user_nm,g.user_nm) user_nm, d.firm_nm, f.car_nm, f.car_no,"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu,"+
					"        decode(b.rent_st,'1',decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스'),'연장') cont_st,"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,"+
					"        decode(b.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way,"+
					"        b.con_mon, c.cls_n_mon,"+
					"        b.rent_start_dt, nvl(b.rent_dt,a.rent_dt) rent_dt,"+
					"        decode(a.spr_kd,'0','일반기업','1','우량기업','2','초우량기업','3','신설법인') spr_kd,"+
					"        c.bc_s_c, c.bc_s_g, b.inv_s_amt, b.fee_s_amt, b.dc_ra"+
					" from   cont a, fee b, fee_etc c, client d, users e, car_reg f, users g, cls_cont h, (select * from cls_cont where cls_st='5') i"+
					" where"+
					"        a.car_st<>'2'"+
					"        and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd"+
					"        and decode(b.rent_st,'1',a.rent_dt,b.rent_start_dt)>='20080901' and b.rent_start_dt is not null"+
					"        and b.rent_mng_id=c.rent_mng_id(+) and b.rent_l_cd=c.rent_l_cd(+) and b.rent_st=c.rent_st(+)"+
					"        and a.client_id=d.client_id"+
					"        and a.bus_id=e.user_id"+
					"        and b.ext_agnt=g.user_id(+)"+
					"        and a.car_mng_id=f.car_mng_id"+
					"        and a.rent_mng_id=h.rent_mng_id(+) and a.rent_l_cd=h.rent_l_cd(+)"+
					"        and a.rent_mng_id=i.rent_mng_id(+) and a.reg_dt=i.reg_dt(+) and i.rent_l_cd is null"+
					"		 and nvl(h.cls_st,'0') not in ('4','5','3','7','10')"+
					" ";
	
			if(gubun1.equals("Y")) query += " and a.use_yn='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";

			if(gubun3.equals("1")) query += " and c.bc_est_id is not null";
			if(gubun3.equals("2")) query += " and c.bc_est_id is null";


			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(d.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(f.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(e.user_nm, ' '))";	
			if(s_kd.equals("14"))	what = "upper(nvl(b.rent_start_dt, ' '))";
			if(s_kd.equals("16"))	what = "upper(nvl(f.car_nm, ' '))";

			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14"))		t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}

			query += " order by nvl(b.rent_dt,a.rent_dt), b.rent_start_dt";


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBcList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//연장시 전매입옵션 가져오기
	public int getBeforOptAmt(String rent_mng_id, String rent_l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int opt_amt = 0;
		String query = "";


		query = " select (opt_s_amt+opt_v_amt) from fee where rent_mng_id=? and rent_l_cd=? and rent_st=(to_number(?)-1)";
		
		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, rent_st);			
	    	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{				
				opt_amt  = rs.getInt(1);
			}
		    rs.close();
            pstmt.close();	

			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getBeforOptAmt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return opt_amt;
		}		
	}

	//재리스계약삭제로 보유차 부활
	public boolean rebirthUseCar(String car_mng_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;

		String query  = " update cont set use_yn='Y' where (rent_mng_id, rent_l_cd) in "+
						 " (select a.rent_mng_id, a.rent_l_cd from cont a where a.car_mng_id=? and a.car_st='2' and a.reg_dt = (select max(reg_dt) from cont where car_st='2' and car_mng_id=a.car_mng_id))";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, car_mng_id);
		    pstmt.executeUpdate();
			pstmt.close();
			
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:rebirthUseCar]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약승계,차종변경 삭제로 원계약 부활
	public boolean rebirthUseCar(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		boolean flag = true;

		String query  = " update cont set use_yn='Y' where rent_mng_id=? and rent_l_cd=? ";

		String query2  = " delete from cls_cont where rent_mng_id=? and rent_l_cd=? ";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		    pstmt.executeUpdate();
			pstmt.close();
			
			pstmt2 = conn.prepareStatement(query2);
			pstmt2.setString(1, rent_mng_id);
			pstmt2.setString(2, rent_l_cd);
		    pstmt2.executeUpdate();
			pstmt2.close();

			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:rebirthUseCar]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
				if(pstmt2 != null)	pstmt2.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	


	//계약 삭제하기
	public boolean rebirthCont(String r_rent_mng_id, String r_rent_l_cd, String r_car_mng_id)
	{
		getConnection();
		PreparedStatement r_pstmt = null;
		PreparedStatement r_pstmt2 = null;
		PreparedStatement r_pstmt3 = null;
		PreparedStatement r_pstmt4 = null;
		PreparedStatement r_pstmt5 = null;
		PreparedStatement r_pstmt6 = null;
		PreparedStatement r_pstmt7 = null;
		PreparedStatement r_pstmt8 = null;
		PreparedStatement r_pstmt9 = null;
		PreparedStatement r_pstmt10 = null;
		PreparedStatement r_pstmt11 = null;
		PreparedStatement r_pstmt12 = null;
		PreparedStatement r_pstmt13 = null;
		PreparedStatement r_pstmt14 = null;
		PreparedStatement r_pstmt15 = null;
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		PreparedStatement pstmt4 = null;
		PreparedStatement pstmt5 = null;
		PreparedStatement pstmt6 = null;
		PreparedStatement pstmt7 = null;
		PreparedStatement pstmt8 = null;
		PreparedStatement pstmt9 = null;
		PreparedStatement pstmt10 = null;
		PreparedStatement pstmt11 = null;
		PreparedStatement pstmt12 = null;
		PreparedStatement pstmt13 = null;
		PreparedStatement pstmt14 = null;
		PreparedStatement pstmt15 = null;
		PreparedStatement pstmt16 = null;
		PreparedStatement pstmt17 = null;
		PreparedStatement pstmt18 = null;
		PreparedStatement pstmt19 = null;
		PreparedStatement pstmt20 = null;
		ResultSet rs = null;
		boolean flag = true;
		String rent_mng_id = "";
		String rent_l_cd   = "";

		//cls_cont 삭제
		String r_query1  = " delete from cls_cont				where rent_mng_id=? and rent_l_cd=?";
		//scd_ext 삭제
		String r_query2  = " delete from scd_ext				where rent_mng_id=? and rent_l_cd=? and ext_st='4'";
		//scd_dly 삭제
		String r_query3  = " delete from scd_dly				where rent_mng_id=? and rent_l_cd=? and etc='중도해지정산'";
		//cont 부활
		String r_query4  = " update cont    set use_yn='Y' 		where rent_mng_id=? and rent_l_cd=?";
		//scd_fee 수정
		String r_query5  = " update scd_fee set bill_yn='Y' 	where rent_mng_id=? and rent_l_cd=? and bill_yn='N'";

		//cls_etc 삭제
		String r_query6  = " delete from cls_etc				where rent_mng_id=? and rent_l_cd=?";
		//cls_etc_sub 삭제
		String r_query7  = " delete from cls_etc_sub			where rent_mng_id=? and rent_l_cd=?";
		//cls_etc_tax 삭제
		String r_query8  = " delete from cls_etc_tax			where rent_mng_id=? and rent_l_cd=?";
		//car_credit 삭제
		String r_query9  = " delete from car_credit				where rent_mng_id=? and rent_l_cd=?";
		//car_reco 삭제
		String r_query10 = " delete from car_reco				where rent_mng_id=? and rent_l_cd=?";
		//doc_settle 삭제
		String r_query11 = " delete from doc_settle				where doc_st='11' and doc_id=?";

		//fee_add 삭제
		String r_query12 = " delete from fee_add				where rent_mng_id=? and rent_l_cd=?";
		//fee_etc_add 삭제
		String r_query13 = " delete from fee_etc_add			where rent_mng_id=? and rent_l_cd=?";
		//stat_bus_cost_cmp_base 삭제
		String r_query14 = " delete from stat_bus_cost_cmp_base where rent_mng_id=? and rent_l_cd=? and rent_st in ('a','s')";

		//보유차 삭제
		String query0  = " select a.rent_mng_id, a.rent_l_cd from cont a where a.car_mng_id=? and a.car_st='2' and a.reg_dt = (select max(reg_dt) from cont where car_st='2' and car_mng_id=a.car_mng_id)";
		String query1  = " delete from cont				where rent_mng_id=? and rent_l_cd=?";
		String query2  = " delete from car_mgr			where rent_mng_id=? and rent_l_cd=?";
		String query3  = " delete from allot			where rent_mng_id=? and rent_l_cd=?";
		String query4  = " delete from car_etc			where rent_mng_id=? and rent_l_cd=?";
		String query5  = " delete from car_pur			where rent_mng_id=? and rent_l_cd=?";
		String query6  = " delete from cls_cont			where rent_mng_id=? and rent_l_cd=?";
		String query7  = " delete from cltr				where rent_mng_id=? and rent_l_cd=?";
		String query8  = " delete from commi			where rent_mng_id=? and rent_l_cd=?";
		String query9  = " delete from fee				where rent_mng_id=? and rent_l_cd=?";
		String query10 = " delete from scd_fee			where rent_mng_id=? and rent_l_cd=?";
		String query11 = " delete from scd_ext			where rent_mng_id=? and rent_l_cd=?";
		String query12 = " delete from gua_ins			where rent_mng_id=? and rent_l_cd=?";
		String query13 = " delete from cont_etc			where rent_mng_id=? and rent_l_cd=?";
		String query14 = " delete from cont_eval		where rent_mng_id=? and rent_l_cd=?";
		String query15 = " delete from cont_gur			where rent_mng_id=? and rent_l_cd=?";
		String query16 = " delete from lc_rent_cng_h	where rent_mng_id=? and rent_l_cd=?";
		String query17 = " delete from lc_scan			where rent_mng_id=? and rent_l_cd=?";
		String query18 = " delete from taecha			where rent_mng_id=? and rent_l_cd=?";
		String query19 = " delete from cms_mng			where rent_mng_id=? and rent_l_cd=?";
		String query20 = " delete from fee_etc			where rent_mng_id=? and rent_l_cd=?";


		try 
		{
			conn.setAutoCommit(false);

			r_pstmt = conn.prepareStatement(r_query1);
			r_pstmt.setString(1, r_rent_mng_id);
			r_pstmt.setString(2, r_rent_l_cd);
		    r_pstmt.executeUpdate();
			r_pstmt.close();

			r_pstmt2 = conn.prepareStatement(r_query2);
			r_pstmt2.setString(1, r_rent_mng_id);
			r_pstmt2.setString(2, r_rent_l_cd);
		    r_pstmt2.executeUpdate();
			r_pstmt2.close();

			r_pstmt3 = conn.prepareStatement(r_query3);
			r_pstmt3.setString(1, r_rent_mng_id);
			r_pstmt3.setString(2, r_rent_l_cd);
		    r_pstmt3.executeUpdate();
			r_pstmt3.close();

			r_pstmt4 = conn.prepareStatement(r_query4);
			r_pstmt4.setString(1, r_rent_mng_id);
			r_pstmt4.setString(2, r_rent_l_cd);
		    r_pstmt4.executeUpdate();
			r_pstmt4.close();

			r_pstmt5 = conn.prepareStatement(r_query5);
			r_pstmt5.setString(1, r_rent_mng_id);
			r_pstmt5.setString(2, r_rent_l_cd);
		    r_pstmt5.executeUpdate();
			r_pstmt5.close();

			r_pstmt6 = conn.prepareStatement(r_query6);
			r_pstmt6.setString(1, r_rent_mng_id);
			r_pstmt6.setString(2, r_rent_l_cd);
		    r_pstmt6.executeUpdate();
			r_pstmt6.close();

			r_pstmt7 = conn.prepareStatement(r_query7);
			r_pstmt7.setString(1, r_rent_mng_id);
			r_pstmt7.setString(2, r_rent_l_cd);
		    r_pstmt7.executeUpdate();
			r_pstmt7.close();

			r_pstmt8 = conn.prepareStatement(r_query8);
			r_pstmt8.setString(1, r_rent_mng_id);
			r_pstmt8.setString(2, r_rent_l_cd);
		    r_pstmt8.executeUpdate();
			r_pstmt8.close();

			r_pstmt9 = conn.prepareStatement(r_query9);
			r_pstmt9.setString(1, r_rent_mng_id);
			r_pstmt9.setString(2, r_rent_l_cd);
		    r_pstmt9.executeUpdate();
			r_pstmt9.close();

			r_pstmt10 = conn.prepareStatement(r_query10);
			r_pstmt10.setString(1, r_rent_mng_id);
			r_pstmt10.setString(2, r_rent_l_cd);
		    r_pstmt10.executeUpdate();
			r_pstmt10.close();

			r_pstmt11 = conn.prepareStatement(r_query11);
			r_pstmt11.setString(1, r_rent_l_cd);
		    r_pstmt11.executeUpdate();
			r_pstmt11.close();

			r_pstmt12 = conn.prepareStatement(r_query12);
			r_pstmt12.setString(1, r_rent_mng_id);
			r_pstmt12.setString(2, r_rent_l_cd);
		    r_pstmt12.executeUpdate();
			r_pstmt12.close();

			r_pstmt13 = conn.prepareStatement(r_query13);
			r_pstmt13.setString(1, r_rent_mng_id);
			r_pstmt13.setString(2, r_rent_l_cd);
		    r_pstmt13.executeUpdate();
			r_pstmt13.close();

			r_pstmt14 = conn.prepareStatement(r_query14);
			r_pstmt14.setString(1, r_rent_mng_id);
			r_pstmt14.setString(2, r_rent_l_cd);
		    r_pstmt14.executeUpdate();
			r_pstmt14.close();


			r_pstmt15 = conn.prepareStatement(query0);
			r_pstmt15.setString(1, r_car_mng_id);
	    	rs = r_pstmt15.executeQuery();    	
			if(rs.next())
			{				
				rent_mng_id = rs.getString("rent_mng_id")==null?"":rs.getString("rent_mng_id");
				rent_l_cd   = rs.getString("rent_l_cd")==null?"":rs.getString("rent_l_cd");
			}
			rs.close();
			r_pstmt15.close();

			if(!rent_mng_id.equals("")){

				pstmt = conn.prepareStatement(query1);
				pstmt.setString(1, rent_mng_id);
				pstmt.setString(2, rent_l_cd);
				pstmt.executeUpdate();
				pstmt.close();

				pstmt2 = conn.prepareStatement(query2);
				pstmt2.setString(1, rent_mng_id);
				pstmt2.setString(2, rent_l_cd);
				pstmt2.executeUpdate();
				pstmt2.close();

				pstmt3 = conn.prepareStatement(query3);
				pstmt3.setString(1, rent_mng_id);
				pstmt3.setString(2, rent_l_cd);
				pstmt3.executeUpdate();
				pstmt3.close();

				pstmt4 = conn.prepareStatement(query4);
				pstmt4.setString(1, rent_mng_id);
				pstmt4.setString(2, rent_l_cd);
				pstmt4.executeUpdate();
				pstmt4.close();

				pstmt5 = conn.prepareStatement(query5);
				pstmt5.setString(1, rent_mng_id);
				pstmt5.setString(2, rent_l_cd);
				pstmt5.executeUpdate();
				pstmt5.close();

				pstmt6 = conn.prepareStatement(query6);
				pstmt6.setString(1, rent_mng_id);
				pstmt6.setString(2, rent_l_cd);
				pstmt6.executeUpdate();
				pstmt6.close();

				pstmt7 = conn.prepareStatement(query7);
				pstmt7.setString(1, rent_mng_id);
				pstmt7.setString(2, rent_l_cd);
				pstmt7.executeUpdate();
				pstmt7.close();

				pstmt8 = conn.prepareStatement(query8);
				pstmt8.setString(1, rent_mng_id);
				pstmt8.setString(2, rent_l_cd);
				pstmt8.executeUpdate();
				pstmt8.close();

				pstmt9 = conn.prepareStatement(query9);
				pstmt9.setString(1, rent_mng_id);
				pstmt9.setString(2, rent_l_cd);
				pstmt9.executeUpdate();
				pstmt9.close();

				pstmt10 = conn.prepareStatement(query10);
				pstmt10.setString(1, rent_mng_id);
				pstmt10.setString(2, rent_l_cd);
				pstmt10.executeUpdate();
				pstmt10.close();

				pstmt11 = conn.prepareStatement(query11);
				pstmt11.setString(1, rent_mng_id);
				pstmt11.setString(2, rent_l_cd);
				pstmt11.executeUpdate();
				pstmt11.close();


				pstmt12 = conn.prepareStatement(query12);
				pstmt12.setString(1, rent_mng_id);
				pstmt12.setString(2, rent_l_cd);
				pstmt12.executeUpdate();
				pstmt12.close();

				pstmt13 = conn.prepareStatement(query13);
				pstmt13.setString(1, rent_mng_id);
				pstmt13.setString(2, rent_l_cd);
				pstmt13.executeUpdate();
				pstmt13.close();

				pstmt14 = conn.prepareStatement(query14);
				pstmt14.setString(1, rent_mng_id);
				pstmt14.setString(2, rent_l_cd);
				pstmt14.executeUpdate();
				pstmt14.close();

				pstmt15 = conn.prepareStatement(query15);
				pstmt15.setString(1, rent_mng_id);
				pstmt15.setString(2, rent_l_cd);
				pstmt15.executeUpdate();
				pstmt15.close();

				pstmt16 = conn.prepareStatement(query16);
				pstmt16.setString(1, rent_mng_id);
				pstmt16.setString(2, rent_l_cd);
				pstmt16.executeUpdate();
				pstmt16.close();

				pstmt17 = conn.prepareStatement(query17);
				pstmt17.setString(1, rent_mng_id);
				pstmt17.setString(2, rent_l_cd);
				pstmt17.executeUpdate();
				pstmt17.close();

				pstmt18 = conn.prepareStatement(query18);
				pstmt18.setString(1, rent_mng_id);
				pstmt18.setString(2, rent_l_cd);
				pstmt18.executeUpdate();
				pstmt18.close();

				pstmt19 = conn.prepareStatement(query19);
				pstmt19.setString(1, rent_mng_id);
				pstmt19.setString(2, rent_l_cd);
				pstmt19.executeUpdate();
				pstmt19.close();

				pstmt20 = conn.prepareStatement(query20);
				pstmt20.setString(1, rent_mng_id);
				pstmt20.setString(2, rent_l_cd);
				pstmt20.executeUpdate();
				pstmt20.close();

			}
			
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:rebirthCont]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(rs != null)			rs.close();
				if(r_pstmt != null)		r_pstmt.close();
				if(r_pstmt2 != null)	r_pstmt2.close();
				if(r_pstmt3 != null)	r_pstmt3.close();
				if(r_pstmt4 != null)	r_pstmt4.close();
				if(r_pstmt5 != null)	r_pstmt5.close();
				if(r_pstmt6 != null)	r_pstmt6.close();
				if(r_pstmt7 != null)	r_pstmt7.close();
				if(r_pstmt8 != null)	r_pstmt8.close();
				if(r_pstmt9 != null)	r_pstmt9.close();
				if(r_pstmt10 != null)	r_pstmt10.close();
				if(r_pstmt11 != null)	r_pstmt11.close();
				if(r_pstmt12 != null)	r_pstmt12.close();
				if(r_pstmt13 != null)	r_pstmt13.close();
				if(r_pstmt14 != null)	r_pstmt14.close();
				if(r_pstmt15 != null)	r_pstmt15.close();
				if(pstmt != null)		pstmt.close();
				if(pstmt2 != null)		pstmt2.close();
				if(pstmt3 != null)		pstmt3.close();
				if(pstmt4 != null)		pstmt4.close();
				if(pstmt5 != null)		pstmt5.close();
				if(pstmt6 != null)		pstmt6.close();
				if(pstmt7 != null)		pstmt7.close();
				if(pstmt8 != null)		pstmt8.close();
				if(pstmt9 != null)		pstmt9.close();
				if(pstmt10 != null)		pstmt10.close();
				if(pstmt11 != null)		pstmt11.close();
				if(pstmt12 != null)		pstmt12.close();
				if(pstmt13 != null)		pstmt13.close();
				if(pstmt14 != null)		pstmt14.close();
				if(pstmt15 != null)		pstmt15.close();
				if(pstmt16 != null)		pstmt16.close();
				if(pstmt17 != null)		pstmt17.close();
				if(pstmt18 != null)		pstmt18.close();
				if(pstmt19 != null)		pstmt19.close();
				if(pstmt20 != null)		pstmt20.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//추가이용 영업효율등록현황
	public Vector getContBcAddList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

     	query = " select  "+
				"        c.bus_id2 bus_id, "+
				"        b.rent_mng_id, b.rent_l_cd, b.rent_st, \n"+
                "        nvl(h.rent_start_dt,to_char(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),b.con_mon),'YYYYMMDD')) as rent_start_dt, "+
				"        nvl(h.rent_end_dt,a.cls_dt) as rent_end_dt, \n"+
                "        nvl(h.con_mon,trunc(months_between(to_date(a.cls_dt,'YYYYMMDD'),(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),b.con_mon))),0)) as con_mon, \n"+
				"        '해지' use_yn, '추가' cont_st, g.user_nm, i.firm_nm, j.car_nm, j.car_no, k.cls_n_mon, \n"+
				"        decode(l.bc_est_id,'','N','Y') bc_est_yn, l.bc_s_c, l.bc_s_g, h.inv_s_amt, h.fee_s_amt, \n"+
				"        decode(nvl(c.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
				"        decode(c.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, \n"+
				"        decode(b.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				"        decode(c.spr_kd,'0','일반기업','1','우량기업','2','초우량기업','3','신설법인') spr_kd, substr(p.reg_dt,0,8) reg_dt, p.reg_id \n"+
                " from   cls_cont a, cont c, fee b, car_etc f, car_nm d,  \n"+
				"        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) e,  \n"+
				"	     users g, (select * from fee_add where rent_st='a') h, client i, car_reg j, fee_etc k, (select * from fee_etc_add where rent_st='a') l, \n"+
				"        (select * from stat_bus_cost_cmp_base where cost_st='1') o, estimate p \n"+
                " where  a.cls_st in ('1','2') "+
				"        and nvl(h.rent_start_dt,to_char(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),b.con_mon),'YYYYMMDD')) >= '20090101' \n"+
                "        and to_char(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),b.con_mon),'YYYYMMDD') < a.cls_dt \n"+
                "        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
                "        and c.rent_mng_id=b.rent_mng_id and c.rent_l_cd=b.rent_l_cd \n"+
                "        and b.rent_mng_id=e.rent_mng_id and b.rent_l_cd=e.rent_l_cd and b.rent_st=e.rent_st \n"+
                "        and c.rent_mng_id=f.rent_mng_id and c.rent_l_cd=f.rent_l_cd \n"+
                "        and f.car_id=d.car_id and f.car_seq=d.car_seq \n"+
				"		 and b.rent_mng_id=k.rent_mng_id(+) and b.rent_l_cd=k.rent_l_cd(+) and b.rent_st=k.rent_st(+) \n"+
                "        and c.rent_mng_id=h.rent_mng_id(+) and c.rent_l_cd=h.rent_l_cd(+) and nvl(h.rent_st,'a')='a' \n"+
                "        and c.client_id=i.client_id and c.car_mng_id=j.car_mng_id \n"+ 
                "        and c.bus_id2=g.user_id\n"+
				"		 and h.rent_mng_id=l.rent_mng_id(+) and h.rent_l_cd=l.rent_l_cd(+) and h.rent_st=l.rent_st(+) \n"+
				"		 and b.rent_mng_id=o.rent_mng_id and b.rent_st=o.rent_st \n"+ //and b.rent_l_cd=o.rent_l_cd(+) 
                "        and trunc(months_between(to_date(a.cls_dt,'YYYYMMDD'),(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),b.con_mon))),0)>0 \n"+
				"        and l.bc_est_id=p.est_id(+)"+
				"        and a.rent_l_cd not in ('S106YNCL00011')"+
				"        and g.loan_st is not null "+
				" ";
	

			if(gubun3.equals("1")) query += " and l.bc_est_id is not null";
			if(gubun3.equals("2")) query += " and l.bc_est_id is null";


			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(i.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(j.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(g.user_nm, ' '))";	
			if(s_kd.equals("14"))	what = "upper(nvl(to_char(to_date(b.rent_end_dt,'YYYYMMDD')+1,'YYYYMMDD'), ' '))";
			if(s_kd.equals("16"))	what = "upper(nvl(j.car_nm, ' '))";
			if(s_kd.equals("17"))	what = "upper(nvl(a.cls_dt, ' '))";	
			if(s_kd.equals("19"))	what = "upper(nvl(p.reg_dt, ' '))";	
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17"))		t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}

			query += " order by l.bc_est_id, a.cls_dt, to_char(to_date(b.rent_end_dt,'YYYYMMDD')+1,'YYYYMMDD')";


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBcAddList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//추가영업효율등록현황
	public Hashtable getContBcAddCase(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


     	query = " select  decode(nvl(b.ext_agnt,c.bus_id),'000037',c.mng_id, c.bus_id) bus_id, b.rent_mng_id, b.rent_l_cd, b.rent_st, \n"+
                "        to_char(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),(b.con_mon-nvl(k.cls_n_mon,0))),'YYYYMMDD') rent_start_dt, a.cls_dt as rent_end_dt, \n"+
                "        trunc(months_between(to_date(a.cls_dt,'YYYYMMDD'),(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),(b.con_mon-nvl(k.cls_n_mon,0)))+1)),0) con_mon, \n"+
				"        '해지' use_yn, '추가' cont_st, g.user_nm, i.firm_nm, j.car_nm, j.car_no, k.cls_n_mon, \n"+
				"        decode(l.bc_est_id,'','N','Y') bc_est_yn, l.bc_s_c, l.bc_s_g, h.inv_s_amt, h.fee_s_amt, \n"+
				"        'a' add_rent_st,"+
				"        decode(nvl(c.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
				"        decode(c.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, \n"+
				"        decode(b.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				"        decode(c.spr_kd,'0','일반기업','1','우량기업','2','초우량기업','3','신설법인') spr_kd \n"+
                " from   cls_cont a, cont c, fee b, car_etc f, car_nm d,  \n"+
				"        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) e,  \n"+
				"	     users g, (select * from fee_add where rent_st='a') h, client i, car_reg j, fee_etc k, (select * from fee_etc_add where rent_st='a') l \n"+
                " where  a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"' \n"+
                "        and to_char(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),(b.con_mon-nvl(k.cls_n_mon,0))),'YYYYMMDD') < a.cls_dt \n"+
                "        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
                "        and c.rent_mng_id=b.rent_mng_id and c.rent_l_cd=b.rent_l_cd \n"+
                "        and b.rent_mng_id=e.rent_mng_id and b.rent_l_cd=e.rent_l_cd and b.rent_st=e.rent_st \n"+
                "        and c.rent_mng_id=f.rent_mng_id and c.rent_l_cd=f.rent_l_cd \n"+
                "        and f.car_id=d.car_id and f.car_seq=d.car_seq \n"+
				"		 and b.rent_mng_id=k.rent_mng_id(+) and b.rent_l_cd=k.rent_l_cd(+) and b.rent_st=k.rent_st(+)"+
                "        and c.rent_mng_id=h.rent_mng_id(+) and c.rent_l_cd=h.rent_l_cd(+) \n"+
                "        and c.client_id=i.client_id and c.car_mng_id=j.car_mng_id \n"+ 
                "        and decode(nvl(b.ext_agnt,c.bus_id),'000037',c.mng_id, nvl(b.ext_agnt,c.bus_id))=g.user_id\n"+// and g.use_yn='Y'
				"		 and h.rent_mng_id=l.rent_mng_id(+) and h.rent_l_cd=l.rent_l_cd(+) and h.rent_st=l.rent_st(+)"+
				" ";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBcAddCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//영업효율등록현황
	public Hashtable getContFeeAdd(String rent_mng_id, String rent_l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

     	query = " select * from fee_add where rent_mng_id='"+rent_mng_id+"' and rent_l_cd='"+rent_l_cd+"' and rent_st='"+rent_st+"'";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeAdd]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//영업효율등록현황
	public Hashtable getContFeeEtcAdd(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

     	query = " select * from fee_etc_add where rent_mng_id='"+rent_mng_id+"' and rent_l_cd='"+rent_l_cd+"'";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeEtcAdd]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//차량임시회수리스트
	public Vector getCarCallInList(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select * from car_call_in where rent_mng_id='"+rent_mng_id+"' and rent_l_cd='"+rent_l_cd+"'";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarCallInList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//차량임시회수리스트
	public Hashtable getCarCallIn(String rent_mng_id, String rent_l_cd, String seq)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select * from car_call_in where rent_mng_id='"+rent_mng_id+"' and rent_l_cd='"+rent_l_cd+"' and seq='"+seq+"'";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarCallIn]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//주행거리 가져오기
	public int getSh_tot_km(String car_mng_id, String serv_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int tot_dist = 0;

		String query =" select tot_dist from service where car_mng_id=? and serv_dt=replace(?, '-', '')";
		

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, car_mng_id);
			pstmt.setString(2, serv_dt);
			rs = pstmt.executeQuery();
			if(rs.next())
			{
				tot_dist = Integer.parseInt(rs.getString(1)==null?"0":rs.getString(1));
			}
		    rs.close();
            pstmt.close();	
    	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSh_tot_km]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return tot_dist;
		}
	}

	//일수 가져오기
	public int getUseDays(String dt1, String dt2)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int use_day = 0;

		String query =" select trunc(to_date(replace(nvl(?,to_char(sysdate,'YYYYMMDD')), '-', ''),'YYYYMMDD')-to_date(replace(nvl(?,to_char(sysdate,'YYYYMMDD')), '-', ''),'YYYYMMDD'),0) from dual";
		
		try
		{
			if(AddUtil.replace(dt1," ","").length() >7 && dt2.length() >7){
				pstmt = conn.prepareStatement(query);
				pstmt.setString(1, dt1);
				pstmt.setString(2, dt2);
				rs = pstmt.executeQuery();
				if(rs.next())
				{
					use_day = Integer.parseInt(rs.getString(1)==null?"0":rs.getString(1));
				}
				rs.close();
				pstmt.close();
			}
    	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getUseDays]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return use_day;
		}
	}

	//추가연장데이타입력
	public boolean insertFeeAdd(Hashtable ht)
	{
		getConnection();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt2 = null;
		boolean flag = true;

		String query  = " insert into fee_add "+
						" (rent_mng_id, rent_l_cd, rent_st, con_mon, rent_start_dt, rent_end_dt, pp_s_amt, pp_v_amt, fee_s_amt, fee_v_amt) "+
						" values "+
						" (?, ?, ?, ?, replace(?,'-',''), replace(?,'-',''), ?, ?, ?, ?)";

		String query2  = " insert into fee_etc_add "+
						" (rent_mng_id, rent_l_cd, rent_st, reg_dt) "+
						" values "+
						" (?, ?, ?, sysdate)";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  String.valueOf(ht.get("RENT_MNG_ID")));
			pstmt.setString(2,  String.valueOf(ht.get("RENT_L_CD")));
			pstmt.setString(3,  String.valueOf(ht.get("RENT_ST")));
			pstmt.setString(4,  String.valueOf(ht.get("CON_MON")));
			pstmt.setString(5,  String.valueOf(ht.get("RENT_START_DT")));
			pstmt.setString(6,  String.valueOf(ht.get("RENT_END_DT")));
			pstmt.setInt   (7,  AddUtil.parseInt(String.valueOf(ht.get("PP_S_AMT"))));
			pstmt.setInt   (8,  AddUtil.parseInt(String.valueOf(ht.get("PP_S_AMT"))));
			pstmt.setInt   (9,  AddUtil.parseInt(String.valueOf(ht.get("FEE_S_AMT"))));
			pstmt.setInt   (10, AddUtil.parseInt(String.valueOf(ht.get("FEE_S_AMT"))));
		    pstmt.executeUpdate();
			pstmt.close();

			pstmt2 = conn.prepareStatement(query2);
			pstmt2.setString(1, String.valueOf(ht.get("RENT_MNG_ID")));
			pstmt2.setString(2, String.valueOf(ht.get("RENT_L_CD")));
			pstmt2.setString(3, String.valueOf(ht.get("RENT_ST")));
		    pstmt2.executeUpdate();
			pstmt2.close();
			
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertFeeAdd]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
				if(pstmt2 != null)	pstmt2.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//정산 영업효율등록현황
	public Vector getContBcClsList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

     	query = " select  decode(decode(b.rent_st,'1',c.bus_id,b.ext_agnt),'000037',c.mng_id, decode(b.rent_st,'1',c.bus_id,b.ext_agnt)) bus_id, b.rent_mng_id, b.rent_l_cd, b.rent_st, a.cls_dt, \n"+
                "        nvl(h.rent_start_dt,b.rent_start_dt) as rent_start_dt,  \n"+
				"        nvl(h.rent_end_dt,a.cls_dt) as rent_end_dt, \n"+
                "        nvl(h.con_mon,trunc(months_between(to_date(a.cls_dt,'YYYYMMDD')+1,to_date(b.rent_start_dt,'YYYYMMDD')),0)) as con_mon, \n"+
				"        '해지' use_yn, '정산' cont_st, g.user_nm, i.firm_nm, j.car_nm, j.car_no, k.cls_n_mon, \n"+
				"        decode(l.bc_est_id,'','N','Y') bc_est_yn, l.bc_s_c, l.bc_s_g, h.inv_s_amt, h.fee_s_amt, \n"+
				"        decode(nvl(c.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
				"        decode(c.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, \n"+
				"        decode(b.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				"        decode(c.spr_kd,'0','일반기업','1','우량기업','2','초우량기업','3','신설법인') spr_kd, substr(p.reg_dt,0,8) reg_dt, p.reg_id \n"+
                " from   cls_cont a, cls_etc q, cont c, fee b, car_etc f, car_nm d,  \n"+
				"        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) e,  \n"+
				"	     users g, "+
				"        (select * from fee_add where rent_st='s') h, "+
				"        client i, car_reg j, fee_etc k, "+
				"        (select * from fee_etc_add where rent_st='s') l,  \n"+
				"        (select a.* from stat_bus_cost_cmp_base a, (select rent_mng_id, rent_l_cd, max(rent_st) rent_st from stat_bus_cost_cmp_base where cost_st='1' group by rent_mng_id, rent_l_cd) b \n"+
				"         where a.cost_st='1' and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.rent_st=b.rent_st"+
				"        ) o,  \n"+
				"        estimate p, "+
				"        (select * from cls_cont where cls_st in ('4','5')) r \n"+
                " where  a.cls_st in ('1','2') and b.rent_start_dt >= '20081201' \n"+
                "        and to_char(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),b.con_mon),'YYYYMMDD') > a.cls_dt \n"+
                "        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
                "        and c.rent_mng_id=b.rent_mng_id and c.rent_l_cd=b.rent_l_cd \n"+
                "        and b.rent_mng_id=e.rent_mng_id and b.rent_l_cd=e.rent_l_cd and b.rent_st=e.rent_st \n"+
                "        and c.rent_mng_id=f.rent_mng_id and c.rent_l_cd=f.rent_l_cd \n"+
                "        and f.car_id=d.car_id and f.car_seq=d.car_seq \n"+
				"		 and b.rent_mng_id=k.rent_mng_id(+) and b.rent_l_cd=k.rent_l_cd(+) and b.rent_st=k.rent_st(+) \n"+
                "        and c.rent_mng_id=h.rent_mng_id(+) and c.rent_l_cd=h.rent_l_cd(+) \n"+
                "        and c.client_id=i.client_id and c.car_mng_id=j.car_mng_id \n"+ 
                "        and decode(decode(b.rent_st,'1',c.bus_id,b.ext_agnt),'000037',c.mng_id, decode(b.rent_st,'1',c.bus_id,b.ext_agnt))=g.user_id \n"+
				"		 and h.rent_mng_id=l.rent_mng_id(+) and h.rent_l_cd=l.rent_l_cd(+) and h.rent_st=l.rent_st(+) \n"+
                "        and c.rent_mng_id=r.rent_mng_id(+) and c.reg_dt=r.reg_dt(+) \n"+
				"		 and b.rent_mng_id=o.rent_mng_id and b.rent_st=o.rent_st  \n"+//and decode(r.cls_dt,'',b.rent_l_cd,r.rent_l_cd)=o.rent_l_cd
				"        and b.rent_end_dt > a.cls_dt \n"+
				"        and l.bc_est_id=p.est_id(+) \n"+
                "        and a.rent_mng_id=q.rent_mng_id and a.rent_l_cd=q.rent_l_cd and nvl(q.match,'N')<>'Y' \n"+
				"        and b.rent_start_dt < a.cls_dt \n"+
				" ";
	
			query += " and a.rent_l_cd not in ('B109VVOL00001','S108HRTR00353')";

			if(gubun3.equals("1")) query += " and l.bc_est_id is not null";
			if(gubun3.equals("2")) query += " and l.bc_est_id is null";


			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(i.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(j.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(g.user_nm, ' '))";	
			if(s_kd.equals("14"))	what = "upper(nvl(to_char(to_date(b.rent_end_dt,'YYYYMMDD')+1,'YYYYMMDD'), ' '))";
			if(s_kd.equals("16"))	what = "upper(nvl(j.car_nm, ' '))";
			if(s_kd.equals("17"))	what = "upper(nvl(a.cls_dt, ' '))";
			if(s_kd.equals("19"))	what = "upper(nvl(p.reg_dt, ' '))";	

			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1)						t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17"))		t_wd = AddUtil.replace(t_wd,"-","");

				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}

			query += " order by l.bc_est_id, to_char(to_date(b.rent_start_dt,'YYYYMMDD')+1,'YYYYMMDD')";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBcClsList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//정산 효율등록현황
	public Hashtable getContBcClsCase(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


     	query = " select  decode(nvl(b.ext_agnt,c.bus_id),'000037',c.mng_id, c.bus_id) bus_id, b.rent_mng_id, b.rent_l_cd, b.rent_st, \n"+
                "        nvl(h.rent_dt,nvl(b.rent_dt,c.rent_dt)) as rent_dt, "+
				"        nvl(h.rent_start_dt,b.rent_start_dt) as rent_start_dt, "+
				"        nvl(h.rent_end_dt,a.cls_dt) as rent_end_dt, \n"+
                "        nvl(h.con_mon,trunc(months_between(to_date(a.cls_dt,'YYYYMMDD')+1,to_date(b.rent_start_dt,'YYYYMMDD')),0)) as con_mon, \n"+
				"        '해지' use_yn, '추가' cont_st, g.user_nm, i.firm_nm, j.car_nm, j.car_no, k.cls_n_mon, \n"+
				"        decode(l.bc_est_id,'','N','Y') bc_est_yn, l.bc_s_c, l.bc_s_g, h.inv_s_amt, h.fee_s_amt, \n"+
				"        (b.pp_s_amt-a.rfee_s_amt) pp_s_amt, trunc((b.pp_s_amt-a.rfee_s_amt)*0.1,0) pp_v_amt,"+
				"        's' add_rent_st,"+
				"        decode(nvl(c.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
				"        decode(c.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, \n"+
				"        decode(b.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				"        decode(c.spr_kd,'0','일반기업','1','우량기업','2','초우량기업','3','신설법인') spr_kd, \n"+
				"        k.sh_year, k.sh_month, k.sh_day, k.sh_day_bas_dt, k.sh_amt, k.sh_ja, k.sh_km, k.sh_km_bas_dt "+
                " from   cls_cont a, cont c, fee b, car_etc f, car_nm d,  \n"+
				"        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) e,  \n"+
				"	     users g, (select * from fee_add where rent_st='s') h, client i, car_reg j, fee_etc k, (select * from fee_etc_add where rent_st='s') l \n"+
                " where  a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"' \n"+
                "        and to_char(add_months(to_date(b.rent_start_dt,'YYYYMMDD'),b.con_mon),'YYYYMMDD') > a.cls_dt \n"+
                "        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
                "        and c.rent_mng_id=b.rent_mng_id and c.rent_l_cd=b.rent_l_cd \n"+
                "        and b.rent_mng_id=e.rent_mng_id and b.rent_l_cd=e.rent_l_cd and b.rent_st=e.rent_st \n"+
                "        and c.rent_mng_id=f.rent_mng_id and c.rent_l_cd=f.rent_l_cd \n"+
                "        and f.car_id=d.car_id and f.car_seq=d.car_seq \n"+
				"		 and b.rent_mng_id=k.rent_mng_id(+) and b.rent_l_cd=k.rent_l_cd(+) and b.rent_st=k.rent_st(+)"+
                "        and c.rent_mng_id=h.rent_mng_id(+) and c.rent_l_cd=h.rent_l_cd(+) \n"+
                "        and c.client_id=i.client_id and c.car_mng_id=j.car_mng_id \n"+ 
                "        and decode(nvl(b.ext_agnt,c.bus_id),'000037',c.mng_id, nvl(b.ext_agnt,c.bus_id))=g.user_id\n"+// and g.use_yn='Y'
				"		 and h.rent_mng_id=l.rent_mng_id(+) and h.rent_l_cd=l.rent_l_cd(+) and h.rent_st=l.rent_st(+)"+
				" ";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBcClsCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//출고지연대차 영업효율등록현황
	public Vector getContBcTaeList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

     	query = " select  decode(nvl(b.ext_agnt,c.bus_id),'000037',c.mng_id, c.bus_id) bus_id, b.rent_mng_id, b.rent_l_cd, b.rent_st, \n"+
                "        nvl(h.rent_start_dt,a.car_rent_st) as rent_start_dt, "+
				"        nvl(h.rent_end_dt,a.car_rent_et) as rent_end_dt, \n"+
                "        nvl(h.con_mon,trunc(months_between(to_date(b.rent_start_dt,'YYYYMMDD')+1,to_date(a.car_rent_st,'YYYYMMDD')),0)) as con_mon, \n"+
				"        '종료' use_yn, '대차' cont_st, g.user_nm, i.firm_nm, j.car_nm, j.car_no, k.cls_n_mon, \n"+
				"        decode(l.bc_est_id,'','N','Y') bc_est_yn, l.bc_s_c, l.bc_s_g, h.inv_s_amt, h.fee_s_amt, \n"+
				"        decode(c.car_gu,'1','신차','0','재리스','2','중고차') car_gu, \n"+
				"        decode(c.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, \n"+
				"        decode(b.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				"        decode(c.spr_kd,'0','일반기업','1','우량기업','2','초우량기업','3','신설법인') spr_kd, substr(p.reg_dt,0,8) reg_dt, a.no as taecha_no \n"+
                " from   taecha a, cont c, fee b, car_etc f, car_nm d,  \n"+
				"	     users g, fee_add h, client i, car_reg j, fee_etc k, fee_etc_add l, "+
				"        (select * from stat_bus_cost_cmp_base where cost_st='1') o, estimate p \n"+
                " where  a.car_rent_st is not null and b.rent_start_dt > '20091231' and nvl(b.prv_mon_yn,'0')='0' \n"+
                "        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
                "        and c.rent_mng_id=b.rent_mng_id and c.rent_l_cd=b.rent_l_cd and b.rent_st='1' \n"+
                "        and c.rent_mng_id=f.rent_mng_id and c.rent_l_cd=f.rent_l_cd \n"+
                "        and f.car_id=d.car_id and f.car_seq=d.car_seq \n"+
				"		 and b.rent_mng_id=k.rent_mng_id(+) and b.rent_l_cd=k.rent_l_cd(+) and b.rent_st=k.rent_st(+) \n"+
                "        and c.rent_mng_id=h.rent_mng_id(+) and c.rent_l_cd=h.rent_l_cd(+) \n"+
                "        and c.client_id=i.client_id and a.car_mng_id=j.car_mng_id \n"+ 
                "        and decode(nvl(b.ext_agnt,c.bus_id),'000037',c.mng_id, nvl(b.ext_agnt,c.bus_id))=g.user_id\n"+
				"		 and h.rent_mng_id=l.rent_mng_id(+) and h.rent_l_cd=l.rent_l_cd(+) and h.rent_st=l.rent_st(+) \n"+
				"		 and b.rent_mng_id=o.rent_mng_id \n"+
                "        and trunc(months_between(to_date(b.rent_start_dt,'YYYYMMDD')+1,to_date(a.car_rent_st,'YYYYMMDD')),0)>0 \n"+
				"        and l.bc_est_id=p.est_id(+)"+
				" ";
	

			if(s_kd.equals("18"))	query += " and c.rent_dt >= '20100914'";
			else{
				if(gubun3.equals("1")) query += " and l.bc_est_id is not null";
				if(gubun3.equals("2")) query += " and l.bc_est_id is null";
			}
			

			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(i.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(j.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(g.user_nm, ' '))";	
			if(s_kd.equals("14"))	what = "upper(nvl(to_char(to_date(b.rent_end_dt,'YYYYMMDD')+1,'YYYYMMDD'), ' '))";
			if(s_kd.equals("16"))	what = "upper(nvl(j.car_nm, ' '))";
			if(s_kd.equals("17"))	what = "upper(nvl(a.car_rent_st, ' '))";
			if(s_kd.equals("18"))	what = "upper(nvl(c.rent_dt, ' '))";
			if(s_kd.equals("19"))	what = "upper(nvl(p.reg_dt, ' '))";	

			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17"))		t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}

			query += " order by l.bc_est_id, a.rent_l_cd, to_char(to_date(b.rent_start_dt,'YYYYMMDD')+1,'YYYYMMDD')";


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBcTaeList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//출고전대차 효율등록현황
	public Hashtable getContBcTaeCase(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


     	query = " select  decode(nvl(b.ext_agnt,c.bus_id),'000037',c.mng_id, c.bus_id) bus_id, b.rent_mng_id, b.rent_l_cd, b.rent_st, \n"+
                "        nvl(h.rent_dt,nvl(a.car_rent_dt,c.rent_dt)) as rent_dt, "+
				"        nvl(h.rent_start_dt,a.car_rent_st) as rent_start_dt, "+
				"        nvl(h.rent_end_dt,a.car_rent_et) as rent_end_dt, \n"+
                "        nvl(h.con_mon,trunc(months_between(to_date(b.rent_start_dt,'YYYYMMDD')+1,to_date(a.car_rent_st,'YYYYMMDD')),0)) as con_mon, \n"+
				"        '종료' use_yn, '대차' cont_st, g.user_nm, i.firm_nm, j.car_nm, j.car_no, k.cls_n_mon, \n"+
				"        decode(l.bc_est_id,'','N','Y') bc_est_yn, l.bc_s_c, l.bc_s_g, h.inv_s_amt, h.fee_s_amt, \n"+
				"        a.rent_fee, trunc(a.rent_fee/1.1,0) rent_s_fee, a.rent_fee-trunc(a.rent_fee/1.1,0) rent_v_fee,"+
				"        b.pp_s_amt, b.pp_v_amt,"+
				"        't' add_rent_st,"+
				"        decode(c.car_gu,'1','신차','0','재리스','2','중고차') car_gu, \n"+
				"        decode(c.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, \n"+
				"        decode(b.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				"        decode(c.spr_kd,'0','일반기업','1','우량기업','2','초우량기업','3','신설법인') spr_kd, \n"+
				"        k.sh_year, k.sh_month, k.sh_day, k.sh_day_bas_dt, k.sh_amt, k.sh_ja, k.sh_km, k.sh_km_bas_dt, a.no as taecha_no "+
                " from   taecha a, cont c, fee b, car_etc f, car_nm d,  \n"+
				"	     users g, fee_add h, client i, car_reg j, fee_etc k, fee_etc_add l \n"+
                " where  a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"' \n"+
                "        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
                "        and c.rent_mng_id=b.rent_mng_id and c.rent_l_cd=b.rent_l_cd and b.rent_st='1' \n"+
                "        and c.rent_mng_id=f.rent_mng_id and c.rent_l_cd=f.rent_l_cd \n"+
                "        and f.car_id=d.car_id and f.car_seq=d.car_seq \n"+
				"		 and b.rent_mng_id=k.rent_mng_id(+) and b.rent_l_cd=k.rent_l_cd(+) and b.rent_st=k.rent_st(+)"+
                "        and c.rent_mng_id=h.rent_mng_id(+) and c.rent_l_cd=h.rent_l_cd(+) \n"+
                "        and c.client_id=i.client_id and a.car_mng_id=j.car_mng_id \n"+ 
                "        and decode(nvl(b.ext_agnt,c.bus_id),'000037',c.mng_id, nvl(b.ext_agnt,c.bus_id))=g.user_id\n"+
				"		 and h.rent_mng_id=l.rent_mng_id(+) and h.rent_l_cd=l.rent_l_cd(+) and h.rent_st=l.rent_st(+)"+
				" ";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBcTaeCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//보유차전환시 상태값 초기화
	public boolean updateCarStatCng(String car_mng_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = "";

		query = " update car_reg set "+
				" off_ls='0', prepare='1', secondhand='0' "+
				" where car_mng_id=?";

		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, car_mng_id);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약등록/수정 : 고객우편물주소 수정
	public boolean updatePostAddr(ContBaseBean base)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CONT set "+
						" P_ZIP		= ?, "+
						" P_ADDR	= ?  "+
						" where RENT_L_CD in (select rent_l_cd from cont where nvl(use_yn,'Y')='Y' and client_id = ?)";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, base.getP_zip());
			pstmt.setString(2, base.getP_addr());
			pstmt.setString(3, base.getClient_id());
		    pstmt.executeUpdate();
			pstmt.close();

			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updatePostAddr(ContBaseBean base)]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약등록/수정 : 운전면허번호 수정
	public boolean updateLicAddr(ContBaseBean base)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CONT set "+
						" lic_no		= ?, "+
						" mgr_lic_no	= ?, "+
						" mgr_lic_emp	= ?, "+
						" mgr_lic_rel	= ?  "+
						" where RENT_L_CD in (select rent_l_cd from cont where nvl(use_yn,'Y')='Y' and client_id = ?)";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, base.getLic_no());
			pstmt.setString(2, base.getMgr_lic_no());
			pstmt.setString(3, base.getMgr_lic_emp());
			pstmt.setString(4, base.getMgr_lic_rel());
			pstmt.setString(5, base.getClient_id());
		    pstmt.executeUpdate();
			pstmt.close();

			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateLicAddr(ContBaseBean base)]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	public boolean updateContFeeAddInvAmt(String rent_mng_id, String rent_l_cd, String rent_st, int fee_s_amt, int fee_v_amt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE_ADD set "+
						" INV_S_AMT			= ?, "+
						" INV_V_AMT			= ?  "+	
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ? ";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);			

			pstmt.setInt   (1, fee_s_amt);
			pstmt.setInt   (2, fee_v_amt);			
			pstmt.setString(3, rent_mng_id);
			pstmt.setString(4, rent_l_cd);
			pstmt.setString(5, rent_st);	
		    pstmt.executeUpdate();
		    pstmt.close();
		    conn.commit();
		    	
	  	} catch (Exception e) {
		  	System.out.println("[AddContDatabase:updateContFeeAddInvAmt]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	public boolean updateContFeeAddFeeAmt(String rent_mng_id, String rent_l_cd, String rent_st, int fee_s_amt, int fee_v_amt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE_ADD set "+
						" FEE_S_AMT			= ?, "+
						" FEE_V_AMT			= ?  "+	
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ? ";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);			

			pstmt.setInt   (1, fee_s_amt);
			pstmt.setInt   (2, fee_v_amt);			
			pstmt.setString(3, rent_mng_id);
			pstmt.setString(4, rent_l_cd);
			pstmt.setString(5, rent_st);	
		    pstmt.executeUpdate();
		    pstmt.close();
		    conn.commit();
		    	
	  	} catch (Exception e) {
		  	System.out.println("[AddContDatabase:updateContFeeAddFeeAmt]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	public boolean updateContFeeAddInvAmt(String rent_mng_id, String rent_l_cd, String rent_st, int inv_s_amt, int inv_v_amt, int fee_s_amt, int fee_v_amt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE_ADD set "+
						" INV_S_AMT			= ?, "+
						" INV_V_AMT			= ?, "+	
						" FEE_S_AMT			= ?, "+
						" FEE_V_AMT			= ?  "+	
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and RENT_ST = ? ";


		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);			

			pstmt.setInt   (1, inv_s_amt);
			pstmt.setInt   (2, inv_v_amt);			
			pstmt.setInt   (3, fee_s_amt);
			pstmt.setInt   (4, fee_v_amt);			
			pstmt.setString(5, rent_mng_id);
			pstmt.setString(6, rent_l_cd);
			pstmt.setString(7, rent_st);	
		    pstmt.executeUpdate();
		    pstmt.close();
		    conn.commit();
		    	
	  	} catch (Exception e) {
		  	System.out.println("[AddContDatabase:updateContFeeAddInvAmt]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
	  		conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

 

    public Vector getDlvStats_out(String s_kd, String t_wd, String dt, String t_st_dt, String t_end_dt, String gubun2, String gubun3, String gubun4, String gubun5, String gubun6 )
    {
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select substr(a.car_num, -6, 6)as car_num2, A.user_nm, A.br_id, A.user_id, A.rpt_no, A.rent_l_cd, decode(A.rent_dt, '', '', substr(A.rent_dt, 1, 4)||'-'||substr(A.rent_dt, 5, 2)||'-'||substr(A.rent_dt, 7, 2)) rent_dt, nvl(A.firm_nm, A.client_nm) firm_nm, A.car_no car_no, A.car_nm car_nm, A.car_name car_name, A.car_num,"+
								" decode(A.dlv_dt, '', '', substr(A.dlv_dt, 1, 4)||'-'||substr(A.dlv_dt, 5, 2)||'-'||substr(A.dlv_dt, 7, 2)) dlv_dt,"+
								" decode(A.init_reg_dt, '', '미등록', substr(A.init_reg_dt, 1, 4)||'-'||substr(A.init_reg_dt, 5, 2)||'-'||substr(A.init_reg_dt, 7, 2)) init_reg_dt,"+
								" A.gds_yn gds_yn, a.lpg_yn lpg_yn, B.car_off_nm bus_off, C.car_off_nm dlv_off, B.emp_nm emp_nm, decode(A.one_self,'Y','자체출고') one_self, y.bc_s_f, trunc(y.bc_s_f * 1.1) AS bc_s_f_2 "+
						" from"+
						" ("+
							" select c.use_yn, C.rent_mng_id, C.rent_l_cd, C.rent_dt, nvl(L.firm_nm, L.client_nm) firm_nm, L.client_nm, R.car_no, M.car_nm, R.init_reg_dt, R.car_num,"+
									" C.dlv_dt, P.gds_yn, E.lpg_yn, M.car_nm||' '||N.car_name car_name, P.one_self, P.rpt_no, C.bus_id, J.user_nm, J.br_id, J.user_id"+
							" from cont C, client L, car_reg R, car_pur P, car_etc E, car_nm N, car_mng M, users J, (select * from cls_cont where cls_st='5') S "+
							" ,(SELECT /*+ index(doc_settle DOC_SETTLE_IDX2  ) */ * FROM doc_settle  WHERE doc_st='4' AND doc_step='3' ) d"+
							" where C.client_id = L.client_id and"+
									" C.car_mng_id = R.car_mng_id(+) and"+
								  	" C.rent_mng_id = P.rent_mng_id and"+
								  	" C.rent_l_cd = P.rent_l_cd and"+
								  	" C.rent_mng_id = E.rent_mng_id and"+
								  	" C.rent_l_cd = E.rent_l_cd AND J.user_id = C.bus_id and "+
								  	" E.car_id = N.car_id and E.car_seq = N.car_seq and N.car_comp_id = M.car_comp_id and N.car_cd = M.code "+
								  	" and C.rent_mng_id=S.rent_mng_id(+) and C.reg_dt=S.reg_dt(+) and S.rent_l_cd is null"+
								  	" and C.dlv_dt is not null and C.car_st <> '2'  AND C.rent_l_cd=d.doc_id  "+	  
						" )A,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_nm"+
							" from commi M, car_off_emp E, car_off O"+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '1' and"+
								  	" E.car_off_id = O.car_off_id"+
						" )B,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_nm"+
							" from commi M, car_off_emp E, car_off O"+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '2' and"+
									" E.car_off_id = O.car_off_id"+
						" )C, (select rent_mng_id, rent_l_cd, rent_st, bc_s_f from fee_etc where rent_st ='1') y "+
						" where A.rent_mng_id = B.rent_mng_id(+) and"+
								" A.rent_l_cd = B.rent_l_cd(+) and"+
							 	" A.rent_mng_id = C.rent_mng_id(+) and"+
								" A.rent_l_cd = C.rent_l_cd(+) and"+
								" A.rent_mng_id = y.rent_mng_id(+) and"+
								" A.rent_l_cd = y.rent_l_cd(+) and"+
								" A.one_self = 'Y' and nvl(a.use_yn,'Y') = 'Y' AND a.rent_l_cd NOT IN ('S112HGDR00029','S112KK5R00098')";

		if(gubun2.equals(""))  query +=" and A.dlv_dt like to_char(sysdate,'YYYYMM')||'%' and A.dlv_dt <= to_char(sysdate,'yyyymmdd')  ";

		if(gubun2.equals("2") && gubun3.equals("1"))	query +=" and A.dlv_dt = to_char(sysdate-2,'YYYYMMDD') ";
		else if(gubun2.equals("2") && gubun3.equals("2"))	query +=" and A.dlv_dt = to_char(sysdate-1,'YYYYMMDD') ";
		else if(gubun2.equals("2") && gubun3.equals("3"))	query +=" and A.dlv_dt = to_char(sysdate,'YYYYMMDD') ";

		if(gubun2.equals("4"))	query +=" and A.dlv_dt like '"+gubun4+"%"+gubun5+"%'";
		else if(gubun2.equals("5"))	query +=" and A.dlv_dt like '"+gubun6+"%'";
		else if(gubun2.equals("6")) query +=" and A.dlv_dt between replace(" + t_st_dt + ",'-','') and replace(" + t_end_dt + ",'-','') ";

		if(gubun2.equals("9") && gubun3.equals("S1")) query += " and A.br_id = 'S1' ";
		else if(gubun2.equals("9") && gubun3.equals("B1")) query += " and A.br_id = 'B1' ";
		else if(gubun2.equals("9") && gubun3.equals("D1")) query += " and A.br_id = 'D1' ";

		if(gubun2.equals("10")) query += " and A.user_id = '"+gubun4+"' ";

		if(gubun2.equals("11")) query += " and nvl(C.car_off_nm, ' ') like '%"+gubun5+"%'";

		if(gubun6.equals("1")){ 
			
		}else if(gubun6.equals("2")){ 
			query +=" and A.dlv_dt = to_char(sysdate-1,'YYYYMMDD') ";
		}else if(gubun6.equals("3")){ 
			query +="AND A.dlv_dt like to_char(add_months(sysdate,-1), 'YYYYMM')||'%' ";
		}else if(gubun6.equals("4")){ 
			query +=" and A.dlv_dt like to_char(sysdate,'YYYYMM')||'%' ";
		}

		query += " order by A.dlv_dt, A.init_reg_dt ";

		try
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[ContDatabase:getDlvStats_out]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
    }

	//계약변경으로 대여료스케줄 이관시 기발행 계산서 계약번호 변경
	public boolean updateScdFeeTaxCng(String rent_mng_id, String rent_l_cd, String fee_tm, String new_rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;

		String query  = " update tax set "+
						"        rent_l_cd	= ? "+
						" where  RENT_L_CD = ? and gubun='1' and to_number(fee_tm)>=to_number(?) "+
						"        and tax_no in (select a.tax_no from tax a, tax b where a.rent_l_cd=? and a.doctype is null and a.tax_no=b.m_tax_no(+) and decode(b.doctype,'04','C',a.tax_st)<>'C') "+
						" ";

		String query2 = " update tax_item_list set "+
						"        rent_l_cd	= ? "+
						" where  RENT_L_CD = ? and gubun='1' and to_number(tm)>=to_number(?) "+
						"        and item_id in (select a.item_id from tax a, tax b where a.rent_l_cd=? and a.doctype is null and a.tax_no=b.m_tax_no(+) and decode(b.doctype,'04','C',a.tax_st)<>'C') "+
						" ";
		
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1, new_rent_l_cd);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, fee_tm);
			pstmt.setString(4, rent_l_cd);
		    pstmt.executeUpdate();

			pstmt = conn.prepareStatement(query2);			
			pstmt.setString(1, new_rent_l_cd);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, fee_tm);
			pstmt.setString(4, rent_l_cd);
		    pstmt.executeUpdate();

			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateScdFeeTaxCng]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//차종정보
	public Hashtable getCaridCarseq(String car_id, String car_seq)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


     	query = " select a.*, b.car_nm \n"+
                " from   car_nm a, car_mng b  \n"+
                " where  a.car_id='"+car_id+"' and a.car_seq='"+car_seq+"' \n"+
                "        and a.car_comp_id=b.car_comp_id and a.car_cd=b.code \n"+
				" ";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCaridCarseq]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//연대보증인 리스트
	public Vector getContGrtSucList(String s_kd, String t_wd, String rent_l_cd, String rent_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = ""; 

		query = " select a.rent_mng_id, a.rent_l_cd, b.car_no, b.car_nm, c.grt_suc_yn, c.grt_amt_s, e.firm_nm, f.cls_dt , a.rent_dt, a.rent_end_dt "+
				" from   cont a, car_reg b, fee c, (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) d, client e, cls_cont f "+
				" where  a.car_mng_id=b.car_mng_id(+) "+
				"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd "+
				"        and c.rent_mng_id=d.rent_mng_id and c.rent_l_cd=d.rent_l_cd and c.rent_st=d.rent_st "+
				"        and a.client_id=e.client_id "+
				"        and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+)  "+
				"        and a.rent_l_cd <> '"+rent_l_cd+"' "+
				" ";

		String what = "";

		if(s_kd.equals("1"))	what = "upper(nvl(a.client_id, ' '))";			
		if(s_kd.equals("2"))	what = "upper(nvl(e.firm_nm, ' '))";
		if(s_kd.equals("3"))	what = "upper(nvl(b.car_no, ' '))";
			
		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";
		}else{

		}	

		query += " order by a.use_yn, f.cls_dt desc, a.rent_dt desc ";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContGrtSucList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//연대보증인 리스트
	public Vector getContGrtSucList(String s_kd, String t_wd, String rent_l_cd, String rent_dt, String user_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select a.rent_mng_id, a.rent_l_cd, b.car_no, b.car_nm, c.grt_suc_yn, c.grt_amt_s, e.firm_nm, f.cls_dt "+
				" from   cont a, car_reg b, fee c, (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) d, client e, cls_cont f, (select * from commi where agnt_st='1') g, USERS h "+
				" where  a.car_mng_id=b.car_mng_id(+) "+
				"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd "+
				"        and c.rent_mng_id=d.rent_mng_id and c.rent_l_cd=d.rent_l_cd and c.rent_st=d.rent_st "+
				"        and a.client_id=e.client_id "+
				"        and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+)  "+
				"        and a.rent_l_cd <> '"+rent_l_cd+"' "+
				"        and a.rent_dt <= '"+rent_dt+"' "+
				"        and a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+) "+
				"        and g.emp_id=h.sa_code(+) "+
				"        and (a.bus_id='"+user_id+"' or (g.emp_id=h.sa_code AND h.user_id='"+user_id+"') ) "+
				" ";

		String what = "";

		if(s_kd.equals("1"))	what = "upper(nvl(a.client_id, ' '))";			
		if(s_kd.equals("2"))	what = "upper(nvl(e.firm_nm, ' '))";
		if(s_kd.equals("3"))	what = "upper(nvl(b.car_no, ' '))";
			
		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";
		}else{

		}	

		query += " order by a.use_yn, f.cls_dt desc, a.rent_dt desc ";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContGrtSucList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//대차계약 원계약 조회
	public Vector getContSucBaseList(String s_kd, String t_wd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select a.rent_mng_id, a.rent_l_cd, b.car_no, b.car_nm, e.firm_nm, f.cls_dt, c.rent_start_dt, c.rent_end_dt "+
				" from   cont a, car_reg b, fee c, (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) d, client e, cls_cont f "+
				" where  a.car_mng_id=b.car_mng_id "+
				"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd "+
				"        and c.rent_mng_id=d.rent_mng_id and c.rent_l_cd=d.rent_l_cd and c.rent_st=d.rent_st "+
				"        and a.client_id=e.client_id "+
				"        and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+)  "+
				" ";

		String what = "";

		if(s_kd.equals("1"))	what = "upper(nvl(a.client_id, ' '))";			
		if(s_kd.equals("2"))	what = "upper(nvl(e.firm_nm, ' '))";
		if(s_kd.equals("3"))	what = "upper(nvl(b.car_no, ' '))";
			
		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";
		}else{

		}	

		query += " order by c.rent_end_dt ";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContSucBaseList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//대차계약 원계약 조회
	public Vector getContSucBaseList(String s_kd, String t_wd, String user_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select a.rent_mng_id, a.rent_l_cd, b.car_no, b.car_nm, e.firm_nm, f.cls_dt, c.rent_start_dt, c.rent_end_dt "+
				" from   cont a, car_reg b, fee c, (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) d, client e, cls_cont f, (select * from commi where agnt_st='1') g, USERS h "+
				" where  a.car_mng_id=b.car_mng_id "+
				"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd "+
				"        and c.rent_mng_id=d.rent_mng_id and c.rent_l_cd=d.rent_l_cd and c.rent_st=d.rent_st "+
				"        and a.client_id=e.client_id "+
				"        and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+)  "+
				"        and a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+)  "+
				"        and g.emp_id=h.sa_code(+) "+
				"        and (a.bus_id='"+user_id+"' or (g.emp_id=h.sa_code AND h.user_id='"+user_id+"') ) "+
				" ";


		String what = "";

		if(s_kd.equals("1"))	what = "upper(nvl(a.client_id, ' '))";			
		if(s_kd.equals("2"))	what = "upper(nvl(e.firm_nm, ' '))";
		if(s_kd.equals("3"))	what = "upper(nvl(b.car_no, ' '))";
			
		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";
		}else{

		}	

		query += " order by c.rent_end_dt ";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContSucBaseList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}


	//계약수정 : 차량정보 조회 (car_etc,car_nm,code)
	public ContCarBean getContCarMaxNew(String car_mng_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCarBean car = new ContCarBean();
		String query = "";
		query = " select * from car_etc where (RENT_MNG_ID||RENT_L_CD) in (select max(rent_mng_id||rent_l_cd) from cont where car_mng_id=? group by car_mng_id) ";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, car_mng_id);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				car.setRent_mng_id		(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				car.setRent_l_cd		(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				car.setCar_id			(rs.getString("CAR_ID")==null?"":rs.getString("CAR_ID"));
				car.setColo				(rs.getString("COLO")==null?"":rs.getString("COLO"));
				car.setEx_gas			(rs.getString("EX_GAS")==null?"":rs.getString("EX_GAS"));
				car.setImm_amt			(rs.getString("IMM_AMT")==null?0:Integer.parseInt(rs.getString("IMM_AMT")));
				car.setOpt				(rs.getString("OPT")==null?"":rs.getString("OPT"));
				car.setLpg_yn			(rs.getString("LPG_YN")==null?"":rs.getString("LPG_YN"));
				car.setLpg_setter		(rs.getString("LPG_SETTER")==null?"":rs.getString("LPG_SETTER"));
				car.setLpg_price		(rs.getString("LPG_PRICE")==null?0:Integer.parseInt(rs.getString("LPG_PRICE")));
				car.setLpg_pay_dt		(rs.getString("LPG_PAY_DT")==null?"":rs.getString("LPG_PAY_DT"));
				car.setCar_cs_amt		(rs.getString("CAR_CS_AMT")==null?0:Integer.parseInt(rs.getString("CAR_CS_AMT")));
				car.setCar_cv_amt		(rs.getString("CAR_CV_AMT")==null?0:Integer.parseInt(rs.getString("CAR_CV_AMT")));
				car.setCar_fs_amt		(rs.getString("CAR_FS_AMT")==null?0:Integer.parseInt(rs.getString("CAR_FS_AMT")));
				car.setCar_fv_amt		(rs.getString("CAR_FV_AMT")==null?0:Integer.parseInt(rs.getString("CAR_FV_AMT")));
				car.setOpt_cs_amt		(rs.getString("OPT_CS_AMT")==null?0:Integer.parseInt(rs.getString("OPT_CS_AMT")));
				car.setOpt_cv_amt		(rs.getString("OPT_CV_AMT")==null?0:Integer.parseInt(rs.getString("OPT_CV_AMT")));
				car.setOpt_fs_amt		(rs.getString("OPT_FS_AMT")==null?0:Integer.parseInt(rs.getString("OPT_FS_AMT")));
				car.setOpt_fv_amt		(rs.getString("OPT_FV_AMT")==null?0:Integer.parseInt(rs.getString("OPT_FV_AMT")));
				car.setClr_cs_amt		(rs.getString("CLR_CS_AMT")==null?0:Integer.parseInt(rs.getString("CLR_CS_AMT")));
				car.setClr_cv_amt		(rs.getString("CLR_CV_AMT")==null?0:Integer.parseInt(rs.getString("CLR_CV_AMT")));
				car.setClr_fs_amt		(rs.getString("CLR_FS_AMT")==null?0:Integer.parseInt(rs.getString("CLR_FS_AMT")));
				car.setClr_fv_amt		(rs.getString("CLR_FV_AMT")==null?0:Integer.parseInt(rs.getString("CLR_FV_AMT")));
				car.setSd_cs_amt		(rs.getString("SD_CS_AMT")==null?0:Integer.parseInt(rs.getString("SD_CS_AMT")));
				car.setSd_cv_amt		(rs.getString("SD_CV_AMT")==null?0:Integer.parseInt(rs.getString("SD_CV_AMT")));
				car.setSd_fs_amt		(rs.getString("SD_FS_AMT")==null?0:Integer.parseInt(rs.getString("SD_FS_AMT")));
				car.setSd_fv_amt		(rs.getString("SD_FV_AMT")==null?0:Integer.parseInt(rs.getString("SD_FV_AMT")));
				car.setDc_cs_amt		(rs.getString("DC_CS_AMT")==null?0:Integer.parseInt(rs.getString("DC_CS_AMT")));
				car.setDc_cv_amt		(rs.getString("DC_CV_AMT")==null?0:Integer.parseInt(rs.getString("DC_CV_AMT")));
				car.setDc_fs_amt		(rs.getString("DC_FS_AMT")==null?0:Integer.parseInt(rs.getString("DC_FS_AMT")));
				car.setDc_fv_amt		(rs.getString("DC_FV_AMT")==null?0:Integer.parseInt(rs.getString("DC_FV_AMT")));
				car.setPurc_gu			(rs.getString("PURC_GU")==null?"":rs.getString("PURC_GU"));
				car.setCar_ext			(rs.getString("CAR_EXT")==null?"":rs.getString("CAR_EXT"));
				car.setBae4				(rs.getString("BAE4")==null?"":rs.getString("BAE4"));
				car.setGi_st			(rs.getString("GI_ST")==null?"":rs.getString("GI_ST"));
				car.setAdd_opt			(rs.getString("ADD_OPT")==null?"":rs.getString("ADD_OPT"));
				car.setOpt_code			(rs.getString("OPT_CODE")==null?"":rs.getString("OPT_CODE"));
				car.setCar_seq			(rs.getString("CAR_SEQ")==null?"":rs.getString("CAR_SEQ"));
				car.setReg_est_dt		(rs.getString("REG_EST_DT")==null?"":rs.getString("REG_EST_DT"));
				car.setSun_per			(rs.getString("SUN_PER")==null?0:Integer.parseInt(rs.getString("SUN_PER")));
				car.setExtra_set		(rs.getString("EXTRA_SET")==null?"":rs.getString("EXTRA_SET"));
				car.setRemark			(rs.getString("REMARK")==null?"":rs.getString("REMARK"));
				car.setS_dc1_re			(rs.getString("S_DC1_RE")==null?"":rs.getString("S_DC1_RE"));
				car.setS_dc1_yn			(rs.getString("S_DC1_YN")==null?"":rs.getString("S_DC1_YN"));
				car.setS_dc1_amt		(rs.getString("S_DC1_AMT")==null?0:Integer.parseInt(rs.getString("S_DC1_AMT")));
				car.setS_dc2_re			(rs.getString("S_DC2_RE")==null?"":rs.getString("S_DC2_RE"));    
				car.setS_dc2_yn			(rs.getString("S_DC2_YN")==null?"":rs.getString("S_DC2_YN"));    
				car.setS_dc2_amt		(rs.getString("S_DC2_AMT")==null?0:Integer.parseInt(rs.getString("S_DC2_AMT")));  
				car.setS_dc3_re			(rs.getString("S_DC3_RE")==null?"":rs.getString("S_DC3_RE"));    
				car.setS_dc3_yn			(rs.getString("S_DC3_YN")==null?"":rs.getString("S_DC3_YN"));    
				car.setS_dc3_amt		(rs.getString("S_DC3_AMT")==null?0:Integer.parseInt(rs.getString("S_DC3_AMT")));  
				car.setPay_st			(rs.getString("PAY_ST")==null?"":rs.getString("PAY_ST"));
				car.setSpe_tax			(rs.getString("SPE_TAX")==null?0:Integer.parseInt(rs.getString("SPE_TAX")));
				car.setEdu_tax			(rs.getString("EDU_TAX")==null?0:Integer.parseInt(rs.getString("EDU_TAX")));
				car.setCar_origin		(rs.getString("CAR_ORIGIN")==null?"":rs.getString("CAR_ORIGIN"));
				car.setSh_car_amt		(rs.getString("sh_car_amt")==null?0:Integer.parseInt(rs.getString("sh_car_amt")));
				car.setSh_year			(rs.getString("sh_year")==null?"":rs.getString("sh_year"));
				car.setSh_month			(rs.getString("sh_month")==null?"":rs.getString("sh_month"));
				car.setSh_day			(rs.getString("sh_day")==null?"":rs.getString("sh_day"));
				car.setSh_day_bas_dt	(rs.getString("sh_day_bas_dt")==null?"":rs.getString("sh_day_bas_dt"));
				car.setSh_amt			(rs.getString("sh_amt")==null?0:Integer.parseInt(rs.getString("sh_amt")));
				car.setSh_ja			(rs.getString("sh_ja")==null?0:AddUtil.parseFloat(rs.getString("sh_ja")));
				car.setSh_km			(rs.getString("sh_km")==null?0:Integer.parseInt(rs.getString("sh_km")));
				car.setSh_km_bas_dt		(rs.getString("sh_km_bas_dt")==null?"":rs.getString("sh_km_bas_dt"));
				car.setLpg_kit			(rs.getString("lpg_kit")==null?"":rs.getString("lpg_kit"));
				car.setAdd_opt_amt		(rs.getString("ADD_OPT_AMT")==null?0:Integer.parseInt(rs.getString("ADD_OPT_AMT")));	
				car.setS_dc1_re_etc		(rs.getString("S_DC1_RE_ETC")==null?"":rs.getString("S_DC1_RE_ETC"));
				car.setS_dc2_re_etc		(rs.getString("S_DC2_RE_ETC")==null?"":rs.getString("S_DC2_RE_ETC"));
				car.setS_dc3_re_etc		(rs.getString("S_DC3_RE_ETC")==null?"":rs.getString("S_DC3_RE_ETC"));
				car.setS_dc1_per		(rs.getString("S_DC1_PER")==null?0:AddUtil.parseFloat(rs.getString("S_DC1_PER")));
				car.setS_dc2_per		(rs.getString("S_DC2_PER")==null?0:AddUtil.parseFloat(rs.getString("S_DC2_PER")));
				car.setS_dc3_per		(rs.getString("S_DC3_PER")==null?0:AddUtil.parseFloat(rs.getString("S_DC3_PER")));
				car.setCar_amt_dt		(rs.getString("car_amt_dt")==null?"":rs.getString("car_amt_dt"));			
				car.setExtra_amt		(rs.getString("EXTRA_AMT")==null?0:Integer.parseInt(rs.getString("EXTRA_AMT")));	
				car.setIn_col			(rs.getString("in_col")==null?"":rs.getString("in_col"));
				car.setHipass_yn		(rs.getString("hipass_yn")==null?"":rs.getString("hipass_yn"));
				car.setCar_tax_dt		(rs.getString("car_tax_dt")==null?"":rs.getString("car_tax_dt"));
				car.setImport_card_amt	(rs.getString("import_card_amt")==null?0:Integer.parseInt(rs.getString("import_card_amt")));
				car.setImport_cash_back	(rs.getString("import_cash_back")==null?0:Integer.parseInt(rs.getString("import_cash_back")));
				car.setImport_bank_amt	(rs.getString("import_bank_amt")==null?0:Integer.parseInt(rs.getString("import_bank_amt")));
				car.setR_import_cash_back	(rs.getString("r_import_cash_back")==null?0:Integer.parseInt(rs.getString("r_import_cash_back")));
				car.setR_import_bank_amt	(rs.getString("r_import_bank_amt")==null?0:Integer.parseInt(rs.getString("r_import_bank_amt")));
				car.setTint_b_yn		(rs.getString("tint_b_yn")==null?"":rs.getString("tint_b_yn"));
				car.setTint_s_yn		(rs.getString("tint_s_yn")==null?"":rs.getString("tint_s_yn"));
				car.setTint_n_yn		(rs.getString("tint_n_yn")==null?"":rs.getString("tint_n_yn"));
				car.setTint_bn_yn		(rs.getString("tint_bn_yn")==null?"":rs.getString("tint_bn_yn"));
				car.setTint_bn_nm		(rs.getString("tint_bn_nm")==null?"":rs.getString("tint_bn_nm"));
				car.setTint_s_per 		(rs.getString("tint_s_per")==null?0:Integer.parseInt(rs.getString("tint_s_per")));
				car.setNew_license_plate	(rs.getString("new_license_plate")==null?"":rs.getString("new_license_plate"));
				car.setTint_cons_yn		(rs.getString("tint_cons_yn")==null?"":rs.getString("tint_cons_yn"));
				car.setTint_cons_amt 	(rs.getString("tint_cons_amt")==null?0:Integer.parseInt(rs.getString("tint_cons_amt")));
				car.setServ_b_yn		(rs.getString("serv_b_yn")==null?"":rs.getString("serv_b_yn"));
				car.setServ_sc_yn		(rs.getString("serv_sc_yn")==null?"":rs.getString("serv_sc_yn"));
				car.setJg_opt_st		(rs.getString("jg_opt_st")==null?"":rs.getString("jg_opt_st"));
				car.setJg_col_st		(rs.getString("jg_col_st")==null?"":rs.getString("jg_col_st"));
				car.setTax_dc_s_amt		(rs.getString("tax_dc_s_amt")==null?0:Integer.parseInt(rs.getString("tax_dc_s_amt")));
				car.setTax_dc_v_amt	  	(rs.getString("tax_dc_v_amt")==null?0:Integer.parseInt(rs.getString("tax_dc_v_amt")));
				car.setEcar_pur_sub_amt	(rs.getString("ecar_pur_sub_amt")==null?0:Integer.parseInt(rs.getString("ecar_pur_sub_amt")));
				car.setEcar_pur_sub_st 	(rs.getString("ecar_pur_sub_st")==null?"":rs.getString("ecar_pur_sub_st"));
				car.setConti_rat        (rs.getString("conti_rat")==null?"":rs.getString("conti_rat"));
				car.setCommi_s_amt		(rs.getString("commi_s_amt")==null?0:Integer.parseInt(rs.getString("commi_s_amt")));
				car.setCommi_v_amt		(rs.getString("commi_v_amt")==null?0:Integer.parseInt(rs.getString("commi_v_amt")));
				car.setAccid_serv_amt	(rs.getString("accid_serv_amt")==null?0:Integer.parseInt(rs.getString("accid_serv_amt")));
				car.setSh_est_amt		(rs.getString("sh_est_amt")==null?0:Integer.parseInt(rs.getString("sh_est_amt")));
				car.setSh_init_reg_dt	(rs.getString("sh_init_reg_dt")==null?"":rs.getString("sh_init_reg_dt"));
				car.setAccid_serv_cont	(rs.getString("accid_serv_cont")==null?"":rs.getString("accid_serv_cont"));
				car.setJg_tuix_st		(rs.getString("jg_tuix_st")==null?"":rs.getString("jg_tuix_st"));
				car.setJg_tuix_opt_st	(rs.getString("jg_tuix_opt_st")==null?"":rs.getString("jg_tuix_opt_st"));
				car.setTint_eb_yn		(rs.getString("tint_eb_yn")==null?"":rs.getString("tint_eb_yn"));
				car.setStorage_s_amt	(rs.getString("storage_s_amt")==null?0:Integer.parseInt(rs.getString("storage_s_amt")));
				car.setStorage_v_amt	(rs.getString("storage_v_amt")==null?0:Integer.parseInt(rs.getString("storage_v_amt")));

			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCarNew]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return car;
		}				
	}

	//계약변경 확인자 미등록분 처리
	public Vector getContNoCngNoChker()
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = //계약승계 변경 미처리건
			        " select '계약승계' st, rent_mng_id, rent_l_cd, rent_st from fee_etc "+
					" where  (rent_mng_id,rent_l_cd) in "+
					"        (select rent_mng_id, rent_l_cd from cont where (rent_mng_id,reg_dt) in (select a.rent_mng_id, a.reg_dt from cls_cont a where a.cls_st in ('4','5') and a.reg_dt>= '20100422')) "+
					" and    cng_chk_id is null "+
					" union all "+
					//연장 변경 미처리건
					" select '계약연장' st, rent_mng_id, rent_l_cd, rent_st from fee_etc "+
					" where  to_char(reg_dt,'YYYYMMDD')>='20100422' and rent_st='2' "+
					" and    cng_chk_id is null "+
					" ";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContNoCngNoChker]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//차량회수리스트
	public Vector getCarCallInStatList(String s_kd, String t_wd, String gubun1)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select c.firm_nm, d.car_no, d.car_nm, e.user_nm, f.cls_dt, \n"+
				"        decode(a.out_dt,'','반납중','해지완료') in_stat, \n"+
				"        a.* \n"+
				" from   car_call_in a, cont b, client c, car_reg d, users e, cls_cont f \n"+
				" where  a.in_st='3' \n"+
				" and    a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd \n"+
				" and    b.client_id=c.client_id \n"+
				" and    b.car_mng_id=d.car_mng_id \n"+
				" and    b.bus_id2=e.user_id \n"+
				" and    a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+) \n"+
				" ";
		
			//계약상태
		if(gubun1.equals("1")) query += " and a.out_dt is null ";
		if(gubun1.equals("2")) query += " and a.out_dt is not null ";
	
		query += " order by a.in_dt ";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarCallInStatList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계출관리-출고전대차현황
	public Vector getContTaechaStatList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  a.rent_mng_id, a.rent_l_cd, e.rent_st, b.use_yn, b.rent_dt, b.car_st, c.firm_nm, u.user_nm, \n"+
					"        d.car_no as a_car_no, d.car_nm as a_car_nm, e.rent_start_dt, (e.fee_s_amt+e.fee_v_amt) fee_amt, \n"+
					"        a.car_no as b_car_no, d2.car_nm as b_car_nm, a.car_rent_st, a.car_rent_et, a.rent_fee, nvl(a.rent_inv,h.fee_s_amt+h.fee_v_amt) rent_inv, \n"+
					"        decode(a.rent_fee_st,'0','미표기','1','월렌트'||a.rent_fee_cls) rent_fee_cls, \n"+
					"        decode(a.req_st,'1','청구','0','무상대차') req_st, \n"+
					"        decode(a.tae_st,'1','발행','0','미발행') tae_st, \n"+
					"        decode(nvl(f2.scd_cnt,0),0,'미등록',f2.scd_cnt||'회') a_scd_cnt, f2.use_s_dt a_use_s_dt, f2.use_e_dt a_use_e_dt, \n"+
					"        decode(nvl(f.scd_cnt,0),0,'미등록',f.scd_cnt||'회') b_scd_cnt, f.use_s_dt b_use_s_dt, f.use_e_dt b_use_e_dt, \n"+
					"        substr(h.reg_dt,1,8) as est_reg_dt, substr(h.reg_id,1,6) reg_id, h.rent_dt as est_rent_dt, h.est_id, \n"+
					"        i.rent_start_dt as t_rent_start_dt, i.rent_end_dt as t_rent_end_dt, nvl(a.rent_fee,i.fee_s_amt+i.fee_v_amt) as t_fee_amt, "+
					"        trunc(((nvl(a.rent_fee,i.fee_s_amt+i.fee_v_amt))/decode(nvl(a.rent_inv,h.fee_s_amt+h.fee_v_amt),0,null,nvl(a.rent_inv,h.fee_s_amt+h.fee_v_amt))-1)*100,2) AS  per, \n"+
					"        a.no as taecha_no \n"+
					" from   taecha a, cont b, client c, car_reg d, fee e, car_reg d2, cont_etc t, users u, \n"+
					"        (select rent_mng_id, rent_l_cd, count(*) scd_cnt, min(use_s_dt) use_s_dt, max(use_e_dt) use_e_dt from scd_fee where rent_st='1' and tm_st2='2' and tm_st1='0' group by rent_mng_id, rent_l_cd) f, \n"+
					"        (select rent_mng_id, rent_l_cd, count(*) scd_cnt, min(use_s_dt) use_s_dt, max(use_e_dt) use_e_dt from scd_fee where rent_st='1' and tm_st2='0' and tm_st1='0' group by rent_mng_id, rent_l_cd) f2, \n"+
					"        (select * from fee_etc_add where rent_st='t') g, (select * from fee_add where rent_st='t') i, estimate h "+
					" where  a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd \n"+
					" and    b.client_id=c.client_id \n"+
					" and    b.car_mng_id=d.car_mng_id(+) \n"+
					" and    a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd and e.rent_st='1' \n"+
					" and    a.car_mng_id=d2.car_mng_id \n"+
					" and    a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+) \n"+
					" and    a.rent_mng_id=f2.rent_mng_id(+) and a.rent_l_cd=f2.rent_l_cd(+) \n"+
					" and    a.rent_mng_id=t.rent_mng_id(+) and a.rent_l_cd=t.rent_l_cd(+) \n"+
					" and    b.bus_id=u.user_id "+
					" and    a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+) \n"+
					" and    a.rent_mng_id=i.rent_mng_id(+) and a.rent_l_cd=i.rent_l_cd(+) \n"+
					//" and    g.bc_est_id=h.est_id(+) and nvl(g.rent_st,'t')='t' "+			
					" and    a.est_id=h.est_id(+)  "+					
					" ";

	 
			//계약상태
			if(gubun1.equals("Y")) query += " and b.use_yn='Y'";
			if(gubun1.equals("N")) query += " and b.use_yn='N'";
			if(gubun1.equals("0")) query += " and b.use_yn is null";

			//대차여부
			if(gubun3.equals("1")) query += " and e.rent_start_dt is null and b.use_yn='Y'";
			if(gubun3.equals("2")) query += " and e.rent_start_dt is not null and b.use_yn='Y'";
			if(gubun3.equals("3")) query += " and e.grt_amt_s>0";
			if(gubun3.equals("4")) query += " and e.ifee_s_amt>0";
			if(gubun3.equals("5")) query += " and e.pp_s_amt>0";			
			if(gubun3.equals("6")) query += " and d.car_no=a.car_no";
			if(gubun3.equals("7")) query += " and nvl(d.car_no,'-')<>a.car_no";

			//대차여부
			if(gubun2.equals("1")) query += " and a.req_st='1'";
			if(gubun2.equals("2")) query += " and a.req_st='0'";


			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(a.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(u.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(c.client_nm, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(nvl(e.rent_dt,b.rent_dt), ' '))";
			if(s_kd.equals("15"))	what = "upper(nvl(e.rent_start_dt, ' '))";
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}	

			query += " order by b.use_yn desc, decode(e.rent_start_dt,'',0,1), a.car_rent_st";



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContTaechaStatList]\n"+e);
			System.out.println("[AddContDatabase:getContTaechaStatList]\n"+query);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }



	//차종정보
	public Hashtable getCommi2(String mng_id, String l_cd, String agnt_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


     	query = " select c.car_off_tel, c.car_off_fax, a.rent_mng_id, a.rent_l_cd, a.emp_id, a.agnt_st, a.commi, a.inc_amt, a.res_amt, a.tot_amt, a.dif_amt, a.sup_dt, a.rel,"+
				" a.commi_car_amt, a.comm_rt, a.comm_r_rt, a.ch_remark, a.ch_sac_id,"+
				" nvl(a.emp_bank,b.emp_bank) emp_bank, nvl(a.emp_acc_no,b.emp_acc_no) emp_acc_no, nvl(a.emp_acc_nm,b.emp_acc_nm) emp_acc_nm,"+
				" b.emp_nm, c.AGNT_NM,  decode(b.cust_st,'1','갑종근로소득','2','사업소득','3','기타사업소득') cust_st, c.car_off_id, c.car_off_nm, decode(c.car_off_st,'1','지점','2','영업소') car_off_st, c.car_comp_id,"+
				" a.req_id, to_char(a.req_dt,'YYYYMMDD') req_dt, a.req_cont,"+
				" a.commi_car_st, a.rec_incom_yn, a.rec_incom_st, a.rec_ssn, a.rec_zip, a.rec_addr, a.file_name1, a.file_name2,"+
				" a.add_amt1, a.add_amt2, a.add_amt3, a.add_cau1, a.add_cau2, a.add_cau3, a.inc_per, a.res_per, a.tot_per, a.data_no, a.seqidx, a.add_st1, a.add_st2, a.add_st3, a.file_gubun1, a.file_gubun2"+
				" from commi a, car_off_emp b, car_off c"+
				" where a.RENT_MNG_ID = '"+mng_id+"' and a.RENT_L_CD = '"+l_cd+"' and a.agnt_st='"+agnt_st+"'"+
				" and a.emp_id=b.emp_id(+) and b.car_off_id=c.car_off_id(+)";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCaridCarseq]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//동일거래처 영업담당자 현황
	public Vector getLcRentClientBusid2(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select bus_id2, nvl(count(*),0) cnt from cont_n_view where client_id='"+client_id+"' and nvl(use_yn,'Y')='Y' group by bus_id2";

		try {
				
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//동일거래처 영업담당자 리스트
	public Vector getLcRentClientBusid2List(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select decode(a.rent_st,'1','신차','3','대차','4','증차') rent_st, a.use_yn, a.rent_l_cd, a.rent_dt, "+
				"        a.rent_start_dt, a.rent_end_dt, g.cls_dt, "+
				"        decode(a.car_mng_id,'','미등록',c.car_no) car_no, a.bus_id2, f.user_nm, "+
				"        d.mng_br_id, "+
				"        b.r_site, b.addr, "+
				"        e.mgr_nm, e.com_nm, e.mgr_dept, e.mgr_title, e.mgr_addr, e.mgr_email, "+
				"        d.est_area, d.county, f.br_id as user_br_id "+
				" from   cont a, client_site b, car_reg c, cont_etc d,  "+
				"        (select * from car_mgr where mgr_st='차량이용자') e, "+
				"        users f, cls_cont g "+
				" where  a.client_id='"+client_id+"' "+
				"        and a.client_id=b.client_id(+) and a.r_site=b.seq(+) "+
				"        and a.car_mng_id=c.car_mng_id(+) "+
				"        and a.rent_mng_id=d.rent_mng_id(+) and a.rent_l_cd=d.rent_l_cd(+) "+
				"        and a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd "+
				"        and a.bus_id2=f.user_id "+
				"        and a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+) "+
				" order by decode(a.use_yn,'',0,'Y',1,'N',2), decode(a.use_yn,'Y',a.rent_start_dt,'N',g.cls_dt) desc";

		try {
				
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//동일거래처 영업담당자 리스트
	public Vector getLcRentClientBusid2RegStep2List(String client_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select decode(a.rent_st,'1','신차','3','대차','4','증차') rent_st, a.use_yn, a.rent_l_cd, a.rent_dt, "+
				"        a.rent_start_dt, a.rent_end_dt, g.cls_dt, "+
				"        decode(a.car_mng_id,'','미등록',c.car_no) car_no, a.bus_id2, f.user_nm, "+
				"        d.mng_br_id, "+
				"        b.r_site, b.addr, "+
				"        e.mgr_nm, e.com_nm, e.mgr_dept, e.mgr_title, e.mgr_addr, e.mgr_email, "+
				"        d.est_area, d.county, f.br_id as user_br_id "+
				" from   cont a, client_site b, car_reg c, cont_etc d,  "+
				"        (select * from car_mgr where mgr_st='차량이용자') e, "+
				"        users f, cls_cont g "+
				" where  a.client_id='"+client_id+"' and a.rent_l_cd <>'"+rent_l_cd+"' "+
				"        and a.client_id=b.client_id(+) and a.r_site=b.seq(+) "+
				"        and a.car_mng_id=c.car_mng_id(+) "+
				"        and a.rent_mng_id=d.rent_mng_id(+) and a.rent_l_cd=d.rent_l_cd(+) "+
				"        and a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd "+
				"        and a.bus_id2=f.user_id "+
				"        and a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+) "+
				" order by decode(a.use_yn,'',0,'Y',1,'N',2), decode(a.use_yn,'Y',a.rent_start_dt,'N',g.cls_dt) desc";

		try {
				
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//대차원계약 차종코드별변수 차명
	public Hashtable getSucContInfo(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


     	query = " select c.* \n"+
				" from   car_etc a, car_nm b, esti_jg_var c, \n"+
				"        (select sh_code, max(seq) seq from esti_jg_var group by sh_code ) d \n"+
				" where  a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"' \n"+
				"        and a.car_id=b.car_id and a.car_seq=b.car_seq \n"+
				"        and b.jg_code=c.sh_code \n"+
				"        and c.sh_code=d.sh_code and c.seq=d.seq";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSucContInfo]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }

	//계출관리-중도해지위약면제현황
	public Vector getContClsPerZeroStatList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select b.rent_mng_id, b.rent_l_cd, b.rent_st, b.cls_per, b.cls_r_per, \n"+
					"        d.car_no, d.car_nm, e.firm_nm, nvl(b.rent_dt,a.rent_dt) rent_dt, b.rent_start_dt, b.rent_end_dt, f.user_nm \n"+
					" from   cont a, fee b, (select rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_l_cd) c, \n"+
					"        car_reg d, client e, users f \n"+
					" where  a.use_yn='Y' and a.car_st in ('1','3') \n"+
					"        and a.rent_l_cd=b.rent_l_cd \n"+
					"        and b.rent_l_cd=c.rent_l_cd and b.rent_st=c.rent_st \n"+
					"        and b.rent_start_dt is not null \n"+
					"        and to_number(nvl(b.cls_r_per,'0'))=0 \n"+
					"        and a.car_mng_id=d.car_mng_id \n"+
					"        and a.client_id=e.client_id \n"+
					"        and a.bus_id=f.user_id \n"+
					" ";

			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(e.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(f.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(e.client_nm, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(nvl(b.rent_dt,a.rent_dt), ' '))";
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}	

			query += " order by b.rent_start_dt desc, nvl(b.rent_dt,a.rent_dt) desc ";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContClsPerZeroStatList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//해지계약 대여료스케줄 연체료계산 오류현황
	public Vector getClsFeeScdDlyList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select a.*, b.firm_nm, cr.car_no, cc.cls_dt, c.use_cnt, b.use_yn, b.car_st, replace(b.rent_dt,'-','') rent_dt  \n"+
					" from \n"+
					"        (select a.rent_mng_id, a.rent_l_cd, count(0) scd_cnt, max(to_number(a.rent_st)) rent_st, sum(a.dly_fee) dly_fee \n"+
					"         from   scd_fee a, cls_cont b \n"+
					"         where  a.bill_yn='N' and a.dly_fee>0 and a.rc_dt is null \n"+
					"                and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd \n"+
					"                and a.r_fee_est_dt > b.cls_dt \n"+
					"         group by a.rent_mng_id, a.rent_l_cd \n"+
					"        ) a, cont_n_view b, car_reg cr, cls_cont cc, (select client_id, count(*) use_cnt from cont where use_yn='Y' group by client_id) c \n"+
					" where  a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.client_id=c.client_id(+)\n"+
					"    and   b.rent_mng_id=cc.rent_mng_id(+) and b.rent_l_cd=cc.rent_l_cd(+) and b.car_mng_id=cr.car_mng_id(+)\n"+
					" ";


			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(cr.car_no, ' '))";		
			if(s_kd.equals("13"))	what = "upper(nvl(b.client_nm, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(b.rent_dt, ' '))";
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}	

			query += " order by a.dly_fee desc, nvl(c.use_cnt,0) desc, b.rent_start_dt desc, b.rent_dt desc ";



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getClsFeeScdDlyList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//차량출고쿠폰관리
	public Vector getCarPurCouPonList(String s_kd, String t_wd, String gubun1, String gubun2, String gubun3, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  a.rent_mng_id, a.rent_l_cd, a.rpt_no, a.pur_pay_dt, b.dlv_dt, e.car_off_nm, \n"+
				"        decode(a.com_tint,'1',decode(a.com_film_st,'1','루마썬팅','2','모비스썬팅','3','SKC썬팅',''),'2','브랜드키트') com_coupon_nm, \n"+
				"        a.com_tint, a.com_film_st, a.com_tint_coupon_no, a.com_tint_coupon_dt, a.com_tint_coupon_pay_dt, a.com_tint_coupon_reg_id, \n"+
				"        f.user_nm, a.car_num, g.br_nm, h.off_nm, h.tint_cau, i.user_nm as coupon_reg_nm, j.nm as car_comp_nm \n"+
				" from   car_pur a, cont b, commi c, car_off_emp d, car_off e, users f, BRANCH g, tint h, (select * from doc_settle where doc_st='4') l, users i, (select * from code where c_st='0001') j \n"+
				" where  \n"+
				"        a.com_tint is not null \n"+
				"        and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd \n"+
				"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd and c.agnt_st='2' \n"+
				"        and c.emp_id=d.emp_id and d.car_off_id=e.car_off_id \n"+
				"        and b.bus_id=f.user_id \n"+
				"        and f.br_id=g.br_id \n"+
				"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
				"        and a.rent_l_cd=l.doc_id and l.doc_step='3' "+
				"        and a.com_tint_coupon_reg_id=i.user_id(+) "+
				"        and e.car_comp_id=j.code(+) "+
				" ";


		String what = "";
		String dt1 = "";
		String dt2 = "";

		//수령구분
		if(gubun3.equals("Y")){
			query += " and a.com_tint_coupon_dt is not null";//수령
			dt1 = "substr(a.com_tint_coupon_dt,1,6)";
			dt2 = "a.com_tint_coupon_dt";
		}else if(gubun3.equals("N")){
			query += " and a.com_tint_coupon_dt is null";//미수령
			dt1 = "substr(nvl(b.dlv_dt,a.pur_pay_dt),1,6)";
			dt2 = "nvl(b.dlv_dt,a.pur_pay_dt)";
		}else if(gubun3.equals("P")){
			query += " and a.com_tint_coupon_pay_dt is null";//미지급
			dt1 = "substr(a.com_tint_coupon_dt,1,6)";
			dt2 = "a.com_tint_coupon_dt";
		}else if(gubun3.equals("E")){
			query += " and a.com_tint_coupon_pay_dt is not null";//지급
			dt1 = "substr(a.com_tint_coupon_pay_dt,1,6)";
			dt2 = "a.com_tint_coupon_pay_dt";
		}else{
			dt1 = "substr(nvl(b.dlv_dt,a.pur_pay_dt),1,6)";
			dt2 = "nvl(b.dlv_dt,a.pur_pay_dt)";
		}

		if(gubun2.equals("1"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
		else if(gubun2.equals("3"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";
		else if(gubun2.equals("2")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}

		if(s_kd.equals("1"))	what = "upper(nvl(e.car_off_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rpt_no, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(f.user_nm, ' '))";	
		if(s_kd.equals("6"))	what = "upper(nvl(i.user_nm, ' '))";	
		if(s_kd.equals("7"))	what = "upper(nvl(h.off_nm, ' '))";	
		if(s_kd.equals("8"))	what = "upper(nvl(j.nm, ' '))";	

			
		if(!what.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";
		}else{

		}	
		
		if(s_kd.equals("7")){
			query += " order by a.com_tint_coupon_pay_dt, a.rpt_no";	
		}else{
			query += " order by a.com_tint_coupon_pay_dt, a.com_tint_coupon_dt, b.dlv_dt, a.rpt_no";	
		}
		

		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarPurCouPonList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//차량출고쿠폰관리
	public Hashtable getCarPurCouPonCase(String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select a.rent_mng_id, a.rent_l_cd, a.rpt_no, a.pur_pay_dt, b.dlv_dt, e.car_off_nm, \n"+
				"        decode(a.com_tint,'1',decode(a.com_film_st,'1','루마썬팅','2','모비스썬팅','3','SKC썬팅',''),'2','브랜드키트') com_coupon_nm, \n"+
				"        a.com_tint, a.com_film_st, a.com_tint_coupon_no, a.com_tint_coupon_dt, a.com_tint_coupon_pay_dt, a.com_tint_coupon_reg_id, \n"+
				"        f.user_nm, a.car_num, g.br_nm, h.off_nm, i.user_nm as coupon_reg_nm \n"+
				" from   car_pur a, cont b, commi c, car_off_emp d, car_off e, users f, BRANCH g, tint h, users i \n"+
				" where  \n"+
				"        a.rent_l_cd='"+rent_l_cd+"' \n"+
				"        and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd \n"+
				"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd and c.agnt_st='2' \n"+
				"        and c.emp_id=d.emp_id and d.car_off_id=e.car_off_id \n"+
				"        and b.bus_id=f.user_id \n"+
				"        and f.br_id=g.br_id \n"+
				"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
				"        and a.com_tint_coupon_reg_id=i.user_id(+) "+
				" ";

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarPurCouPonCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}		
	}

	//대손처리요청조회
	public BadDebtReqBean getBadDebtReq(String rent_mng_id, String rent_l_cd, int seq)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		BadDebtReqBean base = new BadDebtReqBean();
		String query = "";

		query = " select * from BAD_DEBT_REQ where rent_mng_id=? and rent_l_cd=? and seq=?";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id	);
			pstmt.setString(2, rent_l_cd	);
			pstmt.setInt   (3, seq			);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id		(rs.getString("RENT_MNG_ID")	==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd		(rs.getString("RENT_L_CD")		==null?"":rs.getString("RENT_L_CD"));
				base.setSeq				(rs.getString("seq")			==null?0 :Integer.parseInt(rs.getString("seq")));
				base.setBad_debt_cau	(rs.getString("bad_debt_cau")	==null?"":rs.getString("bad_debt_cau"));
				base.setBad_debt_st		(rs.getString("bad_debt_st")	==null?"":rs.getString("bad_debt_st"));
				base.setOld_bus_id2		(rs.getString("old_bus_id2")	==null?"":rs.getString("old_bus_id2"));
				base.setNew_bus_id2		(rs.getString("new_bus_id2")	==null?"":rs.getString("new_bus_id2"));
				base.setBus_id2_cng_yn	(rs.getString("bus_id2_cng_yn")	==null?"":rs.getString("bus_id2_cng_yn"));
				base.setReg_id			(rs.getString("reg_id")			==null?"":rs.getString("reg_id"));
				base.setReg_dt			(rs.getString("reg_dt")			==null?"":rs.getString("reg_dt"));
				base.setCng_id			(rs.getString("cng_id")			==null?"":rs.getString("cng_id"));
				base.setCng_dt			(rs.getString("cng_dt")			==null?"":rs.getString("cng_dt"));
				base.setBad_debt_amt	(rs.getString("bad_debt_amt")	==null?0 :Integer.parseInt(rs.getString("bad_debt_amt")));
				base.setReject_cau		(rs.getString("reject_cau")		==null?"":rs.getString("reject_cau"));
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getBadDebtReq]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//대손처리요청 리스트
	public Vector getBadDebtReqList(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select * from BAD_DEBT_REQ where rent_mng_id=? and rent_l_cd=? order by seq desc";

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);

	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getBadDebtReqList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//대손처리요청 리스트
	public Vector getBadDebtReqItemList(String bad_debt_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select * from BAD_DEBT_REQ_LIST where bad_debt_cd=? order by seq desc";

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, bad_debt_cd);

	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getBadDebtReqItemList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//대손처리요청
	public boolean insertBadDebtReq(BadDebtReqBean base)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;

		String query =  " insert into BAD_DEBT_REQ "+
						" ( rent_mng_id, rent_l_cd, seq, bad_debt_cau, bad_debt_st, old_bus_id2, new_bus_id2, bus_id2_cng_yn, "+
						"   reg_id, reg_dt, cng_id, cng_dt, bad_debt_amt ) values "+
						" ( ?, ?, ?, ?, ?, ?, ?, ?, "+
						"   ?, to_char(sysdate,'YYYYMMDD'), ?, ?, ? )";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);

			pstmt.setString(1 , base.getRent_mng_id		());
			pstmt.setString(2 , base.getRent_l_cd		());
			pstmt.setInt   (3 , base.getSeq				());
			pstmt.setString(4 , base.getBad_debt_cau	());
			pstmt.setString(5,  base.getBad_debt_st		());
			pstmt.setString(6,  base.getOld_bus_id2		());
			pstmt.setString(7,  base.getNew_bus_id2		());
			pstmt.setString(8,  base.getBus_id2_cng_yn	());
			pstmt.setString(9,  base.getReg_id			());
			pstmt.setString(10, base.getCng_id			());
			pstmt.setString(11, base.getCng_dt			());
			pstmt.setInt   (12, base.getBad_debt_amt	());
														
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertBadDebtReq]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//대손처리요청
	public boolean updateBadDebtReq(BadDebtReqBean base)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;

		String query =  " update BAD_DEBT_REQ set "+
						"		 bad_debt_cau=?, bad_debt_st=?, reject_cau=? "+
						" where  rent_mng_id=? and rent_l_cd=? and seq=? ";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);

			pstmt.setString(1, base.getBad_debt_cau		());
			pstmt.setString(2, base.getBad_debt_st		());
			pstmt.setString(3, base.getReject_cau		());
			pstmt.setString(4, base.getRent_mng_id		());
			pstmt.setString(5, base.getRent_l_cd		());
			pstmt.setInt   (6, base.getSeq				());
														
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateBadDebtReq]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//대손처리요청
	public boolean updateBadDebtReqBusid2Cng(BadDebtReqBean base)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;

		String query =  " update BAD_DEBT_REQ set "+
						"		 bus_id2_cng_yn=?, cng_id=?, cng_dt=to_char(sysdate,'YYYYMMDD') "+
						" where  rent_mng_id=? and rent_l_cd=? and seq=? ";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);

			pstmt.setString(1, base.getBus_id2_cng_yn	());
			pstmt.setString(2, base.getCng_id			());
			pstmt.setString(3, base.getRent_mng_id		());
			pstmt.setString(4, base.getRent_l_cd		());
			pstmt.setInt   (5, base.getSeq				());
														
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateBadDebtReqBusid2Cng]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//대손처리요청 아이템 리스트
	public boolean insertBadDebtReqItem(BadDebtReqBean base)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;

		String query =  " insert into BAD_DEBT_REQ_LIST "+
						" ( bad_debt_cd, seq, item_gubun, item_cd1, item_cd2, item_cd3, item_cd4, item_cd5, "+
						"   est_dt, s_amt, v_amt, amt, etc ) values "+
						" ( ?, ?, ?, ?, ?, ?, ?, ?, "+
						"   replace(?, '-', ''), ?, ?, ?, ? )";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);

			pstmt.setString(1 , base.getBad_debt_cd		());
			pstmt.setInt   (2 , base.getSeq				());
			pstmt.setString(3 , base.getItem_gubun		());
			pstmt.setString(4,  base.getItem_cd1		());
			pstmt.setString(5,  base.getItem_cd2		());
			pstmt.setString(6,  base.getItem_cd3		());
			pstmt.setString(7,  base.getItem_cd4		());
			pstmt.setString(8,  base.getItem_cd5		());
			pstmt.setString(9,  base.getEst_dt			());
			pstmt.setInt   (10, base.getS_amt			());
			pstmt.setInt   (11, base.getV_amt			());
			pstmt.setInt   (12, base.getAmt				());
			pstmt.setString(13, base.getEtc				());
														
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertBadDebtReqItem]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//납품준비상황 제출자료
	public Hashtable getRentBoardSubCase(String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select decode(a.car_st,'3','리스','렌트') car_st, i.car_no, d.car_nm, c.car_name, e.car_num, e.est_car_no, e.tmp_drv_no, e.dlv_ext, i.park, i.park_cont, \n"+
				"        (b.car_fs_amt+b.sd_cs_amt-b.dc_cs_amt) car_amt,  \n"+
				"        trunc((b.car_fs_amt+b.sd_cs_amt-b.dc_cs_amt)*2/100,-1) tax2, \n"+
				"        trunc((b.car_fs_amt+b.sd_cs_amt-b.dc_cs_amt)*3/100,-1) tax3, \n"+
				"        trunc((b.car_fs_amt+b.sd_cs_amt-b.dc_cs_amt)*4/100,-1) tax4, \n"+
				"        trunc((b.car_fs_amt+b.sd_cs_amt-b.dc_cs_amt)*5/100,-1) tax5, \n"+
				"        trunc((b.car_fs_amt+b.sd_cs_amt-b.dc_cs_amt)*6/100,-1) tax6, \n"+
				"        trunc((b.car_fs_amt+b.sd_cs_amt-b.dc_cs_amt)*7/100,-1) tax7, \n"+
				"        decode(e.acq_cng_yn,'Y',f.nm,'N','') acq_cng_com, \n"+
				"        f.code, f.addr, \n"+
				"        f.app_st, substr(c.s_st,1,1) s_st, c.s_st as s_st2, c.diesel_yn, nvl(h.jg_g_7,'') jg_j_7, e.udt_st, v2.jg_g_16, v2.jg_g_7, a.dlv_dt, e.dlv_est_dt, b.new_license_plate  \n"+
				" from   cont a, car_etc b, car_nm c, car_mng d, car_pur e, fee_etc g, esti_exam h, \n"+
				"        (SELECT b.C_ST, b.CODE, b.NM_CD, b.NM, b.CMS_BK, b.APP_ST, a.GUBUN, a.ADDR FROM CODE_ETC a, CODE b where b.C_ST=a.C_ST(+)  and b.CODE=a.CODE(+) and b.C_ST='0003' and b.CODE <> '0000') f, \n"+
				"		 (SELECT sh_code, MAX( seq ) seq FROM esti_jg_var GROUP BY sh_code) v3, \n"+
				"		 esti_jg_var v2, car_reg i \n"+
				" where  a.rent_l_cd='"+rent_l_cd+"' \n"+
				"        and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd \n"+
				"        and b.car_id=c.car_id and b.car_seq=c.car_seq \n"+
				"        and c.car_comp_id=d.car_comp_id and c.car_cd=d.code \n"+
				"        and a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd \n"+
				"        and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd and g.rent_st='1' \n"+
				"        and g.bc_est_id=h.est_id(+) \n"+
				"        and e.cpt_cd=f.code(+) \n"+				
				"        and c.jg_code = v3.sh_code(+) \n"+				
				"        and v3.sh_code = v2.sh_code(+) \n"+				
				"        and v3.seq = v2.SEQ(+) \n"+		
				"        and a.car_mng_id=i.car_mng_id(+) \n"+
				" order by decode(a.car_st,'1','1','2'), e.est_car_no "+
				" ";

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentBoardSubCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}		
	}

	/**
	 * 계약 예비담당자 리스트
	 */
	public Vector getTintRegOverlapList()
	{
		getConnection();
		Vector vt = new Vector();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String query = "";
		
		query = " SELECT a.* \n"+
				" FROM   CONT a, CAR_PUR b, (SELECT rent_mng_id, rent_l_cd, COUNT(*) FROM TINT WHERE rent_mng_id IS NOT NULL and tint_cau='1' GROUP BY rent_mng_id, rent_l_cd HAVING COUNT(*)>1 ) c \n"+
				" WHERE  a.car_mng_id IS NULL AND NVL(a.use_yn,'Y')='Y' \n"+
				"        AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd \n"+
				"        AND a.rent_mng_id=c.rent_mng_id AND a.rent_l_cd=c.rent_l_cd \n"+
				" ";
							
		try {
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getTintRegOverlapList]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}


	//계출관리-JPG미등록현황
	public Vector getContJpgScanList(String s_kd, String t_wd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " SELECT  a.use_yn, b.rent_mng_id, b.rent_l_cd, b.rent_st, \n"+
					"        DECODE(a.car_gu,0,'재리스','신차') car_gu, \n"+
					"        DECODE(a.car_st,'1','렌트','3','리스','4','월렌트','5','업무대여') car_st, \n"+
					"        DECODE(b.rent_way,'1','일반식','기본식') rent_way, \n"+
					"        DECODE(b.rent_st,'1','신규','연장'||b.rent_st) rent_st_nm, \n"+
					"        d.firm_nm, b.rent_start_dt, b.rent_end_dt, \n"+
					"        e.car_no, E.CAR_NM, e.init_reg_dt, f.user_nm, e.car_doc_no, \n"+
					"        w.file_cnt17, w.file_cnt18, w.file_cnt37, w.file_cnt38 \n"+
					" FROM   CONT a,  FEE b, (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) c, CLIENT d, CAR_REG e, USERS f, \n"+

					"        ( SELECT SUBSTR(content_seq,1,20) content_seq, \n"+
					"                 SUBSTR(SUBSTR(content_seq,1,20),1,6) rent_mng_id,  \n"+
					"                 SUBSTR(SUBSTR(content_seq,1,20),7,13) rent_l_cd, \n"+
					"                 SUBSTR(SUBSTR(content_seq,1,20),20,1) rent_st, \n"+
					"                 COUNT(DECODE(SUBSTR(content_seq,21),'17',1)) file_cnt17, \n"+
					"                 COUNT(DECODE(SUBSTR(content_seq,21),'18',1)) file_cnt18, \n"+
					"                 COUNT(DECODE(SUBSTR(content_seq,21),'37',1)) file_cnt37, \n"+
					"                 COUNT(DECODE(SUBSTR(content_seq,21),'38',1)) file_cnt38  \n"+
					"          FROM   ACAR_ATTACH_FILE  \n"+
					"          where  content_code='LC_SCAN' AND isdeleted='N' \n"+
					"          group by SUBSTR(content_seq,1,20) \n"+ 
                    "        ) w "+

					" WHERE \n"+
					"        a.use_yn='Y' AND a.car_st in ('1','3','4') AND a.car_mng_id IS NOT NULL \n"+
					"        AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd \n"+
					"        AND b.rent_mng_id=c.rent_mng_id AND b.rent_l_cd=c.rent_l_cd AND b.RENT_ST=c.rent_st \n"+
					"        AND a.client_id=d.client_id \n"+
					"        AND a.car_mng_id=e.car_mng_id \n"+
					"        AND DECODE(b.rent_st,'1',a.BUS_ID,b.EXT_AGNT)=f.user_id and f.use_yn='Y' \n"+
					"        AND b.rent_mng_id=w.rent_mng_id(+) AND b.rent_l_cd=w.rent_l_cd(+) AND b.RENT_ST=w.rent_st(+) \n"+
					"        AND b.rent_start_dt IS NOT NULL \n"+
					"        AND b.rent_start_dt > '20151231' \n"+
					"        AND nvl(w.file_cnt17,0)+nvl(w.file_cnt18,0)+nvl(w.file_cnt37,0)+nvl(w.file_cnt38,0) < 4 \n"+
					"        AND d.firm_nm not in ('유비투스코리아 유한회사', '지멘스아게', '서부수도사업소', '지멘스(주)') \n"+
					"        and decode(a.car_st,'4',decode(b.rent_st,'1','Y','N'),'Y')='Y' \n"+
					" ";

			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(d.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(e.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(f.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(f.client_nm, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(nvl(b.rent_dt,a.rent_dt), ' '))";
			if(s_kd.equals("15"))	what = "upper(nvl(b.rent_start_dt, ' '))";
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}	

			query += " ORDER BY b.rent_start_dt, d.firm_nm ";



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContJpgScanList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계출관리-기본식미배정현황
	public Vector getContBusCngList(String s_kd, String t_wd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  a.rent_mng_id, a.rent_l_cd, h.firm_nm, a.bus_id2, c.user_nm, j.car_no, J.car_nm, b.rent_start_dt, \n"+ 
					"                TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(b.rent_start_dt,'YYYYMMDD')),0) use_mon, \n"+ 
					"                decode(a.mng_id,'', decode(c.dept_id,'0001','000026','0007','000053','0008','000026'), a.bus_id2, decode(c.dept_id,'0001','000026','0007','000053','0008','000026'), a.mng_id) mng_id, \n"+ 
//					"                --3회이후에 오늘 이전 대여료에 대한 연체대여료이 없어야함 \n"+ 
					"                nvl(e.dly_fee_amt,0) AS dly_fee_amt, \n"+ 
//					"                --미수과태료가 없어야 함 \n"+ 
					"                nvl(f.paid_amt,0) AS paid_amt, \n"+ 
//					"                --미수면책금이 없어야 함 \n"+ 
					"                nvl(g.dly_ext_amt,0) AS dly_ext_amt, \n"+ 
//					"                --미종결처리 사고가 없어야 함 \n"+ 
					"                nvl(i.settle_not_cnt,0) AS settle_not_cnt, \n"+ 
//					"                --승계미수선수금이 없어야 함 \n"+ 
					"                nvl(j.dly_ext_amt,0) AS dly_ext_amt2 \n"+ 
					"         from   cont a, fee b, users c, client h, CAR_REG j, \n"+ 
					"                ( select b.rent_mng_id, b.rent_l_cd, sum(b.fee_s_amt) dly_fee_amt \n"+ 
					"                  from   scd_fee b, cont a, users c \n"+ 
					"                  where  a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.bus_id2=c.user_id \n"+ 
					"                         and b.fee_tm=decode(c.br_id,'B1','4',decode(sign(to_date('20080514','YYYYMMDD')-to_date(a.rent_dt,'YYYYMMDD')),1,'3','4')) \n"+ 
					" 		                and b.rc_yn='0' group by b.rent_mng_id, b.rent_l_cd \n"+ 
					"                ) d, \n"+ 
					"                ( select rent_mng_id, rent_l_cd, sum(fee_s_amt) dly_fee_amt \n"+ 
					"                  from   scd_fee \n"+ 
					"                  where  r_fee_est_dt < to_char(sysdate,'YYYYMMDD') and rc_yn='0' \n"+ 
					"                  group by rent_mng_id, rent_l_cd \n"+ 
					"                ) e, \n"+ 
//					"                --선납분은 제외하여 영업담당자 변경 - 20100719 \n"+ 
					"                ( select a.rent_mng_id, a.rent_l_cd, sum(a.paid_amt) paid_amt \n"+ 
					"                  from   fine a \n"+ 
					"                  where  a.paid_amt>0 \n"+ 
					"                         and a.coll_dt is null and nvl(a.bill_yn,'Y')='Y' \n"+ 
					"                         and a.paid_st in ('3','4') and nvl(a.no_paid_yn,'N')='N' \n"+ 
					"                          and (a.vio_cont not like  '%통행료%'and a.vio_cont not like  '%주차요금%') \n"+ 
					"                  group by a.rent_mng_id, a.rent_l_cd \n"+ 
					"                ) f, \n"+ 
					"                ( select rent_mng_id, rent_l_cd, sum(ext_s_amt) dly_ext_amt \n"+ 
					"                  from   scd_ext \n"+ 
					"                  where  ext_st='3' and ext_est_dt < to_char(sysdate,'YYYYMMDD') \n"+ 
					"                         and ext_pay_dt is null and nvl(bill_yn,'Y')='Y' \n"+ 
					"                  group by rent_mng_id, rent_l_cd \n"+ 
					"                ) g, \n"+ 
//					"                --사고종결 미처리건 체크 \n"+ 
					"                ( \n"+ 
					"                  select rent_mng_id, rent_l_cd, count(*) settle_not_cnt \n"+ 
					"                  from   accident \n"+ 
					"                  where  nvl(settle_st,'0')<>'1' \n"+ 
					"                  group by rent_mng_id, rent_l_cd \n"+ 
					"                ) i, \n"+ 
//					"                --승계계약 미수선수금 체크 \n"+ 
					"                ( select a.rent_mng_id, a.rent_l_cd, sum(a.ext_s_amt) dly_ext_amt \n"+ 
					"                  from   SCD_EXT a, CONT b, CONT_ETC c \n"+ 
					"                  where  a.ext_st IN ('0','1','2') and a.ext_est_dt < to_char(sysdate,'YYYYMMDD') \n"+ 
					"                         and a.ext_pay_dt is null and nvl(a.bill_yn,'Y')='Y' \n"+ 
					"                         AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd \n"+ 
					"                         AND b.rent_mng_id=c.rent_mng_id AND b.rent_l_cd=c.rent_l_cd AND c.rent_suc_dt IS NOT null \n"+ 
					"                  group by a.rent_mng_id, a.rent_l_cd \n"+ 
					"                ) j  \n"+ 
					"         where \n"+ 
					"                nvl(a.use_yn,'Y')='Y' and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1' \n"+ 
					"                and a.bus_id2=c.user_id \n"+ 
//					"                --2005년7월부터 \n"+ 
					"                and b.rent_start_dt >= '20050701' \n"+ 
//					"                --기본식 \n"+ 
					"                and b.rent_way='3' \n"+ 
//					"                --영업담당자가 영업부/부산지점 \n"+ 
					"                and c.loan_st ='2' \n"+ 
//					"                --대전지점,퇴사자는 제외  -  대전지점 포함 20100803 \n"+ 
					"                and c.dept_id not in ('9999') \n"+ 
//					"                --2008-05-14일 이전에는 대여개시후 3개월경과 이후는 4개월경과 : 2008년5월13일 수정 \n"+ 
					"                and add_months(to_date(b.rent_start_dt,'YYYYMMDD'),decode(c.br_id,'B1',4,decode(sign(to_date('20080514','YYYYMMDD')-to_date(a.rent_dt,'YYYYMMDD')),1,3,4))) <= sysdate \n"+ 
					"                and a.client_id=h.client_id \n"+ 
					"                and a.car_mng_id=j.car_mng_id \n"+ 
//					"                --6회차 연체대여료이 없어야함 \n"+ 
					"                and a.rent_mng_id=d.rent_mng_id(+) and a.rent_l_cd=d.rent_l_cd(+) \n"+ 
					"                and nvl(d.dly_fee_amt,0)=0 \n"+ 
//					"                --3회이후에 오늘 이전 대여료에 대한 연체대여료이 없어야함 \n"+ 
					"                and a.rent_mng_id=e.rent_mng_id(+) and a.rent_l_cd=e.rent_l_cd(+) \n"+ 
//					"                --and nvl(e.dly_fee_amt,0)=0 \n"+ 
//					"                --미수과태료가 없어야 함 \n"+ 
					"                and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+) \n"+ 
//					"                --and nvl(f.paid_amt,0)=0 \n"+ 
//					"                --미수면책금이 없어야 함 \n"+ 
					"                and a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+) \n"+ 
//					"                --and nvl(g.dly_ext_amt,0)=0 \n"+ 
//					"                --미종결처리 사고가 없어야 함 \n"+ 
					"                and a.rent_mng_id=i.rent_mng_id(+) and a.rent_l_cd=i.rent_l_cd(+) \n"+ 
//					"                --and nvl(i.settle_not_cnt,0)=0 \n"+
//					"                --승계계약 미수선수금이 없어야 함 \n"+ 
					"                and a.rent_mng_id=j.rent_mng_id(+) and a.rent_l_cd=j.rent_l_cd(+) \n"+ 
//					"                and nvl(j.dly_ext_amt,0)=0 \n"+ 
					" ";

			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(h.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(j.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(c.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(h.client_nm, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(a.rent_dt, ' '))";
			if(s_kd.equals("15"))	what = "upper(nvl(b.rent_start_dt, ' '))";
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}	

			query += " ORDER BY c.user_nm, b.rent_start_dt, h.firm_nm ";



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBusCngList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }


	/**
	 * 계약 일반식 영업담당 배정미스 알림
	 */
	public Vector getContBusId2RegErrorList()
	{
		getConnection();
		Vector vt = new Vector();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String query = "";
		
		query = " SELECT a.* "+
				" FROM   CONT_N_VIEW a, USERS b  "+
				" WHERE  NVL(a.use_yn,'Y')='Y'  "+
				"        AND a.rent_way_cd='1'  "+
				"        AND a.bus_id=b.user_id  "+
				"        AND b.loan_st='2'  "+
				"        AND a.BUS_ID=a.bus_id2  "+
				"        AND a.car_st<>'2' ";
							
		try {
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBusId2RegErrorList]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}

	//스캔파일 조회
	public Vector getSearchScanListS(String client_id, String file_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String b_query = "";
		String query = "";


		b_query = " select b.*, a.rent_dt, a.car_st, a.bus_id, c.rent_start_dt, c.rent_end_dt, c.con_mon, d.car_no, d.car_nm, e.user_nm, "+
				"        decode(b.file_path,'','',substr(b.reg_dt,1,4)) file_path_y, a.use_yn "+
				" from cont a, lc_scan b, fee c, car_reg d, users e"+
				" where a.client_id='"+client_id+"'"+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd"+
				" and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd and c.rent_st='1'"+
				" and a.car_mng_id=d.car_mng_id(+) and a.bus_id=e.user_id";

		if(!file_st.equals("")) b_query += " and b.file_st = '"+file_st+"'";


		b_query +=" union all \n"+
                " select b.*, a.rent_dt, '' car_st, a.bus_id, a.rent_start_dt, a.rent_end_dt, '' con_mon, d.car_no, d.car_nm, e.user_nm, "+
				"        decode(b.file_path,'','',substr(b.reg_dt,1,4)) file_path_y, 'Y' use_yn "+
				" from   rent_cont a, sc_scan b, car_reg d, users e"+
				" where a.cust_id='"+client_id+"' and a.cust_st='1' "+
				" and a.car_mng_id=b.car_mng_id and a.rent_s_cd=b.rent_s_cd"+
				" and a.car_mng_id=d.car_mng_id(+) and a.bus_id=e.user_id";

		if(!file_st.equals("")) b_query += " and b.file_st = '"+file_st+"'";



		query = " select * from ("+b_query+") order by NVL(use_yn,'Y') DESC, reg_dt desc";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSearchScanListS]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}

	//보증보험 리스트 조회
	public Vector getGuaInsureList(String s_kd, String t_wd, String st_dt, String end_dt, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query =	" select \r\n" + 
				"        a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, decode(e.rent_dt,'1',a.rent_dt,e.rent_dt) rent_dt, d.firm_nm, d.client_nm, \r\n" + 
				"        e.car_no, decode(a.use_yn,'Y','진행','N','해지','미결') use_st, \r\n" + 
				"        decode(c.gi_dt,'','미등록','등록') reg_st, \r\n" + 
				"        c.gi_no, c.gi_amt, c.gi_fee, c.gi_start_dt, c.gi_end_dt, c.gi_jijum, c.gi_dt, \r\n" + 
				"        CASE WHEN f.rent_suc_dt IS NOT NULL AND f.rent_suc_dt > e.rent_start_dt THEN f.rent_suc_dt \r\n" + 
				"             ELSE e.rent_start_dt END rent_start_dt, \r\n" + 
				"		 e.rent_end_dt, e.rent_st,  \r\n" + 
				"        TRUNC(MONTHS_BETWEEN(TO_DATE(a.rent_end_dt,'YYYYMMDD'), TO_DATE(c.gi_end_dt,'YYYYMMDD'))) mon,  \r\n" + 
				"        decode(e.rent_st,'1',decode(a.car_gu,'0','재리스','신차'),'연장') car_gu, \r\n" + 
				"        DECODE(CLIENT_ST,'1', substr(REPRE_NO,1,6)||'-'||substr(REPRE_NO,7,1) ,substr(TEXT_DECRYPT(ssn, 'pw' ), 1, 6) ||'-'|| substr( TEXT_DECRYPT(ssn, 'pw' ), 7, 1))||'******' ssn, \r\n" + 
				"        substr(ENP_NO,1,3)||'-'||substr(ENP_NO,4,2)||'-'||substr(ENP_NO,6,5) ENP_NO \r\n" + 
				" from   cont a, car_etc b, fee e, gua_ins c, client d, cont_etc f ,car_reg e \r\n" + 
				" where  \r\n" + 
				"        a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd  \r\n" + 
				"        and a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd \r\n" + 
				"        and e.rent_mng_id=c.rent_mng_id and e.rent_l_cd=c.rent_l_cd and e.rent_st=c.rent_st \r\n" + 
				"        and a.client_id=d.client_id \r\n" + 
				"        AND NVL(c.gi_st,b.gi_st)='1' \r\n" + 
				"        and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd \r\n" + 
				"        AND a.CAR_MNG_ID = e.CAR_MNG_ID(+) "+
				" ";

		String what = "";
		String dt1 = "";
		String dt2 = "";

		dt1 = "substr(decode(e.rent_dt,'1',a.rent_dt,e.rent_dt),1,6)";
		dt2 = "decode(e.rent_dt,'1',a.rent_dt,e.rent_dt)";

		if(gubun2.equals("2")){
			dt1 = "substr(c.gi_dt,1,6)";
			dt2 = "c.gi_dt";				
		}else if(gubun2.equals("3")){
			dt1 = "substr(c.gi_start_dt,1,6)";
			dt2 = "c.gi_start_dt";				
		}else if(gubun2.equals("4")){
			dt1 = "substr(c.gi_end_dt,1,6)";
			dt2 = "c.gi_end_dt";				
		}

		if(gubun3.equals("2"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%' \n";
		else if(gubun3.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD') \n";
		else if(gubun3.equals("4"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD') \n";//전일
		else if(gubun3.equals("3")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','') \n";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','') \n";
		}


		if(s_kd.equals("1"))	what = "upper(nvl(d.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(c.gi_no, ' '))";
		if(s_kd.equals("4"))	what = "upper(nvl(c.gi_jijum, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(d.client_nm, ' '))";
		if(s_kd.equals("6"))	what = "upper(nvl(e.car_no, ' '))";
			
		if(gubun1.equals("Y"))		query += " and c.gi_dt is not null \n";
		else if(gubun1.equals("N"))	query += " and c.gi_dt is null \n";

		if(!t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%')  \n";
		}else{
			if(gubun1.equals("") && gubun3.equals("3") && st_dt.equals("") && end_dt.equals("")){				
				query += " and nvl(a.use_yn,'Y')='Y' and c.gi_dt is null \n";
			}
		}	
		
		query += " order by decode(a.use_yn,'Y','2','N','3','1'), decode(c.gi_dt,'',0,1), a.rent_dt, a.rent_mng_id \n";

		try {
				
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getGuaInsureList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//폐차차량 개별소비세 납부차량 여부
	public Hashtable getEndCarTaxRegSearch(String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select \n"+
				"         b.use_yn, decode(a.car_mng_id,'','N','Y') reg_yn, b.rent_mng_id, b.rent_l_cd, b.car_mng_id, \n"+
				"        g.firm_nm, g.client_nm, d.first_car_no, d.car_no, d.car_nm, c.car_name, d.dpm, \n"+
                "        (e.car_fs_amt-e.dc_cs_amt) car_fs_amt, b.dlv_dt, e.bae4, \n"+
                "        to_char(trunc(months_between(sysdate, TO_DATE(f.rent_start_dt, 'YYYYMMDD')),0),99) rent_mon, \n"+
				"        to_char(trunc(months_between(TO_DATE(h.cls_dt, 'YYYYMMDD'), TO_DATE(nvl(b.dlv_dt,d.init_reg_dt), 'YYYYMMDD'))/12,0),99) dlv_mon, \n"+
				"        '폐차' tax_st_nm, '4' tax_st, \n"+
                "        f.rent_start_dt, \n"+
                "        h.cls_dt as rent_12mon, \n"+
				"        to_char(add_months(h.cls_dt,0),'YYYYMMDD') base_dt, \n"+
                "        '' migr_dt, h.cls_dt, h.cls_st, '' cha_dt \n"+
				" from   cont b, car_reg d, car_etc e, fee f, car_nm c, (select car_mng_id from car_tax group by car_mng_id) a, client g, cls_cont h \n"+
				" where  b.rent_l_cd='"+rent_l_cd+"' and nvl(b.use_yn,'Y')='N' \n"+
				"        and h.cls_st in ('9','15') \n"+
				"        and to_number(replace(d.dpm,' ','')) > 1000 \n"+
                "        and d.taking_p < 9 \n"+
                "        and c.car_name not like '%9인승%' \n"+
				"        and c.s_st < '600' \n"+
				"        and nvl(d.first_car_no,d.car_no) like '%허%' \n"+
				"        and b.car_mng_id=d.car_mng_id \n"+
				"        and b.rent_mng_id=e.rent_mng_id and b.rent_l_cd=e.rent_l_cd \n"+
				"        and b.rent_mng_id=f.rent_mng_id and b.rent_l_cd=f.rent_l_cd and f.rent_st='1' \n"+
				"        and e.car_id=c.CAR_ID and e.car_seq=c.car_seq \n"+
				"        and b.car_mng_id=a.car_mng_id(+) and a.car_mng_id is null \n"+
				"        and b.client_id=g.client_id \n"+
				"        and b.rent_mng_id=h.rent_mng_id and b.rent_l_cd=h.rent_l_cd "+
				" ";

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getEndCarTaxRegSearch]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}		
	}


	/*
	 *	계출현황-자체출고현황 마감 프로시져 호출
	*/
	public String call_out_car_magam()
	{
    	getConnection();
    	
    	String query = "{CALL P_OUT_CAR_MAGAM (?)}";

		String sResult = "";
		
		CallableStatement cstmt = null;
		
		try {
			cstmt = conn.prepareCall(query);
			
			cstmt.registerOutParameter( 1, java.sql.Types.VARCHAR );
			
			cstmt.execute();
			sResult = cstmt.getString(1); // 결과값
			cstmt.close();
		
	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:call_out_car_magam]\n"+e);
			e.printStackTrace();
		} finally {
			try{
			     if(cstmt != null)	cstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return sResult;
		}
	}	

	//예약시스템 - CMS 고객 리스트 조회 (gubun - 1:상호, 2:계약번호)
	public Vector getCmsRentContList(String s_kd, String t_wd, String st_dt, String end_dt, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  \n"+
				"        a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, \n"+
				"        b.rent_dt, c.firm_nm, d.car_no, b.deli_dt as rent_start_dt, \n"+
				"        decode(nvl(e.cnt,0),0,'-','생성') scd_yn, \n"+
				"        decode(f.reg_st,'1',decode(f.app_dt,'','-','신청'),'2','해지','-') reg_st, \n"+
				"        decode(b.ret_dt,'진행','해지') use_st, \n"+
				"        f.cms_day, f.cms_bank, f.cms_acc_no, f.cms_dep_nm, \n"+
				"	 decode(g.cms_status, '0', '신규', '1','신규신청중','2','신규신청불능','3','신청완료','11','해지','12','해지신청중','13','해지완료','-') cbit, \n"+
				"        h.user_nm, h2.user_nm as reg_nm, h3.user_nm as app_nm, f.app_dt, b.rent_st, b.rent_s_cd  \n"+
				" from   cont a, rent_cont b, client c, car_reg d, \n"+
				"        (select rent_s_cd, count(*) cnt from scd_rent where rent_st not in ('1','2') group by rent_s_cd) e, \n"+
				"        cms_mng f, cms.member_user g, users h, users h2, users h3  \n"+
				" where a.car_st='4' \n"+
				"        and a.rent_mng_id=b.car_mng_id and a.rent_l_cd='RM00000'||b.rent_s_cd  \n"+
				"        and a.client_id=c.client_id \n"+
				"        and a.car_mng_id=d.car_mng_id \n"+
				"        and b.rent_s_cd=e.rent_s_cd  \n"+
				"        and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+) \n"+
				"        and a.rent_l_cd=g.cms_primary_seq(+) \n"+
				"        and b.mng_id=h.user_id  \n"+
				"        and f.reg_id=h2.user_id(+)  \n"+
    			"        and f.app_id=h3.user_id(+)  \n"+
				" " ;


		String what = "";
		String dt1 = "";
		String dt2 = "";


		dt1 = "substr(f.app_dt,1,6)";
		dt2 = "f.app_dt";

		if(gubun3.equals("2"))			query += " and "+dt1+" = to_char(sysdate,'YYYYMM')";
		else if(gubun3.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";
		else if(gubun3.equals("4"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";//전일
		else if(gubun3.equals("3")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}

		if(!gubun4.equals("")){	
			if(gubun4.equals("9"))			query += " and g.cms_status is null and e.rent_s_cd||b.deli_dt is not null ";
			else 							query += " and g.cms_status='"+gubun4+"'";
		}

		if(gubun1.equals("2"))				query += " and f.app_dt is not null and f.reg_st='2'";
		else{
			if(gubun1.equals("Y"))			query += " and f.app_dt is not null";
			else if(gubun1.equals("N"))		query += " and f.app_dt is null and b.ret_dt is null and e.rent_s_cd||b.deli_dt is not null ";
		}

		if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";		
		if(s_kd.equals("4"))	what = "upper(nvl(h.user_nm, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(b.deli_dt, ' '))";	
		if(s_kd.equals("6"))	what = "upper(nvl(f.app_dt, ' '))";	
		if(s_kd.equals("7"))	what = "upper(nvl(f.cms_start_dt, ' '))";	
		if(s_kd.equals("8"))	what = "upper(nvl(h2.user_nm, ' '))";	
		if(s_kd.equals("9"))	what = "upper(nvl(f.cms_acc_no, ' '))";	
		if(s_kd.equals("10"))	what = "upper(nvl(h3.user_nm, ' '))";	


		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper(replace('%"+t_wd+"%','-','')) ";
		}	
		
		if(s_kd.equals("6")) 		query += " order by h2.user_nm, decode(b.ret_dt,'','2','3'), decode(g.cms_status,'',0,1), b.deli_dt, b.rent_dt, a.rent_mng_id";
		else						query += " order by decode(b.ret_dt,'','2','3'), decode(g.cms_status,'',0,1), b.deli_dt, b.rent_dt, a.rent_mng_id";

		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCmsRentContList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//계약번호로 찾기
	public Hashtable getContCase(String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";

		query = " select * from cont where rent_l_cd='"+rent_l_cd+"' ";

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}		
	}

	//계출여부
	public int getContCarPurComCnt(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;		
		String query = "";
		int count = 0;

		query = " SELECT DECODE(b.rent_l_cd,'',0,1)+DECODE(c.rent_l_cd,'',0,1) cnt "+
                " FROM   CONT a, (select * from car_pur_com where use_yn<>'N') b, CAR_PUR_DOC_LIST c "+
                " WHERE  a.rent_mng_id='"+rent_mng_id+"' AND a.rent_l_cd='"+rent_l_cd+"' "+
                " AND a.rent_mng_id=b.rent_mng_id(+) AND a.rent_l_cd=b.rent_l_cd(+) "+
                " AND a.rent_mng_id=c.rent_mng_id(+) AND a.rent_l_cd=c.rent_l_cd(+) "+
	            " ";

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
			if(rs.next())
			{								
				count = rs.getInt("cnt");
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCarPurComCnt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return count;
		}		
	}

	//계출여부
	public int getContCarIdCnt(String car_id, String car_seq)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;		
		String query = "";
		int count = 0;

		query = " SELECT count(*) cnt FROM car_etc WHERE car_id='"+car_id+"' AND car_seq='"+car_seq+"' "+
	            " ";

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
			if(rs.next())
			{								
				count = rs.getInt("cnt");
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCarIdCnt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return count;
		}		
	}


	//계약수정 : 대여월렌트정보 조회
	public ContFeeRmBean getContFeeRm(String m_id, String l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContFeeRmBean bean = new ContFeeRmBean();
		String query = "";

		query = " select RENT_MNG_ID, RENT_L_CD, RENT_ST, dc_s_amt, dc_v_amt, "+
				"        navi_s_amt, NAVI_V_AMT, ETC_S_AMT, ETC_V_AMT, T_FEE_S_AMT, "+
				"        T_FEE_V_AMT, CONS1_S_AMT, CONS1_V_AMT, CONS2_S_AMT, CONS2_V_AMT, "+
				"        F_PAID_WAY, F_PAID_WAY2, F_RENT_TOT_AMT, F_CON_AMT, NAVI_YN, "+
				"        CONS1_YN, CONS2_YN, ETC_CONT, EST_ID, AMT_PER, "+
				"        CARS, AMT_01D, AMT_03D, AMT_05D, AMT_07D, "+
				"        SERIAL_NO, REG_ID, REG_DT, UPDATE_DT, UPDATE_ID, "+
				"        CAR_USE, MY_ACCID_YN, DELI_PLAN_DT, RET_PLAN_DT, DELI_LOC, RET_LOC, CMS_TYPE "+
				" from   fee_rm "+
				" where  RENT_MNG_ID = ? and RENT_L_CD = ? and rent_st=?";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, l_cd);
			pstmt.setString(3, rent_st);
		   	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				bean.setRent_mng_id		(rs.getString("RENT_MNG_ID")	==null?"":rs.getString("RENT_MNG_ID"));
				bean.setRent_l_cd		(rs.getString("RENT_L_CD")		==null?"":rs.getString("RENT_L_CD"));
				bean.setRent_st			(rs.getString("RENT_ST")		==null?"":rs.getString("RENT_ST"));
				bean.setDc_s_amt		(rs.getString("dc_s_amt")		==null?0:Integer.parseInt(rs.getString("dc_s_amt")));
				bean.setDc_v_amt		(rs.getString("dc_v_amt")		==null?0:Integer.parseInt(rs.getString("dc_v_amt")));
				bean.setNavi_s_amt		(rs.getString("navi_s_amt")		==null?0:Integer.parseInt(rs.getString("navi_s_amt")));
				bean.setNavi_v_amt		(rs.getString("navi_v_amt")		==null?0:Integer.parseInt(rs.getString("navi_v_amt")));
				bean.setEtc_s_amt		(rs.getString("etc_s_amt")		==null?0:Integer.parseInt(rs.getString("etc_s_amt")));
				bean.setEtc_v_amt		(rs.getString("etc_v_amt")		==null?0:Integer.parseInt(rs.getString("etc_v_amt")));
				bean.setT_fee_s_amt		(rs.getString("t_fee_s_amt")	==null?0:Integer.parseInt(rs.getString("t_fee_s_amt")));
				bean.setT_fee_v_amt		(rs.getString("t_fee_v_amt")	==null?0:Integer.parseInt(rs.getString("t_fee_v_amt")));
				bean.setCons1_s_amt		(rs.getString("cons1_s_amt")	==null?0:Integer.parseInt(rs.getString("cons1_s_amt")));
				bean.setCons1_v_amt		(rs.getString("cons1_v_amt")	==null?0:Integer.parseInt(rs.getString("cons1_v_amt")));
				bean.setCons2_s_amt		(rs.getString("cons2_s_amt")	==null?0:Integer.parseInt(rs.getString("cons2_s_amt")));
				bean.setCons2_v_amt		(rs.getString("cons2_v_amt")	==null?0:Integer.parseInt(rs.getString("cons2_v_amt")));
				bean.setF_paid_way		(rs.getString("f_paid_way")		==null?"":rs.getString("f_paid_way"));
				bean.setF_paid_way2		(rs.getString("f_paid_way2")	==null?"":rs.getString("f_paid_way2"));
				bean.setF_rent_tot_amt	(rs.getString("f_rent_tot_amt")	==null?0:Integer.parseInt(rs.getString("f_rent_tot_amt")));
				bean.setF_con_amt		(rs.getString("f_con_amt")		==null?0:Integer.parseInt(rs.getString("f_con_amt")));
				bean.setNavi_yn			(rs.getString("navi_yn")		==null?"":rs.getString("navi_yn"));
				bean.setCons1_yn		(rs.getString("cons1_yn")		==null?"":rs.getString("cons1_yn"));
				bean.setCons2_yn		(rs.getString("cons2_yn")		==null?"":rs.getString("cons2_yn"));
				bean.setEtc_cont		(rs.getString("etc_cont")		==null?"":rs.getString("etc_cont"));
				bean.setEst_id			(rs.getString("est_id")			==null?"":rs.getString("est_id"));
				bean.setAmt_per			(rs.getString("amt_per")		==null?"":rs.getString("amt_per"));
				bean.setCars			(rs.getString("cars")			==null?"":rs.getString("cars"));
				bean.setAmt_01d			(rs.getString("amt_01d")		==null?0:Integer.parseInt(rs.getString("amt_01d")));
				bean.setAmt_03d			(rs.getString("amt_03d")		==null?0:Integer.parseInt(rs.getString("amt_03d")));
				bean.setAmt_05d			(rs.getString("amt_05d")		==null?0:Integer.parseInt(rs.getString("amt_05d")));
				bean.setAmt_07d			(rs.getString("amt_07d")		==null?0:Integer.parseInt(rs.getString("amt_07d")));
				bean.setSerial_no		(rs.getString("serial_no")		==null?"":rs.getString("serial_no"));
				bean.setReg_id			(rs.getString("reg_id")			==null?"":rs.getString("reg_id"));
				bean.setReg_dt			(rs.getString("reg_dt")			==null?"":rs.getString("reg_dt"));
				bean.setUpdate_dt		(rs.getString("update_dt")		==null?"":rs.getString("update_dt"));
				bean.setUpdate_id		(rs.getString("update_id")		==null?"":rs.getString("update_id"));
				bean.setCar_use			(rs.getString("car_use")		==null?"":rs.getString("car_use"));
				bean.setMy_accid_yn		(rs.getString("my_accid_yn")	==null?"":rs.getString("my_accid_yn"));
				bean.setDeli_plan_dt	(rs.getString("deli_plan_dt")	==null?"":rs.getString("deli_plan_dt"));
				bean.setRet_plan_dt		(rs.getString("ret_plan_dt")	==null?"":rs.getString("ret_plan_dt"));
				bean.setDeli_loc		(rs.getString("deli_loc")		==null?"":rs.getString("deli_loc"));
				bean.setRet_loc			(rs.getString("ret_loc")		==null?"":rs.getString("ret_loc"));
				bean.setCms_type		(rs.getString("cms_type")		==null?"":rs.getString("cms_type"));

			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContFeeRm]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bean;
		}				
	}

	//계약등록 : 차량 삽입 (fee_rm)
	public boolean insertFeeRm(ContFeeRmBean bean)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into FEE_RM "+
						" (      "+
						"        RENT_MNG_ID, RENT_L_CD, RENT_ST, DC_S_AMT, DC_V_AMT, "+
						"        NAVI_S_AMT, NAVI_V_AMT, ETC_S_AMT, ETC_V_AMT, T_FEE_S_AMT, "+
						"        T_FEE_V_AMT, CONS1_S_AMT, CONS1_V_AMT, CONS2_S_AMT, CONS2_V_AMT, "+
						"        F_PAID_WAY, F_PAID_WAY2, F_RENT_TOT_AMT, F_CON_AMT, NAVI_YN, "+
						"        CONS1_YN, CONS2_YN, ETC_CONT, EST_ID, AMT_PER, "+
						"        CARS, AMT_01D, AMT_03D, AMT_05D, AMT_07D, "+
						"        SERIAL_NO, REG_ID, REG_DT, "+
						"        car_use, my_accid_yn, deli_plan_dt, ret_plan_dt, deli_loc, ret_loc "+
						" )"+
						"  values "+
						" (      "+
						"	     ?, ?, ?, ?, ?, "+
						"        ?, ?, ?, ?, ?, "+
						"        ?, ?, ?, ?, ?, "+
						"        ?, ?, ?, ?, ?, "+
						"        ?, ?, ?, ?, ?, "+
						"        ?, ?, ?, ?, ?, "+
						"        ?, ?, to_char(sysdate,'YYYYMMDD'), "+
						"        ?, ?, replace(?,'-',''), replace(?,'-',''), ?, ? "+
						" ) ";


		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			

			pstmt.setString(1,  bean.getRent_mng_id		());			
			pstmt.setString(2,  bean.getRent_l_cd		());			
			pstmt.setString(3,  bean.getRent_st			());			
			pstmt.setInt   (4,  bean.getDc_s_amt		());
			pstmt.setInt   (5,  bean.getDc_v_amt		());
			pstmt.setInt   (6,  bean.getNavi_s_amt		());
			pstmt.setInt   (7,  bean.getNavi_v_amt		());
			pstmt.setInt   (8,  bean.getEtc_s_amt		());
			pstmt.setInt   (9,  bean.getEtc_v_amt		());
			pstmt.setInt   (10, bean.getT_fee_s_amt		());
			pstmt.setInt   (11, bean.getT_fee_v_amt		());
			pstmt.setInt   (12, bean.getCons1_s_amt		());
			pstmt.setInt   (13, bean.getCons1_v_amt		());
			pstmt.setInt   (14, bean.getCons2_s_amt		());
			pstmt.setInt   (15, bean.getCons2_v_amt		());
			pstmt.setString(16, bean.getF_paid_way		());
			pstmt.setString(17, bean.getF_paid_way2		());
			pstmt.setInt   (18, bean.getF_rent_tot_amt	());
			pstmt.setInt   (19, bean.getF_con_amt		());
			pstmt.setString(20, bean.getNavi_yn			());			
			pstmt.setString(21, bean.getCons1_yn		());			
			pstmt.setString(22, bean.getCons2_yn		());			
			pstmt.setString(23, bean.getEtc_cont		());
			pstmt.setString(24, bean.getEst_id			());
			pstmt.setString(25, bean.getAmt_per			());
			pstmt.setString(26, bean.getCars			());
			pstmt.setInt   (27, bean.getAmt_01d			());
			pstmt.setInt   (28, bean.getAmt_03d			());
			pstmt.setInt   (29, bean.getAmt_05d			());
			pstmt.setInt   (30, bean.getAmt_07d			());
			pstmt.setString(31, bean.getSerial_no		());
			pstmt.setString(32, bean.getReg_id			());
			pstmt.setString(33, bean.getCar_use			());
			pstmt.setString(34, bean.getMy_accid_yn		());
			pstmt.setString(35, bean.getDeli_plan_dt	());
			pstmt.setString(36, bean.getRet_plan_dt		());
			pstmt.setString(37, bean.getDeli_loc		());
			pstmt.setString(38, bean.getRet_loc			());

		    pstmt.executeUpdate();
			pstmt.close();

			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertFeeRm]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				if(pstmt != null)	pstmt.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	public boolean updateFeeRm(ContFeeRmBean bean)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE_RM set "+
						"	dc_s_amt			= ?, "+
						"	dc_v_amt			= ?, "+
						"	navi_s_amt			= ?, "+
						"	navi_v_amt			= ?, "+
						"	etc_s_amt			= ?, "+
						"	etc_v_amt			= ?, "+
						"	t_fee_s_amt			= ?, "+
						"	t_fee_v_amt			= ?, "+
						"	cons1_s_amt			= ?, "+
						"	cons1_v_amt			= ?, "+
						"	cons2_s_amt			= ?, "+
						"	cons2_v_amt			= ?, "+
						"	f_paid_way			= ?, "+
						"	f_paid_way2			= ?, "+
						"	f_rent_tot_amt		= ?, "+
						"	f_con_amt			= ?, "+
						"	navi_yn				= ?, "+
						"	cons1_yn			= ?, "+
						"	cons2_yn			= ?, "+
						"	etc_cont			= ?, "+
						"	est_id				= ?, "+
						"	amt_per				= ?, "+
						"	cars				= ?, "+
						"	amt_01d				= ?, "+
						"	amt_03d				= ?, "+
						"	amt_05d				= ?, "+
						"	amt_07d				= ?, "+
						"	serial_no			= ?, "+
						"   update_id			= ?, "+
						"   update_dt			= to_char(sysdate,'YYYYMMDD'), "+
						"   car_use				= ?, "+
						"   my_accid_yn			= ?, "+
						"   deli_plan_dt		= replace(?,'-',''), "+
						"   ret_plan_dt			= replace(?,'-',''), "+
						"   deli_loc			= ?, "+
						"   ret_loc				= ?, "+
						"   cms_type			= ?  "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and rent_st=?";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			
			pstmt.setInt   (1,  bean.getDc_s_amt		());
			pstmt.setInt   (2,  bean.getDc_v_amt		());
			pstmt.setInt   (3,  bean.getNavi_s_amt		());
			pstmt.setInt   (4,  bean.getNavi_v_amt		());
			pstmt.setInt   (5,  bean.getEtc_s_amt		());
			pstmt.setInt   (6,  bean.getEtc_v_amt		());
			pstmt.setInt   (7,  bean.getT_fee_s_amt		());
			pstmt.setInt   (8,  bean.getT_fee_v_amt		());
			pstmt.setInt   (9,  bean.getCons1_s_amt		());
			pstmt.setInt   (10, bean.getCons1_v_amt		());
			pstmt.setInt   (11, bean.getCons2_s_amt		());
			pstmt.setInt   (12, bean.getCons2_v_amt		());
			pstmt.setString(13, bean.getF_paid_way		());
			pstmt.setString(14, bean.getF_paid_way2		());
			pstmt.setInt   (15, bean.getF_rent_tot_amt	());
			pstmt.setInt   (16, bean.getF_con_amt		());
			pstmt.setString(17, bean.getNavi_yn			());			
			pstmt.setString(18, bean.getCons1_yn		());			
			pstmt.setString(19, bean.getCons2_yn		());			
			pstmt.setString(20, bean.getEtc_cont		());
			pstmt.setString(21, bean.getEst_id			());
			pstmt.setString(22, bean.getAmt_per			());
			pstmt.setString(23, bean.getCars			());
			pstmt.setInt   (24, bean.getAmt_01d			());
			pstmt.setInt   (25, bean.getAmt_03d			());
			pstmt.setInt   (26, bean.getAmt_05d			());
			pstmt.setInt   (27, bean.getAmt_07d			());
			pstmt.setString(28, bean.getSerial_no		());
			pstmt.setString(29, bean.getUpdate_id		());
			pstmt.setString(30, bean.getCar_use			());
			pstmt.setString(31, bean.getMy_accid_yn		());
			pstmt.setString(32, bean.getDeli_plan_dt	());
			pstmt.setString(33, bean.getRet_plan_dt		());
			pstmt.setString(34, bean.getDeli_loc		());
			pstmt.setString(35, bean.getRet_loc			());
			pstmt.setString(36, bean.getCms_type		());
			pstmt.setString(37, bean.getRent_mng_id		());			
			pstmt.setString(38, bean.getRent_l_cd		());			
			pstmt.setString(39, bean.getRent_st			());			
			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateFeeRm]\n"+e);

	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약관리 - 수입차캐쉬백현황
	public Vector getContCashBackList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " SELECT "+
					"        a.use_yn, a.rent_mng_id, a.rent_l_cd, a.rent_dt, a.rent_start_dt, b.firm_nm, g.nm car_comp_nm, j.car_nm, f.car_no, k.user_nm, "+
					"        (h.car_cs_amt+h.car_cv_amt+h.OPT_CS_AMT+h.OPT_CV_AMT+h.CLR_CS_AMT+h.CLR_CV_AMT-h.tax_dc_s_amt-h.tax_dc_v_amt) car_c_amt, "+
					"        (h.DC_CS_AMT+h.DC_CV_AMT) dc_amt, "+
					"        l.cash_back_pay_dt, l.cash_back_pay_amt, "+
					"        h.IMPORT_CARD_AMT, h.import_cash_back, h.r_import_cash_back, NVL(h.import_cash_back,0)-NVL(h.r_import_cash_back,0) as cash_back_cha_amt, "+
					"        c2.emp_nm, c3.car_off_nm "+
					" FROM   cont a, car_etc h, car_nm i, car_mng j, users k, "+
					"        client b, car_reg f, CODE g, cont_etc l, "+
					"        (select rent_mng_id, rent_l_cd from cls_cont where cls_st='7') n, "+
					"        (select rent_mng_id, reg_dt from cls_cont where cls_st in ('4','5')) n2, "+
					"        (select * from commi where agnt_st='2' and emp_id is not null) c, car_off_emp c2, car_off c3 "+
					" WHERE  a.car_gu='1' "+
					"        AND a.rent_mng_id=h.rent_mng_id AND a.rent_l_cd=h.rent_l_cd "+
					"        AND h.car_id=i.car_id AND h.car_seq=i.car_seq "+
					"        AND i.car_comp_id > '0005' "+
					"        AND i.CAR_COMP_ID=j.car_comp_id AND i.car_cd=J.CODE "+
					"        AND a.BUS_ID=k.user_id "+
					"        AND a.client_id=b.client_id "+
					"        AND a.car_mng_id=f.car_mng_id "+
					"        AND i.car_comp_id=G.CODE AND g.c_st='0001' \n"+
				    "        AND a.rent_start_dt >= DECODE(NVL(case when a.rent_dt < '20141101' then h.IMPORT_CASH_BACK else h.R_IMPORT_CASH_BACK end,0),0,'20140601','20130101') "+
					"        AND a.rent_mng_id=l.rent_mng_id AND a.rent_l_cd=l.rent_l_cd "+
					"        and a.rent_mng_id=n.rent_mng_id(+) and a.rent_l_cd=n.rent_l_cd(+) and n.rent_l_cd is null "+
					"        and a.rent_mng_id=n2.rent_mng_id(+) and a.reg_dt=n2.reg_dt(+) and n2.rent_mng_id is null "+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd and c.emp_id=c2.emp_id and c2.car_off_id=c3.car_off_id "+
					" ";
	
			if(gubun1.equals("1")) query += " and l.cash_back_pay_dt is not null ";
			if(gubun1.equals("2")) query += " and l.cash_back_pay_dt is null ";

			String what = "";
			
			if(s_kd.equals("1"))	what = "upper(b.firm_nm)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			if(s_kd.equals("4"))	what = "g.nm";	
			if(s_kd.equals("5"))	what = "j.car_nm";
			if(s_kd.equals("6"))	what = "k.user_nm";	
			if(s_kd.equals("7"))	what = "a.rent_start_dt";	
			if(s_kd.equals("8"))	what = "c3.car_off_nm";	

			if(!what.equals("") && !t_wd.equals("")){
				if(s_kd.equals("1")) 				query += " and "+what+" like upper('%"+t_wd+"%')  \n";
				else								query += " and "+what+" like '%"+t_wd+"%'  \n";
			}

			query += " order by a.rent_start_dt desc \n";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCashBackList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리 - 수입차비용정산현황
	public Vector getContCashBackFeeList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " SELECT "+
					"        a.use_yn, a.rent_mng_id, a.rent_l_cd, a.rent_dt, a.rent_start_dt, b.firm_nm, g.nm car_comp_nm, j.car_nm, f.car_no, k.user_nm, "+
					"        (h.car_cs_amt+h.car_cv_amt+h.OPT_CS_AMT+h.OPT_CV_AMT+h.CLR_CS_AMT+h.CLR_CV_AMT-h.tax_dc_s_amt-h.tax_dc_v_amt) car_c_amt, "+
					"        (h.DC_CS_AMT+h.DC_CV_AMT) dc_amt, "+
					"        l.im_bank_pay_dt, h.import_bank_amt, h.r_import_bank_amt, nvl(h.import_bank_amt,0)-nvl(h.r_import_bank_amt,0) as cha_amt, "+
					"        c2.emp_nm, c3.car_off_nm "+
					" FROM   cont a, car_etc h, car_nm i, car_mng j, users k, "+
					"        client b, car_reg f, CODE g, cont_etc l, "+
					"        (select rent_mng_id, rent_l_cd from cls_cont where cls_st='7') n, "+
					"        (select rent_mng_id, reg_dt from cls_cont where cls_st in ('4','5')) n2, "+
					"        (select * from commi where agnt_st='2' and emp_id is not null) c, car_off_emp c2, car_off c3 "+
					" WHERE  a.car_gu='1' "+
					"        AND a.rent_mng_id=h.rent_mng_id AND a.rent_l_cd=h.rent_l_cd "+
					"        AND h.car_id=i.car_id AND h.car_seq=i.car_seq "+
					"        AND i.car_comp_id > '0005' "+
					"        AND i.CAR_COMP_ID=j.car_comp_id AND i.car_cd=J.CODE "+
					"        AND a.BUS_ID=k.user_id "+
					"        AND a.client_id=b.client_id "+
					"        AND a.car_mng_id=f.car_mng_id "+
					"        AND i.car_comp_id=G.CODE AND g.c_st='0001' \n"+
				    "        AND a.rent_start_dt >= DECODE(NVL(case when a.rent_dt < '20141101' then h.IMPORT_CASH_BACK else h.R_IMPORT_CASH_BACK end,0),0,'20140601','20130101') "+
					"        AND a.rent_mng_id=l.rent_mng_id AND a.rent_l_cd=l.rent_l_cd "+
					"        and a.rent_mng_id=n.rent_mng_id(+) and a.rent_l_cd=n.rent_l_cd(+) and n.rent_l_cd is null "+
					"        and a.rent_mng_id=n2.rent_mng_id(+) and a.reg_dt=n2.reg_dt(+) and n2.rent_mng_id is null "+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd and c.emp_id=c2.emp_id and c2.car_off_id=c3.car_off_id "+
					" ";
	
			if(gubun1.equals("1")) query += " and l.im_bank_pay_dt is not null ";
			if(gubun1.equals("2")) query += " and l.im_bank_pay_dt is null ";

			String what = "";
			
			if(s_kd.equals("1"))	what = "upper(b.firm_nm)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			if(s_kd.equals("4"))	what = "g.nm";	
			if(s_kd.equals("5"))	what = "j.car_nm";
			if(s_kd.equals("6"))	what = "k.user_nm";	
			if(s_kd.equals("7"))	what = "a.rent_start_dt";	
			if(s_kd.equals("8"))	what = "c3.car_off_nm";	

			if(!what.equals("") && !t_wd.equals("")){
				if(s_kd.equals("1")) 				query += " and "+what+" like upper('%"+t_wd+"%')  \n";
				else								query += " and "+what+" like '%"+t_wd+"%'  \n";
			}

			query += " order by a.rent_start_dt desc \n";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCashBackFeeList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//월렌트 계약관리
	public Vector getContRmList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select   ni.navi_yn, \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, nvl(c.rent_suc_dt,y.cls_dt) as rent_suc_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체', '7', '에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	"        decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지') cls_st, \n"+
					"        a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.con_day, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,mm.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					"        k.user_nm as bus_nm, k.user_m_tel as bus_m_tel,  \n"+
					"        nvl(qu.user_nm,l.user_nm) bus_agnt_nm, nvl(qu.user_m_tel,l.user_m_tel) bus_agnt_m_tel, \n"+
					"        n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel,  \n"+
					"        a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel,  \n"+
					"        a.mng_id2, u2.user_nm as mng_nm2, u2.user_m_tel as mng_m_tel2,  \n"+
					"        a.bus_id3, decode(d.ext_agnt,'',x.user_nm,k.user_nm) as bus_nm3, decode(d.ext_agnt,'',x.user_m_tel,k.user_m_tel) as bus3_m_tel,  \n"+
					"        a.sanction_id, s.user_nm as sanction_nm, \n"+
					"        nvl(w.scan_cnt,0) scan_cnt, z.ins_com_id,\n"+
					"        m.rent_st as fee_rent_st, nvl(cn.in_cnt,0) in_cnt,  \n"+
					"	     nvl(w2.scan_cnt2,0) scan_cnt2, mm.con_day as ext_day  \n"+
					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, users u2, \n"+
					"		 ( select a.rent_mng_id, a.rent_l_cd, max(a.rent_st) rent_st, sum(a.con_mon) con_mon, sum(b.con_day) con_day, "+
					"                 min(nvl(a.rent_start_dt,'')) rent_start_dt, max(nvl(a.rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee a, fee_etc b \n"+
					"          where  a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.rent_st=b.rent_st "+
					"          group by a.rent_mng_id, a.rent_l_cd \n"+
					"        ) m, \n"+
					"        cls_cont o, \n"+
					"        ( select rent_mng_id, rent_l_cd, count(*) scan_cnt from lc_scan group by rent_mng_id, rent_l_cd) w,  \n"+
					"	     users x,  \n"+
					"	     ( select * from cls_cont where cls_st in ('4','5')) y, \n"+
					"        (  select a.car_mng_id, a.ins_com_id  from insur a, ins_cls b  where  a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+) and  to_char(sysdate,'YYYYMMDD')  between to_char(to_date(a.ins_start_dt) + DECODE(a.INS_ST,'0', 0, 1) , 'yyyymmdd')  and decode(b.car_mng_id, null, a.ins_exp_dt, b.exp_dt)  ) z, \n"+
					"        fee_etc mm,  \n"+
					"        ( select rent_mng_id, rent_l_cd, count(*) in_cnt from car_call_in where out_dt is null group by rent_mng_id, rent_l_cd) cn, users qu,  \n"+
					"        ( select rent_mng_id, rent_l_cd, rent_st, count(*) scan_cnt2 from lc_scan where file_st in ('17','18') group by rent_mng_id, rent_l_cd, rent_st) w2, "+
					"        fee_rm ni, (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 \n"+
					" where  \n"+
					"        a.car_st='4' and a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"        and nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id)=k.user_id \n"+					
					"        and c.bus_agnt_id=l.user_id(+) \n"+
					"        and a.bus_id2=n.user_id(+) \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"        and a.sanction_id=s.user_id(+) \n"+
					"        and a.mng_id=u.user_id(+) \n"+
					"        and a.mng_id2=u2.user_id(+) \n"+
					"        and a.rent_mng_id=w.rent_mng_id(+) and a.rent_l_cd=w.rent_l_cd(+) \n"+
					"        and a.bus_id3=x.user_id(+) \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id(+) and d.rent_l_cd=mm.rent_l_cd(+) and d.rent_st=mm.rent_st(+) \n"+
					"        and a.rent_mng_id=cn.rent_mng_id(+) and a.rent_l_cd=cn.rent_l_cd(+) \n"+
					"        and mm.bus_agnt_id=qu.user_id(+) \n"+
					"        and d.rent_mng_id=w2.rent_mng_id(+) and d.rent_l_cd=w2.rent_l_cd(+) and d.rent_st=w2.rent_st(+) \n"+
					"		 AND d.RENT_MNG_ID = ni.rent_mng_id(+) AND d.RENT_L_CD = ni.rent_l_cd(+) and d.rent_st=ni.rent_st(+) \n"+
					"		 and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)  \n";


	
			if(gubun1.equals("Y")) query += " and nvl(a.use_yn,'Y')='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("I")) query += " and nvl(a.use_yn,'Y')='Y' and nvl(cn.in_cnt,0) > 0";
			if(gubun1.equals("G")) query += " and nvl(a.use_yn,'Y')='Y' and f.gps='Y' ";
			if(gubun1.equals("R")) query += " and nvl(a.use_yn,'Y')='Y' and a.car_st='2' ";
			if(gubun1.equals("J")) query += " and nvl(a.use_yn,'Y')='Y' and a.car_st<>'2' and nvl(w2.scan_cnt2,0)=0 and d.rent_start_dt is not null and a.rent_dt > '20100430' ";
			if(gubun1.equals("E")) query += " and nvl(a.use_yn,'Y')='Y' and d.fee_chk='1' ";
			if(gubun1.equals("F")) query += " and nvl(a.use_yn,'Y')='Y' and h.car_origin='2' ";

			if(gubun3.equals("1")) query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2")) query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3")) query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4")) query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5")) query += " and a.car_st<>'2' and a.car_gu='2'";
			if(gubun3.equals("6")) query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and y.cls_st='5'";
			if(gubun3.equals("8")) query += " and a.car_st<>'2' and y.cls_st='4'";
			if(gubun3.equals("10")) query += " and a.car_st='1'";
			if(gubun3.equals("11")) query += " and a.car_st='3'";
			if(gubun3.equals("9")) query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("20")) query += " and a.rent_st in ('3','4') and d.rent_way='3' and d.rent_st='1' and k.loan_st='2' and n.loan_st='2'";

			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			String dt1 = "";
			String dt2 = "";

			dt1 = "substr(decode(d.rent_st,'1',a.rent_dt,d.rent_dt),1,6)";
			dt2 = "decode(d.rent_st,'1',a.rent_dt,d.rent_dt)";


			if(gubun5.equals("4"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";				//당월
			else if(gubun5.equals("5"))		query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%'";	//전월
			else if(gubun5.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";				//당일
			else if(gubun5.equals("2"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";			//전일
			else if(gubun5.equals("3"))		query += " and "+dt2+" between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD') ";//2일
			else if(gubun5.equals("6")){
				if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
				if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
			}



			
			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm||e.r_site, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(f.car_no||' '||f.first_car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(f.car_doc_no, ' '))";	
			if(s_kd.equals("5"))	what = "upper(nvl(f.car_num, ' '))";	
			if(s_kd.equals("8"))	what = "upper(nvl(k.user_nm, ' '))";	
			if(s_kd.equals("9"))	what = "upper(nvl(l.user_nm, ' '))";	
			if(s_kd.equals("10"))	what = "upper(nvl(n.user_nm, ' '))";	
			if(s_kd.equals("11"))	what = "upper(nvl(u.user_nm, ' '))";	
			if(s_kd.equals("12"))	what = "upper(nvl(u2.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(b.client_nm||e.site_jang, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(decode(d.rent_st,'1',a.rent_dt,d.rent_dt), ' '))";
			if(s_kd.equals("15"))	what = "upper(nvl(x.user_nm, ' '))";
			if(s_kd.equals("16"))	what = "upper(nvl(j.car_nm, ' '))";
			if(s_kd.equals("17"))	what = "upper(nvl(f.init_reg_dt, ' '))";
			if(s_kd.equals("18"))	what = "upper(nvl(to_char(a.sanction_date,'YYYYMMDD'), ' '))";
			if(s_kd.equals("19"))	what = "upper(nvl(b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' ) ||TEXT_DECRYPT(e.enp_no, 'pw' ) , ' '))";
			if(s_kd.equals("20"))	what = "i.jg_code";
			if(s_kd.equals("21"))	what = "upper(nvl(nvl(c.rent_suc_dt,y.cls_dt), ' '))";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(!s_kd.equals("3") && !s_kd.equals("1") && !gubun1.equals("R"))		query += " and a.car_st<>'2'";				//차량번호 검색이 아닌경우 보유차는 뺄것
				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17")||s_kd.equals("18"))	t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%')  \n";

				if(s_kd.equals("14") && !gubun1.equals("R")) query += " and b.firm_nm not like '%아마존카%' \n";	

				if(s_kd.equals("12")) query += " and a.use_yn ='Y' \n";	

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";
			}else{
				//차량회수 / GPS장착 / 보유차 / 미스캔
				if(gubun1.equals("I") || gubun1.equals("G") || gubun1.equals("R") || gubun1.equals("J") || gubun1.equals("E")){
				}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{
						//계약관리 디폴트 (당월계약분)
						/*승계미포함*/query += " and nvl(a.use_yn,'Y')='Y' \n";

						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), nvl(d.rent_dt,a.rent_dt) desc, a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc \n";
					}
				}
			}



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContRmList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }



//월렌트 계약관리
	public Vector getContRmListOff(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  /*+ RULE */ ni.navi_yn, \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, nvl(c.rent_suc_dt,y.cls_dt) as rent_suc_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체', '7', '에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	"        decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지') cls_st, \n"+
					"        a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.con_day, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,mm.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					"        k.user_nm as bus_nm, k.user_m_tel as bus_m_tel,  \n"+
					"        nvl(qu.user_nm,l.user_nm) bus_agnt_nm, nvl(qu.user_m_tel,l.user_m_tel) bus_agnt_m_tel, \n"+
					"        n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel,  \n"+
					"        a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel,  \n"+
					"        a.bus_id3, decode(d.ext_agnt,'',x.user_nm,k.user_nm) as bus_nm3, decode(d.ext_agnt,'',x.user_m_tel,k.user_m_tel) as bus3_m_tel,  \n"+
					"        a.sanction_id, s.user_nm as sanction_nm, \n"+
					"        nvl(w.scan_cnt,0) scan_cnt, z.ins_com_id,\n"+
					"        m.rent_st as fee_rent_st, nvl(cn.in_cnt,0) in_cnt,  \n"+
					"	     nvl(w2.scan_cnt2,0) scan_cnt2, mm.con_day as ext_day  \n"+
					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, \n"+
					"		 ( select a.rent_mng_id, a.rent_l_cd, max(a.rent_st) rent_st, sum(a.con_mon) con_mon, sum(b.con_day) con_day, "+
					"                 min(nvl(a.rent_start_dt,'')) rent_start_dt, max(nvl(a.rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee a, fee_etc b \n"+
					"          where  a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.rent_st=b.rent_st "+
					"          group by a.rent_mng_id, a.rent_l_cd \n"+
					"        ) m, \n"+
					"        cls_cont o, \n"+

					"        ( select rent_mng_id, rent_l_cd, count(*) scan_cnt from lc_scan group by rent_mng_id, rent_l_cd) w,  \n"+
					"	     users x,  \n"+
					"	     ( select * from cls_cont where cls_st in ('4','5')) y, \n"+
					"        (  select a.car_mng_id, a.ins_com_id  from insur a, ins_cls b  where  a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+) and  to_char(sysdate,'YYYYMMDD')  between to_char(to_date(a.ins_start_dt) + DECODE(a.INS_ST,'0', 0, 1) , 'yyyymmdd')  and decode(b.car_mng_id, null, a.ins_exp_dt, b.exp_dt)  ) z, \n"+
					"        fee_etc mm,  \n"+
					"        ( select rent_mng_id, rent_l_cd, count(*) in_cnt from car_call_in where out_dt is null group by rent_mng_id, rent_l_cd) cn, users qu,  \n"+
					"        ( select rent_mng_id, rent_l_cd, rent_st, count(*) scan_cnt2 from lc_scan where file_st in ('17','18') group by rent_mng_id, rent_l_cd, rent_st) w2, "+
					"        fee_rm ni, (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2   \n"+
					" where  \n"+
					"        a.car_st='4' and a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"        and nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id)=k.user_id \n"+					
					"        and c.bus_agnt_id=l.user_id(+) \n"+
					"        and a.bus_id2=n.user_id(+) \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"        and a.sanction_id=s.user_id(+) \n"+
					"        and a.mng_id=u.user_id(+) \n"+
					"        and a.rent_mng_id=w.rent_mng_id(+) and a.rent_l_cd=w.rent_l_cd(+) \n"+
					"        and a.bus_id3=x.user_id(+) \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id(+) and d.rent_l_cd=mm.rent_l_cd(+) and d.rent_st=mm.rent_st(+) \n"+
					"        and a.rent_mng_id=cn.rent_mng_id(+) and a.rent_l_cd=cn.rent_l_cd(+) \n"+
					"        and mm.bus_agnt_id=qu.user_id(+) \n"+
					"        and d.rent_mng_id=w2.rent_mng_id(+) and d.rent_l_cd=w2.rent_l_cd(+) and d.rent_st=w2.rent_st(+) \n"+
					"		 AND d.RENT_MNG_ID = ni.rent_mng_id(+) AND d.RENT_L_CD = ni.rent_l_cd(+) and d.rent_st=ni.rent_st(+) \n"+
					"		 and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)  \n";


	
			if(gubun1.equals("Y")) query += " and nvl(a.use_yn,'Y')='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("I")) query += " and nvl(a.use_yn,'Y')='Y' and nvl(cn.in_cnt,0) > 0";
			if(gubun1.equals("G")) query += " and nvl(a.use_yn,'Y')='Y' and f.gps='Y' ";
			if(gubun1.equals("R")) query += " and nvl(a.use_yn,'Y')='Y' and a.car_st='2' ";
			if(gubun1.equals("J")) query += " and nvl(a.use_yn,'Y')='Y' and a.car_st<>'2' and nvl(w2.scan_cnt2,0)=0 and d.rent_start_dt is not null and a.rent_dt > '20100430' ";
			if(gubun1.equals("E")) query += " and nvl(a.use_yn,'Y')='Y' and d.fee_chk='1' ";
			if(gubun1.equals("F")) query += " and nvl(a.use_yn,'Y')='Y' and h.car_origin='2' ";

			if(gubun3.equals("1")) query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2")) query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3")) query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4")) query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5")) query += " and a.car_st<>'2' and a.car_gu='2'";
			if(gubun3.equals("6")) query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and y.cls_st='5'";
			if(gubun3.equals("8")) query += " and a.car_st<>'2' and y.cls_st='4'";
			if(gubun3.equals("10")) query += " and a.car_st='1'";
			if(gubun3.equals("11")) query += " and a.car_st='3'";
			if(gubun3.equals("9")) query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("20")) query += " and a.rent_st in ('3','4') and d.rent_way='3' and d.rent_st='1' and k.loan_st='2' and n.loan_st='2'";

			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			if(s_kd.equals("1"))	what = "b.firm_nm||e.r_site";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no||' '||f.first_car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("9"))	what = "l.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("13"))	what = "b.client_nm||e.site_jang";
			if(s_kd.equals("14"))	what = "decode(d.rent_st,'1',a.rent_dt,d.rent_dt)";
			if(s_kd.equals("15"))	what = "x.user_nm";
			if(s_kd.equals("16"))	what = "j.car_nm";
			if(s_kd.equals("17"))	what = "f.init_reg_dt";
			
			if(s_kd.equals("18"))	what = "to_char(a.sanction_date,'YYYYMMDD')";
			if(s_kd.equals("19"))	what = "b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' )|| TEXT_DECRYPT(e.enp_no, 'pw' )";
			if(s_kd.equals("20"))	what = "i.jg_code";
			if(s_kd.equals("21"))	what = "nvl(c.rent_suc_dt,y.cls_dt)";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(!s_kd.equals("3") && !s_kd.equals("1") && !gubun1.equals("R"))		query += " and a.car_st<>'2'";				//차량번호 검색이 아닌경우 보유차는 뺄것
				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17")||s_kd.equals("18"))	t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%')  \n";

				if(s_kd.equals("14") && !gubun1.equals("R")) query += " and b.firm_nm not like '%아마존카%' \n";	

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";
			}else{
				//차량회수 / GPS장착 / 보유차 / 미스캔
				if(gubun1.equals("I") || gubun1.equals("G") || gubun1.equals("R") || gubun1.equals("J") || gubun1.equals("E")){
				}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{
						//계약관리 디폴트 (당월계약분)
						/*승계미포함*/query += " and nvl(a.use_yn,'Y')='Y' and decode(d.rent_st,'1',a.rent_dt,d.rent_dt) like to_char(sysdate,'YYYYMM')||'%' \n";

						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), nvl(d.rent_dt,a.rent_dt) desc, a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc \n";
					}
				}
			}

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContRmList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }



	private String  getContMng_id(String car_mng_id, String reg_dt)
	{
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String rtnStr = "";
		
		String query = " select mng_id from cont "+
				 	   " where car_mng_id = ? "+
				 	   "  and  replace(rent_end_dt, '-', '')  = ? "+
					   "  and  car_st = '2' ";					   
	
		try 
		{
			pstmt = conn.prepareStatement(query);
					
			pstmt.setString(1, car_mng_id);
			pstmt.setString(2, reg_dt);
						
		 	rs = pstmt.executeQuery();
			if(rs.next()){
				rtnStr = rs.getString(1);
			}    
		    rs.close();
            pstmt.close();	
		    
	  	} catch (Exception e) {
	  		e.printStackTrace();
	  		
		} finally {
			try{	
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return rtnStr;
		}			
	}	
	
	//계약 한건 검색 : cont_view 조회
	public String getRmMng_id_Auto(String st, String rent_mng_id, String rent_l_cd, String rent_dt, String est_area)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String bus_id2 = "";
		String query = "";

		query = " select  /*+  merge(a) */ \n"+
				"        decode(c.cnt,1,c.bus_id2,0,'','999999') bus_id2 \n"+
				" from   cont_n_view a, users b, \n"+
				"        ( select client_id, min(bus_id2) bus_id2, count(*) cnt \n"+
				"          from   ( \n"+
				"                   select aa.client_id, decode(aa.car_st,'4',aa.mng_id,aa.bus_id2) bus_id2 \n"+
				"          			from   cont aa, users bb, cont_etc cc \n"+
				"          			where  nvl(aa.use_yn,'Y')='Y'  and aa.bus_id2=bb.user_id and bb.loan_st='1' \n"+
				"          				   and aa.client_id = (select client_id from cont where rent_l_cd='"+rent_l_cd+"') \n"+
				"                          and aa.rent_mng_id=cc.rent_mng_id(+) and aa.rent_l_cd=cc.rent_l_cd(+) and aa.rent_l_cd<>'"+rent_l_cd+"' \n"+
				" ";

		if(st.equals("1")) query += " and aa.car_st in ('1','3') ";
		if(st.equals("2")) query += " and aa.car_st ='4' ";


		query +="          			group by aa.client_id, decode(aa.car_st,'4',aa.mng_id,aa.bus_id2) \n"+
				"                 ) \n"+
				"          group by client_id \n"+
				"        ) c,"+
				"        ( select rent_mng_id, rent_l_cd, sum(fee_s_amt+fee_v_amt) fee_amt "+
				"          from   scd_fee "+
				"          where  rc_yn='0' and r_fee_est_dt < to_char(sysdate,'YYYYMMDD') "+
				"          group by rent_mng_id, rent_l_cd "+
				"        ) d "+
				" where  nvl(a.use_yn,'Y')='Y' and a.car_st<>'2'"+
				"        and a.bus_id=b.user_id "+
				"        and b.loan_st='2' "+
				"        and b.dept_id <> '0008'"+
				"        and a.client_id=c.client_id"+
				"        and a.rent_mng_id=d.rent_mng_id(+) and a.rent_l_cd=d.rent_l_cd(+)"+
				"        and a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"'";


		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
			if(rs.next())
			{				
				bus_id2 = rs.getString(1)==null?"":rs.getString(1);
			}
	
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRmMng_id_Auto]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bus_id2;
		}
    }

	//계출관리 - 수입차관세가격현황
	public Vector getContImportCarAmtList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " SELECT "+
					"        a.use_yn, a.rent_mng_id, a.rent_l_cd, a.rent_start_dt, a.rent_dt, b.firm_nm, g.nm car_comp_nm, j.car_nm, f.car_no, k.user_nm, "+
					"        f.import_car_amt, f.import_tax_amt, f.import_tax_dt, nvl(f.import_car_amt,0)+nvl(f.import_tax_amt,0) import_tot_amt, "+
                    "        TRUNC(TO_NUMBER(d.k_su_4)/1.1) AS import_esti_amt, "+
					"        nvl(f.import_car_amt,0)+nvl(f.import_tax_amt,0)-TRUNC(TO_NUMBER(d.k_su_4)/1.1) import_cha_amt, o2.emp_nm, o3.car_off_nm, "+
					"        (h.car_cs_amt+h.car_cv_amt) car_c_amt, "+
					"        (h.car_fs_amt+h.car_fv_amt) car_f_amt, "+
					"        (h.opt_cs_amt+h.opt_cv_amt) opt_c_amt, "+
					"        (h.clr_cs_amt+h.clr_cv_amt) clr_c_amt, "+					
					"        (h.car_cs_amt+h.car_cv_amt+h.opt_cs_amt+h.opt_cv_amt+h.clr_cs_amt+h.clr_cv_amt)-(h.car_fs_amt+h.car_fv_amt) car_spe_tax_amt, "+
					"        TRUNC((f.import_spe_tax_amt*1.1*1.3)) import_spe_tax_amt, "+
					"        TRUNC((h.car_cs_amt+h.car_cv_amt+h.opt_cs_amt+h.opt_cv_amt+h.clr_cs_amt+h.clr_cv_amt)-(h.car_fs_amt+h.car_fv_amt)-(f.import_spe_tax_amt*1.1*1.3)) cha_spe_tax_amt, "+
					"		 f.car_num	"+		//차대번호 추가(20181004)
					" FROM   cont a, car_etc h, car_nm i, car_mng j, users k, "+
					"        client b, car_reg f, CODE g, cont_etc l, "+
					"        (select rent_mng_id, rent_l_cd from cls_cont where cls_st='7') n, "+
					"        (select rent_mng_id, reg_dt from cls_cont where cls_st in ('4','5')) n2, "+
					"        fee_etc c, esti_exam d, "+
					"        (select * from commi where agnt_st='2' and emp_id is not null) o, car_off_emp o2, car_off o3 "+
					" WHERE  a.car_gu='1' AND a.rent_dt >= '20120101'  "+
					"        AND a.rent_mng_id=h.rent_mng_id AND a.rent_l_cd=h.rent_l_cd "+
					"        AND h.car_id=i.car_id AND h.car_seq=i.car_seq "+
					"        AND i.car_comp_id > '0005' "+
					"        AND i.CAR_COMP_ID=j.car_comp_id AND i.car_cd=J.CODE "+
					"        AND a.BUS_ID=k.user_id "+
					"        AND a.client_id=b.client_id "+
					"        AND a.car_mng_id=f.car_mng_id(+) "+
					"        AND i.car_comp_id=G.CODE AND g.c_st='0001' \n"+
					"        AND a.rent_mng_id=l.rent_mng_id AND a.rent_l_cd=l.rent_l_cd "+
					"        and a.rent_mng_id=n.rent_mng_id(+) and a.rent_l_cd=n.rent_l_cd(+) and n.rent_l_cd is null "+
					"        and a.rent_mng_id=n2.rent_mng_id(+) and a.reg_dt=n2.reg_dt(+) and n2.rent_mng_id is null "+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd and c.rent_st='1' "+
					"        and c.bc_est_id=d.est_id "+
					"        and a.rent_mng_id=o.rent_mng_id and a.rent_l_cd=o.rent_l_cd and o.emp_id=o2.emp_id and o2.car_off_id=o3.car_off_id "+
					" ";


			String dt1 = "substr(nvl(a.rent_start_dt,a.rent_dt),1,6)";
			String dt2 = "nvl(a.rent_start_dt,a.rent_dt)";

			if(gubun1.equals("1"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
			else if(gubun1.equals("2"))		query += " and "+dt2+" like to_char(add_months(sysdate, -1),'YYYYMM')||'%'";
			else if(gubun1.equals("3")){
				if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
				if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
			}


			String what = "";
			
			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			if(s_kd.equals("4"))	what = "g.nm";	
			if(s_kd.equals("5"))	what = "j.car_nm";
			if(s_kd.equals("6"))	what = "k.user_nm";	
			if(s_kd.equals("8"))	what = "o3.car_off_nm";	

			if(!what.equals("") && !t_wd.equals("")){
				if(s_kd.equals("1")) 				query += " and "+what+" like upper('%"+t_wd+"%')  \n";
				else								query += " and "+what+" like '%"+t_wd+"%'  \n";
			}

			query += " order by nvl(a.rent_start_dt,a.rent_dt) desc \n";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContImportCarAmtList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약기타정보 조회
	public ContEtcBean getContEtcGrtSuc(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEtcBean base = new ContEtcBean();
		String query = "";
		query = " select * from cont_etc where grt_suc_m_id=? and grt_suc_l_cd=?";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setRent_mng_id					(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				base.setRent_l_cd					(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				base.setMng_br_id					(rs.getString("mng_br_id")==null?"":rs.getString("mng_br_id"));
				base.setBus_agnt_id					(rs.getString("bus_agnt_id")==null?"":rs.getString("bus_agnt_id"));
				base.setRec_st						(rs.getString("rec_st")==null?"":rs.getString("rec_st"));
				base.setEle_tax_st					(rs.getString("ele_tax_st")==null?"":rs.getString("ele_tax_st"));
				base.setTax_extra					(rs.getString("tax_extra")==null?"":rs.getString("tax_extra"));
				base.setSanction_st					(rs.getString("sanction_st")==null?"":rs.getString("sanction_st"));
				base.setGuar_st						(rs.getString("guar_st")==null?"":rs.getString("guar_st").trim());
				base.setGuar_con					(rs.getString("guar_con")==null?"":rs.getString("guar_con"));
				base.setGuar_sac_id					(rs.getString("guar_sac_id")==null?"":rs.getString("guar_sac_id"));
				base.setDec_gr						(rs.getString("dec_gr")==null?"":rs.getString("dec_gr"));
				base.setDec_f_id					(rs.getString("dec_f_id")==null?"":rs.getString("dec_f_id"));
				base.setDec_f_dt					(rs.getString("dec_f_dt")==null?"":rs.getString("dec_f_dt"));
				base.setDec_l_id					(rs.getString("dec_l_id")==null?"":rs.getString("dec_l_id"));
				base.setDec_l_dt					(rs.getString("dec_l_dt")==null?"":rs.getString("dec_l_dt"));
				base.setInsur_per					(rs.getString("insur_per")==null?"":rs.getString("insur_per"));
				base.setCanoisr_yn					(rs.getString("canoisr_yn")==null?"":rs.getString("canoisr_yn"));
				base.setCacdt_yn					(rs.getString("cacdt_yn")==null?"":rs.getString("cacdt_yn"));
				base.setEme_yn						(rs.getString("eme_yn")==null?"":rs.getString("eme_yn"));
				base.setJa_reason					(rs.getString("ja_reason")==null?"":rs.getString("ja_reason"));
				base.setRea_appr_id					(rs.getString("rea_appr_id")==null?"":rs.getString("rea_appr_id"));
				base.setAir_ds_yn					(rs.getString("air_ds_yn")==null?"":rs.getString("air_ds_yn"));
				base.setAir_as_yn					(rs.getString("air_as_yn")==null?"":rs.getString("air_as_yn"));
				base.setAir_cu_yn					(rs.getString("air_cu_yn")==null?"":rs.getString("air_cu_yn"));
				base.setAuto_yn						(rs.getString("auto_yn")==null?"":rs.getString("auto_yn"));
				base.setAbs_yn						(rs.getString("abs_yn")==null?"":rs.getString("abs_yn"));
				base.setRob_yn						(rs.getString("rob_yn")==null?"":rs.getString("rob_yn"));
				base.setSp_car_yn					(rs.getString("sp_car_yn")==null?"":rs.getString("sp_car_yn"));
				base.setAc_dae_yn					(rs.getString("ac_dae_yn")==null?"":rs.getString("ac_dae_yn"));
				base.setPro_yn						(rs.getString("pro_yn")==null?"":rs.getString("pro_yn"));
				base.setCyc_yn						(rs.getString("cyc_yn")==null?"":rs.getString("cyc_yn"));
				base.setMain_yn						(rs.getString("main_yn")==null?"":rs.getString("main_yn"));
				base.setMa_dae_yn					(rs.getString("ma_dae_yn")==null?"":rs.getString("ma_dae_yn"));
				base.setIp_insur					(rs.getString("ip_insur")==null?"":rs.getString("ip_insur"));
				base.setIp_agent					(rs.getString("ip_agent")==null?"":rs.getString("ip_agent"));
				base.setIp_dam						(rs.getString("ip_dam")==null?"":rs.getString("ip_dam"));
				base.setIp_tel						(rs.getString("ip_tel")==null?"":rs.getString("ip_tel"));
				base.setFin_seq						(rs.getString("fin_seq")==null?"":rs.getString("fin_seq"));
				base.setClient_guar_st				(rs.getString("client_guar_st")==null?"":rs.getString("client_guar_st").trim());
				base.setDec_etc						(rs.getString("dec_etc")==null?"":rs.getString("dec_etc"));
				base.setGuar_est_dt					(rs.getString("guar_est_dt")==null?"":rs.getString("guar_est_dt").trim());
				base.setGuar_etc					(rs.getString("guar_etc")==null?"":rs.getString("guar_etc"));
				base.setGuar_end_st					(rs.getString("guar_end_st")==null?"":rs.getString("guar_end_st"));
				base.setRent_suc_commi				(rs.getString("RENT_SUC_COMMI")==null? 0:Integer.parseInt(rs.getString("RENT_SUC_COMMI")));
				base.setRent_suc_dt					(rs.getString("RENT_SUC_DT")==null?"":rs.getString("RENT_SUC_DT").trim());
				base.setGrt_suc_m_id				(rs.getString("grt_suc_m_id")==null?"":rs.getString("grt_suc_m_id").trim());
				base.setGrt_suc_l_cd				(rs.getString("grt_suc_l_cd")==null?"":rs.getString("grt_suc_l_cd"));
				base.setGrt_suc_c_no				(rs.getString("grt_suc_c_no")==null?"":rs.getString("grt_suc_c_no"));
				base.setGrt_suc_o_amt				(rs.getString("grt_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("grt_suc_o_amt")));
				base.setGrt_suc_r_amt				(rs.getString("grt_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("grt_suc_r_amt")));
				base.setCar_deli_dt					(rs.getString("car_deli_dt")==null?"":rs.getString("car_deli_dt").trim());
				base.setRent_suc_grt_yn				(rs.getString("rent_suc_grt_yn")==null?"":rs.getString("rent_suc_grt_yn").trim());
				base.setRent_suc_m_id				(rs.getString("rent_suc_m_id")==null?"":rs.getString("rent_suc_m_id").trim());
				base.setRent_suc_l_cd				(rs.getString("rent_suc_l_cd")==null?"":rs.getString("rent_suc_l_cd"));
				base.setRent_suc_fee_tm				(rs.getString("rent_suc_fee_tm")==null?"":rs.getString("rent_suc_fee_tm"));
				base.setEst_area					(rs.getString("est_area")==null?"":rs.getString("est_area"));
				base.setCacdt_me_amt				(rs.getString("cacdt_me_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_me_amt")));
				base.setCacdt_memin_amt				(rs.getString("cacdt_memin_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_memin_amt")));
				base.setCacdt_mebase_amt			(rs.getString("cacdt_mebase_amt")==null? 0:Integer.parseInt(rs.getString("cacdt_mebase_amt")));
				base.setRent_suc_commi_pay_st		(rs.getString("rent_suc_commi_pay_st")==null?"":rs.getString("rent_suc_commi_pay_st").trim());
				base.setRent_suc_fee_tm_b_dt		(rs.getString("rent_suc_fee_tm_b_dt")==null?"":rs.getString("rent_suc_fee_tm_b_dt"));
				base.setCar_cng_yn					(rs.getString("car_cng_yn")==null?"":rs.getString("car_cng_yn"));
				base.setCash_back_pay_dt			(rs.getString("cash_back_pay_dt")==null?"":rs.getString("cash_back_pay_dt"));
				base.setCash_back_pay_amt			(rs.getString("cash_back_pay_amt")==null? 0:Integer.parseInt(rs.getString("cash_back_pay_amt")));
				base.setCounty						(rs.getString("county")==null?"":rs.getString("county"));
				base.setSuc_rent_st					(rs.getString("suc_rent_st")==null?"":rs.getString("suc_rent_st"));
				base.setBlackbox_yn					(rs.getString("blackbox_yn")==null?"":rs.getString("blackbox_yn"));
				base.setRent_suc_exem_cau			(rs.getString("rent_suc_exem_cau")==null?"":rs.getString("rent_suc_exem_cau").trim());
				base.setRent_suc_exem_id			(rs.getString("rent_suc_exem_id")==null?"":rs.getString("rent_suc_exem_id").trim());
				base.setRent_suc_route				(rs.getString("rent_suc_route")==null?"":rs.getString("rent_suc_route").trim());
				base.setInsurant					(rs.getString("insurant")==null?"":rs.getString("insurant"));
				base.setRent_suc_dist				(rs.getString("RENT_SUC_DIST")==null? 0:Integer.parseInt(rs.getString("RENT_SUC_DIST")));
				base.setClient_share_st				(rs.getString("client_share_st")==null?"":rs.getString("client_share_st").trim());
				base.setCom_emp_yn			   		(rs.getString("com_emp_yn")==null?"":rs.getString("com_emp_yn").trim());
				base.setCom_emp_sac_id		    	(rs.getString("com_emp_sac_id")==null?"":rs.getString("com_emp_sac_id").trim());
				base.setCom_emp_sac_dt		    	(rs.getString("com_emp_sac_dt")==null?"":rs.getString("com_emp_sac_dt").trim());
				base.setSpe_est_id			   		(rs.getString("spe_est_id")==null?"":rs.getString("spe_est_id").trim());
				base.setLkas_yn			    		(rs.getString("lkas_yn")==null?"":rs.getString("lkas_yn").trim());
				base.setLdws_yn			   	 		(rs.getString("ldws_yn")==null?"":rs.getString("ldws_yn").trim());
				base.setAeb_yn			   			(rs.getString("aeb_yn")==null?"":rs.getString("aeb_yn").trim());
				base.setFcw_yn			    		(rs.getString("fcw_yn")==null?"":rs.getString("fcw_yn").trim());
				base.setEv_yn			    		(rs.getString("ev_yn")==null?"":rs.getString("ev_yn").trim());
				base.setHook_yn			    		(rs.getString("hook_yn")==null?"":rs.getString("hook_yn").trim());
				base.setLegal_yn			    		(rs.getString("legal_yn")==null?"":rs.getString("legal_yn").trim());
				base.setDlv_con_commi_yn	   		(rs.getString("dlv_con_commi_yn")==null?"":rs.getString("dlv_con_commi_yn").trim());
				base.setCar_use_addr	   			(rs.getString("car_use_addr")==null?"":rs.getString("car_use_addr").trim());	//차량이용지 주소 추가(2018.03.09) 
				base.setMng_type		    		(rs.getString("mng_type")==null?"":rs.getString("mng_type").trim());
				base.setCls_etc			    		(rs.getString("cls_etc")==null?"":rs.getString("cls_etc").trim());
				base.setIm_bank_pay_dt				(rs.getString("im_bank_pay_dt")==null?"":rs.getString("im_bank_pay_dt"));				
				base.setDir_pur_commi_yn			(rs.getString("dir_pur_commi_yn")==null?"":rs.getString("dir_pur_commi_yn"));
				base.setView_car_dc					(rs.getString("view_car_dc")==null? 0:Integer.parseInt(rs.getString("view_car_dc")));//20190911
				base.setOthers_device				(rs.getString("others_device")==null?"":rs.getString("others_device"));
				base.setCar_deli_est_dt				(rs.getString("car_deli_est_dt")==null?"":rs.getString("car_deli_est_dt").trim());
				
				base.setRent_suc_pp_yn				(rs.getString("rent_suc_pp_yn")==null?"":rs.getString("rent_suc_pp_yn").trim());
				base.setPp_suc_o_amt				(rs.getString("pp_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("pp_suc_o_amt")));
				base.setPp_suc_r_amt				(rs.getString("pp_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("pp_suc_r_amt")));
				base.setRent_suc_ifee_yn			(rs.getString("rent_suc_ifee_yn")==null?"":rs.getString("rent_suc_ifee_yn").trim());
				base.setIfee_suc_o_amt				(rs.getString("ifee_suc_o_amt")==null? 0:Integer.parseInt(rs.getString("ifee_suc_o_amt")));
				base.setIfee_suc_r_amt				(rs.getString("ifee_suc_r_amt")==null? 0:Integer.parseInt(rs.getString("ifee_suc_r_amt")));
				base.setN_mon			    		(rs.getString("n_mon")==null?"":rs.getString("n_mon").trim());
				base.setN_day			    		(rs.getString("n_day")==null?"":rs.getString("n_day").trim());
				
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEtc]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//고객신용평가 대체키 등록
	public boolean insertContEvalKey(ContEvalBean eval)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into CONT_EVAL_KEY "+
						" ( key_no, name, birth_dt, m_tel, memo, key_nice, key_kcb ) "+
						" values "+
						" ( ?, ?, replace(?,'-',''), replace(?,'-',''), ?, ?, ? ) ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
		    pstmt.setString(1,  eval.getKey_no			());
			pstmt.setString(2,  eval.getKey_name		());
			pstmt.setString(3,  eval.getKey_birth_dt	());
			pstmt.setString(4,	eval.getKey_m_tel		());
			pstmt.setString(5,	eval.getKey_memo		());
			pstmt.setString(6,	eval.getKey_nice		());
			pstmt.setString(7,	eval.getKey_kcb			());

		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertContEvalKey]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약등록/수정 : 고객평가 수정
	public boolean updateContEvalKey(ContEvalBean eval)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CONT_EVAL_KEY set "+
						" name		= ?, "+
						" birth_dt	= replace(?, '-', ''), "+
						" m_tel		= replace(?, '-', ''), "+
						" memo		= ?, "+
						" key_nice	= ?, "+
						" key_kcb	= ?  "+
		" where key_no = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  eval.getKey_name		());
			pstmt.setString(2,  eval.getKey_birth_dt	());
			pstmt.setString(3,	eval.getKey_m_tel		());
			pstmt.setString(4,	eval.getKey_memo		());
			pstmt.setString(5,	eval.getKey_nice		());
			pstmt.setString(6,	eval.getKey_kcb			());
		    pstmt.setString(7,  eval.getKey_no			());
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateContEvalKey]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//고객평가 조회
	
	public ContEvalBean getContEvalKey(String name, String birth_dt, String m_tel)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEvalBean base = new ContEvalBean();
		String query = "";

		query = " select * from cont_eval_key where birth_dt=replace(?,'-','') ";

		if(!name.equals(""))	query += " and name like replace('%"+name+"%', ' ','')";
		if(!m_tel.equals(""))	query += " and m_tel like replace('%"+m_tel+"%', '-','')";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, birth_dt);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setKey_no			(rs.getString("KEY_NO")==null?"":rs.getString("KEY_NO"));
				base.setKey_name		(rs.getString("NAME")==null?"":rs.getString("NAME"));
				base.setKey_birth_dt	(rs.getString("BIRTH_DT")==null?"":rs.getString("BIRTH_DT"));
				base.setKey_m_tel		(rs.getString("M_TEL")==null?"":rs.getString("M_TEL"));
				base.setKey_memo		(rs.getString("MEMO")==null?"":rs.getString("MEMO"));
				base.setKey_nice		(rs.getString("KEY_NICE")==null?"":rs.getString("KEY_NICE"));
				base.setKey_kcb			(rs.getString("KEY_KCB")==null?"":rs.getString("KEY_KCB"));			
			}

			rs.close();
			pstmt.close();

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEvalKey]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//고객평가 조회
	
	public ContEvalBean getContEvalKey(String key_no)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContEvalBean base = new ContEvalBean();
		String query = "";

		query = " select * from cont_eval_key where key_no=replace(?,'-','') ";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, key_no);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				base.setKey_no			(rs.getString("KEY_NO")==null?"":rs.getString("KEY_NO"));
				base.setKey_name		(rs.getString("NAME")==null?"":rs.getString("NAME"));
				base.setKey_birth_dt	(rs.getString("BIRTH_DT")==null?"":rs.getString("BIRTH_DT"));
				base.setKey_m_tel		(rs.getString("M_TEL")==null?"":rs.getString("M_TEL"));
				base.setKey_memo		(rs.getString("MEMO")==null?"":rs.getString("MEMO"));
				base.setKey_nice		(rs.getString("KEY_NICE")==null?"":rs.getString("KEY_NICE"));
				base.setKey_kcb			(rs.getString("KEY_KCB")==null?"":rs.getString("KEY_KCB"));			
			}

			rs.close();
			pstmt.close();

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEvalKey(String key_no)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return base;
		}
	}

	//신용조회 대체키 조회
	public Vector getContEvalKeyList(String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select * from cont_eval_key where birth_dt=replace('"+gubun2+"','-','') ";

		if(!gubun1.equals(""))	query += " and name like replace('%"+gubun1+"%', ' ','')";
		if(!gubun3.equals(""))	query += " and m_tel like replace('%"+gubun3+"%', '-','')";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
	    	    	
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContEvalKeyList()]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	public boolean updateFeeEtcBus(ContCarBean car)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update FEE_ETC set "+
						" bus_yn	= ?, "+
						" bus_cau	= ?, "+
						" bus_cau_dt= decode(bus_cau_dt,'',sysdate,bus_cau_dt) "+
						" where RENT_MNG_ID = ? and RENT_L_CD = ? and rent_st=? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1, car.getBus_yn			());
			pstmt.setString(2, car.getBus_cau			());
			pstmt.setString(3, car.getRent_mng_id		());			
			pstmt.setString(4, car.getRent_l_cd			());			
			pstmt.setString(5, car.getRent_st			());			
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateFeeEtcBus]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

  
  /****************************************************************************************
	*******************************************   agent
    ****************************************************************************************/

	//계약관리 - agent
	public Vector getContList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String ck_acar_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select /*+ RULE */ \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, nvl(c.rent_suc_dt,y.cls_dt) as rent_suc_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm. ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	"        decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지') cls_st, \n"+
					"        a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,mm.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					"        k.user_nm as bus_nm, k.user_m_tel as bus_m_tel,  \n"+
					"        nvl(qu.user_nm,l.user_nm) bus_agnt_nm, nvl(qu.user_m_tel,l.user_m_tel) bus_agnt_m_tel, \n"+
					"        n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel,  \n"+
					"        a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel,  \n"+
					"        a.bus_id3, decode(d.ext_agnt,'',x.user_nm,k.user_nm) as bus_nm3, decode(d.ext_agnt,'',x.user_m_tel,k.user_m_tel) as bus3_m_tel,  \n"+
					"        a.sanction_id, s.user_nm as sanction_nm, \n"+
					"        nvl(w.scan_cnt,0) scan_cnt, z.ins_com_id,\n"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        m.rent_st as fee_rent_st, nvl(cn.in_cnt,0) in_cnt,  \n"+
					"	     nvl(w2.scan_cnt2,0) scan_cnt2  \n"+
					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, \n"+
					"		 ( select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee  \n"+
					"          group by rent_mng_id, rent_l_cd \n"+
					"        ) m, \n"+
					"        cls_cont o, \n"+
					"        ( select rent_mng_id, rent_l_cd, count(*) scan_cnt from lc_scan group by rent_mng_id, rent_l_cd) w,  \n"+
					"	     users x,  \n"+
					"	     ( select * from cls_cont where cls_st in ('4','5')) y, \n"+
					"       (  select a.car_mng_id, a.ins_com_id  from insur a, ins_cls b  where  a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+) and  to_char(sysdate,'YYYYMMDD')  between to_char(to_date(a.ins_start_dt) + DECODE(a.INS_ST,'0', 0, 1) , 'yyyymmdd')  and decode(b.car_mng_id, null, a.ins_exp_dt, b.exp_dt)  ) z, \n"+
					"        fee_etc mm,  \n"+
					"        ( select rent_mng_id, rent_l_cd, count(*) in_cnt from car_call_in where out_dt is null group by rent_mng_id, rent_l_cd) cn, users qu,  \n"+
					"        ( select rent_mng_id, rent_l_cd, rent_st, count(*) scan_cnt2 from lc_scan where file_st in ('17','18') group by rent_mng_id, rent_l_cd, rent_st) w2,  \n"+
					"        ( select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2   \n"+
					" where  \n"+
					"        a.bus_id='"+ck_acar_id+"' and a.car_st<>'2' "+
					"        and a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"        and nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id)=k.user_id \n"+					
					"        and c.bus_agnt_id=l.user_id(+) \n"+
					"        and a.bus_id2=n.user_id(+) \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"        and a.sanction_id=s.user_id(+) \n"+
					"        and a.mng_id=u.user_id(+) \n"+
					"        and a.rent_mng_id=w.rent_mng_id(+) and a.rent_l_cd=w.rent_l_cd(+) \n"+
					"        and a.bus_id3=x.user_id(+) \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) and y.rent_mng_id is null \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id(+) and d.rent_l_cd=mm.rent_l_cd(+) and d.rent_st=mm.rent_st(+) \n"+
					"        and a.rent_mng_id=cn.rent_mng_id(+) and a.rent_l_cd=cn.rent_l_cd(+) \n"+
					"        and mm.bus_agnt_id=qu.user_id(+) \n"+
					"        and d.rent_mng_id=w2.rent_mng_id(+) and d.rent_l_cd=w2.rent_l_cd(+) and d.rent_st=w2.rent_st(+) \n"+
					"        and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)  \n"+
					" ";

	
			if(gubun1.equals("Y"))	query += " and nvl(a.use_yn,'Y')='Y'";
			if(gubun1.equals("N"))	query += " and a.use_yn='N'";
			if(gubun1.equals("0"))	query += " and a.use_yn is null";

			if(gubun3.equals("1"))	query += " and d.rent_way='1'";
			if(gubun3.equals("2"))	query += " and d.rent_way in ('2','3')";
			if(gubun3.equals("10")) query += " and a.car_st='1'";
			if(gubun3.equals("11")) query += " and a.car_st='3'";
			if(gubun3.equals("12")) query += " and a.car_st<>'2' and a.rent_st='1' and d.rent_st='1'";
			if(gubun3.equals("13")) query += " and a.car_st<>'2' and a.rent_st='4' and d.rent_st='1'";
			if(gubun3.equals("14")) query += " and a.car_st<>'2' and a.rent_st='3' and d.rent_st='1'";


			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";
			
			if(s_kd.equals("1"))	what = "b.firm_nm||e.r_site";
			if(s_kd.equals("13"))	what = "b.client_nm||e.site_jang";
			if(s_kd.equals("19"))	what = "b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' )|| TEXT_DECRYPT(e.enp_no, 'pw' ) ";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no||' '||f.first_car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("16"))	what = "j.car_nm";
			if(s_kd.equals("9"))	what = "l.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("14"))	what = "decode(d.rent_st,'1',a.rent_dt,d.rent_dt)";
			if(s_kd.equals("17"))	what = "f.init_reg_dt";
			
			if(!what.equals("") && !t_wd.equals("")){
				
				if(t_wd.indexOf("'") != -1)						t_wd = AddUtil.replace(t_wd,"'","");

				if(s_kd.equals("14")||s_kd.equals("17"))		t_wd = AddUtil.replace(t_wd,"-","");

				query += " and "+what+" like upper('%"+t_wd+"%')  \n";

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";

			}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{

						/*디폴트 당월*/
						query += " and nvl(a.use_yn,'Y')='Y' and decode(d.rent_st,'1',a.rent_dt,d.rent_dt) like to_char(sysdate,'YYYYMM')||'%' and b.firm_nm not like '%아마존카%' \n";

						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc, nvl(d.rent_dt,a.rent_dt) \n";
					}
			}

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String ck_acar_id)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }


	//미결 계약 검색 : 리스트 조회
	public Vector getHoldContList(String s_kd, String t_wd, String andor, String gubun2, String gubun3, String ck_acar_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select /*+ rule */ "+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.brch_id, c.mng_br_id,"+
					"        b.firm_nm, a.bus_id, decode(d.rent_st,'1',c.bus_agnt_id,q.bus_agnt_id) bus_agnt_id, a.bus_id2, nvl(d.rent_dt,a.rent_dt) rent_dt, nvl(c.rent_suc_dt,o.cls_dt) rent_suc_dt, "+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st, "+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st,"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu,"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, "+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way,"+
					"        decode(d.rent_st,'1','','연장') ext_st,"+
  					"        decode(d.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(o.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(o.cls_st,'4','차종변경','5','계약승계') cng_st,"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm,"+
					"        f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, "+
					"        nvl(ec.nm, ec2.nm) car_ext,"+
					"        g.rpt_no, j.car_nm,"+
					"        k.user_nm as bus_nm, nvl(qu.user_nm,l.user_nm) as bus_agnt_nm, n.user_nm as bus_nm2, decode(d.ext_agnt,'',m.user_nm,k.user_nm) as bus_nm3, d.rent_st as fee_rent_st,"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        a.reg_step "+
					" from   cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, car_etc h, car_nm i, car_mng j, users k, users l, users n, users m, "+
					"        (select * from cls_cont where cls_st in ('4','5')) o,"+
					"        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) p, fee_etc q, users qu,"+
					"        (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 "+
					" where  a.bus_id='"+ck_acar_id+"' and a.car_st<>'2' and a.use_yn is null "+
					"        and a.client_id=b.client_id"+
					"        and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+)"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+)"+
					"        and a.car_mng_id=f.car_mng_id(+)"+
					"        and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code"+
					"        and nvl(d.ext_agnt,a.bus_id)=k.user_id"+
					"        and c.bus_agnt_id=l.user_id(+)"+
					"        and a.bus_id2=n.user_id(+)"+
					"        and a.bus_id3=m.user_id(+)"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.reg_dt=o.reg_dt(+) and o.rent_mng_id is null "+
					"        and d.rent_mng_id=p.rent_mng_id and d.rent_l_cd=p.rent_l_cd and d.rent_st=p.rent_st"+
					"        and d.rent_mng_id=q.rent_mng_id(+) and d.rent_l_cd=q.rent_l_cd(+) and d.rent_st=q.rent_st(+)"+
					"        and q.bus_agnt_id=qu.user_id(+)"+
					"        and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+) "+
					" ";

			if(gubun3.equals("1")) query += " and a.car_st='1'";
			if(gubun3.equals("2")) query += " and a.car_st='3'";
			if(gubun3.equals("3")) query += " and d.rent_way='1'";
			if(gubun3.equals("4")) query += " and d.rent_way in ('2','3')";
			if(gubun3.equals("12")) query += " and a.car_st<>'2' and a.rent_st='1' and d.rent_st='1'";
			if(gubun3.equals("13")) query += " and a.car_st<>'2' and a.rent_st='4' and d.rent_st='1'";
			if(gubun3.equals("14")) query += " and a.car_st<>'2' and a.rent_st='3' and d.rent_st='1'";

			
			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(f.car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(f.car_doc_no, ' '))";	
			if(s_kd.equals("5"))	what = "upper(nvl(f.car_num, ' '))";		
			if(s_kd.equals("6"))	what = "upper(nvl(g.rpt_no, ' '))";	
			if(s_kd.equals("7"))	what = "upper(nvl(a.brch_id, ' '))";	
			if(s_kd.equals("9"))	what = "upper(nvl(j.car_nm||i.car_name, ' '))";	
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}

			query += " order by decode(length(a.sanction),8,'요청','미결') desc, "+
					 "          a.rent_dt desc, "+
					 "          a.rent_mng_id";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
	    	    	
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getHoldContList(String s_kd, String t_wd, String andor, String gubun2, String gubun3, String ck_acar_id)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }


	//계약현황판 리스트 조회
	public Vector getRentBoardList(String s_kd, String t_wd, String gubun1, String gubun2, String st_dt, String end_dt, String ck_acar_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select /*+ rule */ "+
				" a.rent_mng_id, a.rent_l_cd, a.use_yn, a.client_id, a.car_mng_id, a.rent_dt, a.bus_id, "+
				" nvl(c.car_no,d.est_car_no) car_no, nvl(c.car_num,d.car_num) car_num, e.firm_nm, h.car_nm, f.colo, f.sun_per,"+
				" nvl(d.dlv_brch,l.car_off_nm) dlv_brch, d.rpt_no, d.dlv_ext, substr(d.dlv_est_dt,1,8) dlv_est_dt, a.dlv_dt, d.udt_est_dt, d.udt_dt, d.pur_pay_dt,"+
				" decode(d.udt_st,'1','본사','2','부산지점','3','대전지점','4','고객','5','대구지점','6','광주지점','') udt_st,"+
				" m.pp_amt, m.pay_amt, m.jan_amt,"+
				" decode(m.pp_amt,0,'면제',decode(m.jan_amt,0,'완납','잔액')) pp_st,"+
				" decode(f.gi_st,'1',decode(n.gi_dt,'','미가입','가입완료'),'면제') gi_st,"+
				" decode(o.car_mng_id,'','미가입','가입') ins_st,"+
				" decode(a.car_st,'3','리스','렌트') car_st,"+
				" decode(b.rent_way,'1','일반식','기본식') rent_way,"+
				" (f.car_fs_amt+f.car_fv_amt+f.sd_cs_amt+f.sd_cv_amt-f.dc_cs_amt-f.dc_cv_amt) car_amt,"+
				" decode(b.rent_start_dt,'',decode(c.init_reg_dt,'',decode(a.dlv_dt,'','출고예정','등록예정'),'납품예정'),decode(c.init_reg_dt,'',decode(a.dlv_dt,'','출고예정','등록예정'),'납품완료')) rent_st,"+
				" nvl(ec.nm, ec2.nm) car_ext,"+
				" substr(f.reg_est_dt,1,8) reg_est_dt, c.init_reg_dt,"+
				" substr(b.rent_est_dt,1,8) rent_est_dt, b.rent_start_dt, d.rent_ext, p.off_nm,"+
				" i.user_nm as bus_nm, j.user_nm as bus_nm2, k.user_nm as mng_nm, q.br_nm, "+
				" decode(b.rent_start_dt,'',decode(c.init_reg_dt,'',decode(a.dlv_dt,'','4','3'),'2'),'1') sort1, substr(d.dlv_est_dt,1,8) sort2, a.rent_dt sort3, "+
				" substr(r.sup_est_dt,1,8) sup_est_dt, l.car_off_tel, nvl(s.car_deli_dt,b.rent_start_dt) as car_deli_dt, s.car_deli_est_dt, "+
				" decode(d.acq_cng_yn,'Y','있음','N','없음') acq_cng_yn, d.cpt_cd, c.acq_amt, "+
				" decode(q.doc_id,'','',to_char(q.user_dt2,'YYYYMMDD')) doc_user_dt2, "+
				" r.tint_no, decode(r.blackbox_yn,'Y','장착','') blackbox_yn_nm, r.blackbox_img, r.blackbox_img2, "+

				" substr(r2.sup_est_dt,1,8) sup_est_dt2, "+
				" r2.tint_no as tint_no2, r2.s1_yn, r2.s2_yn, r2.b_yn, r2.n_yn, r2.e_yn, r2.b_com_nm,  "+

                " z.emp_nm as agent_emp_nm, z.emp_m_tel as agent_emp_m_tel "+


				" from cont a, fee b, car_reg c, car_pur d, client e, car_etc f, car_nm g, car_mng h, users i, users j, users k, gua_ins n, branch q, tint r, cont_etc s, "+
				"      (select a.*, c.car_off_nm, c.car_off_tel from commi a, car_off_emp b, car_off c where a.agnt_st='2' and a.emp_id=b.emp_id and b.car_off_id=c.car_off_id) l,"+
				"      (select rent_mng_id, rent_l_cd, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0))-sum(ext_pay_amt) jan_amt from scd_ext where rent_st='1' and ext_st in ('0','1','2') group by rent_mng_id, rent_l_cd) m,"+
				"      (select car_mng_id from insur where to_char(sysdate,'YYYYMMDD') between ins_start_dt and ins_exp_dt group by car_mng_id) o,"+
				"      (select rent_mng_id, rent_l_cd, min(off_nm) off_nm from consignment where cons_cau='1' group by rent_mng_id, rent_l_cd) p,"+
				"      (select * from cls_cont where cls_st in ('4','5')) t, "+
				"      (select * from doc_settle where doc_st='5' and doc_step='3') q, "+
				"       (SELECT rent_mng_id, rent_l_cd, min(tint_no) tint_no,  "+
				"               MIN(DECODE(tint_st,'1',DECODE(tint_yn,'Y','Y'))) s1_yn, "+
				"               MIN(DECODE(tint_st,'2',DECODE(tint_yn,'Y','Y'))) s2_yn, "+
				"               MIN(DECODE(tint_st,'3',DECODE(tint_yn,'Y','Y'))) b_yn, "+
				"               MIN(DECODE(tint_st,'4',DECODE(tint_yn,'Y','Y'))) n_yn, "+
				"               MIN(DECODE(tint_st,'5',DECODE(tint_yn,'Y','Y'))) e_yn,  "+
				"               MIN(DECODE(tint_st,'3',com_nm)) b_com_nm, "+
				"               sum(DECODE(tint_st,'1',nvl(tint_amt,0))) s1_amt, "+
				"               sum(DECODE(tint_st,'2',nvl(tint_amt,0))) s2_amt, "+
				"               sum(DECODE(tint_st,'3',nvl(tint_amt,0))) b_amt, "+
				"               sum(DECODE(tint_st,'4',nvl(tint_amt,0))) n_amt, "+
				"               sum(DECODE(tint_st,'5',nvl(tint_amt,0))) e_amt,  "+
				"               sum(nvl(tint_amt,0)) tot_amt,  "+
				"               min(sup_est_dt) sup_est_dt, min(sup_dt) sup_dt, MIN(reg_dt) reg_dt, MIN(conf_dt) conf_dt, MIN(req_dt) req_dt, MIN(reg_id) reg_id, "+
				"               SUM(tint_su) tint_su "+
				"        FROM   CAR_TINT "+
                "        where  rent_l_cd is not null "+
				"        GROUP BY rent_mng_id, rent_l_cd  "+
				"	    ) r2, car_off_emp z, "+
				"	    (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2"+
				" where"+
				" a.bus_id='"+ck_acar_id+"' and nvl(a.use_yn,'Y')='Y' and a.car_st<>'2' and a.car_gu='1' and d.dlv_est_dt is not null"+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1' "+
				" and a.car_mng_id=c.car_mng_id(+)"+
				" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
				" and a.client_id=e.client_id"+
				" and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd"+
				" and f.car_id=g.car_id and f.car_seq=g.car_seq and g.car_comp_id=h.car_comp_id and g.car_cd=h.code"+
				" and a.bus_id=i.user_id(+) and i.br_id=q.br_id(+)"+
				" and a.bus_id2=j.user_id(+)"+
				" and a.mng_id=k.user_id(+)"+
				" and a.rent_mng_id=l.rent_mng_id(+) and a.rent_l_cd=l.rent_l_cd(+)"+
				" and a.rent_mng_id=m.rent_mng_id(+) and a.rent_l_cd=m.rent_l_cd(+)"+
				" and b.rent_mng_id=n.rent_mng_id(+) and b.rent_l_cd=n.rent_l_cd(+) and b.rent_st=n.rent_st(+) "+
				" and a.car_mng_id=o.car_mng_id(+)"+
				" and a.rent_mng_id=p.rent_mng_id(+) and a.rent_l_cd=p.rent_l_cd(+)"+
				" and a.rent_mng_id=r.rent_mng_id(+) and a.rent_l_cd=r.rent_l_cd(+)"+
				" and a.rent_mng_id=s.rent_mng_id(+) and a.rent_l_cd=s.rent_l_cd(+)"+
				" and d.req_code=q.doc_id(+)"+
				" and a.rent_mng_id=t.rent_mng_id(+) and a.reg_dt=t.reg_dt(+) and t.rent_l_cd is null "+
				" and a.rent_mng_id=r2.rent_mng_id(+) and a.rent_l_cd=r2.rent_l_cd(+)"+
				" and nvl(nvl(s.car_deli_dt,b.rent_start_dt),'99999999') >= to_char(sysdate,'YYYYMMDD')"+
				" and a.agent_emp_id =z.emp_id(+) "+
				" and c.car_ext = ec.nm_cd(+) and f.car_ext = ec2.nm_cd(+) "+
				" ";

		String what = "";
		String dt1 = "";
		String dt2 = "";

		if(s_kd.equals("1"))	what = "upper(nvl(e.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(nvl(c.car_no,d.est_car_no), ' '))";
		if(s_kd.equals("4"))	what = "upper(nvl(i.user_nm, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(i.br_id||q.br_nm, ' '))";	
		if(s_kd.equals("6"))	what = "upper(nvl(nvl(c.car_ext,f.car_ext)||nvl(ec.nm, ec2.nm), ' '))";	
		if(s_kd.equals("7"))	what = "upper(nvl(decode(d.udt_st,'1','본사','2','부산지점','3','대전지점','4','고객','5','대구지점','6','광주지점',''), ' '))";	
		
			
		if(!what.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper('%"+t_wd+"%') ";
		}	

		if(gubun1.equals("1")){//출고예정
			query += " and a.dlv_dt is null and c.init_reg_dt is null";
			dt1		= "substr(d.dlv_est_dt,1,6)";
			dt2		= "d.dlv_est_dt";
		}else if(gubun1.equals("2")){//등록예정
			query += " and a.dlv_dt is not null and c.init_reg_dt is null";
			dt1		= "substr(f.reg_est_dt,1,6)";
			dt2		= "f.reg_est_dt";
		}else if(gubun1.equals("3")){//납품예정
			query += " and c.init_reg_dt is not null";
			dt1		= "substr(b.rent_est_dt,1,6)";
			dt2		= "b.rent_est_dt";
		}else{
			dt1		= "substr(a.rent_dt,1,6)";			
			dt2		= "a.rent_dt";				
		}

		if(gubun2.equals("1"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
		else if(gubun2.equals("3"))		query += " and "+dt2+" like to_char(sysdate,'YYYYMMDD')||'%'";
		else if(gubun2.equals("4"))		query += " and "+dt2+" like to_char(sysdate+1,'YYYYMMDD')||'%'";
		else if(gubun2.equals("2")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}

		
		if(gubun1.equals("1"))			query += " order by decode(nvl(c.car_ext,f.car_ext), '1','1', '2','2', '3','5', '4','6', '5','7', '6','2', '7','3', '8','4', '9','9', '10','10'), d.udt_est_dt, d.udt_st, d.dlv_est_dt, decode(d.rpt_no,'',1,0), a.rent_dt, e.firm_nm, a.car_st, h.car_nm";
		else if(gubun1.equals("2"))		query += " order by decode(nvl(c.car_ext,f.car_ext), '1','1', '2','2', '3','5', '4','6', '5','7', '6','2', '7','3', '8','4', '9','9', '10','10'), d.udt_est_dt, d.udt_st, f.reg_est_dt, a.rent_dt, e.firm_nm, a.car_st, h.car_nm";
		else if(gubun1.equals("3"))		query += " order by b.rent_est_dt, a.rent_dt, e.firm_nm, a.car_st, h.car_nm";
		else							query += " order by decode(c.init_reg_dt,'',0,1), decode(nvl(c.car_ext,f.car_ext),'1','1', '2','2', '3','5', '4','6', '5','7', '6','2', '7','3', '8','4', '9','9', '10','10'), d.udt_est_dt, d.udt_st, decode(b.rent_start_dt,'',decode(c.init_reg_dt,'',decode(a.dlv_dt,'','4','3'),'5'),'6'), substr(d.dlv_est_dt,1,8), a.rent_dt, e.firm_nm, a.car_st, h.car_nm";
		
		try {
			
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentBoardListgetRentBoardList(String s_kd, String t_wd, String gubun1, String gubun2, String st_dt, String end_dt, String ck_acar_id)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//계출관리-출고전대차현황
	public Vector getContTaechaStatList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String ck_acar_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select /*+ rule */ a.rent_mng_id, a.rent_l_cd, e.rent_st, b.use_yn, b.rent_dt, b.car_st, c.firm_nm, u.user_nm, \n"+
					"        d.car_no as a_car_no, d.car_nm as a_car_nm, e.rent_start_dt, (e.fee_s_amt+e.fee_v_amt) fee_amt, \n"+
					"        a.car_no as b_car_no, d2.car_nm as b_car_nm, a.car_rent_st, a.car_rent_et, a.rent_fee, nvl(a.rent_inv,h.fee_s_amt+h.fee_v_amt) rent_inv, \n"+
					"        decode(a.req_st,'1','청구','0','무상대차') req_st, \n"+
					"        decode(a.tae_st,'1','발행','0','미발행') tae_st, \n"+
					"        decode(nvl(f2.scd_cnt,0),0,'미등록',f2.scd_cnt||'회') a_scd_cnt, f2.use_s_dt a_use_s_dt, f2.use_e_dt a_use_e_dt, \n"+
					"        decode(nvl(f.scd_cnt,0),0,'미등록',f.scd_cnt||'회') b_scd_cnt, f.use_s_dt b_use_s_dt, f.use_e_dt b_use_e_dt, \n"+
					"        substr(h.reg_dt,1,8) as est_reg_dt, h.rent_dt as est_rent_dt, h.est_id, i.rent_start_dt as t_rent_start_dt, i.rent_end_dt as t_rent_end_dt, i.fee_s_amt+i.fee_v_amt as t_fee_amt, "+
					"        j.deli_dt, j.ret_dt, a.no as taecha_no "+
					" from   taecha a, cont b, client c, car_reg d, fee e, car_reg d2, cont_etc t, users u, \n"+
					"        (select rent_mng_id, rent_l_cd, count(*) scd_cnt, min(use_s_dt) use_s_dt, max(use_e_dt) use_e_dt from scd_fee where rent_st='1' and tm_st2='2' and tm_st1='0' group by rent_mng_id, rent_l_cd) f, \n"+
					"        (select rent_mng_id, rent_l_cd, count(*) scd_cnt, min(use_s_dt) use_s_dt, max(use_e_dt) use_e_dt from scd_fee where rent_st='1' and tm_st2='0' and tm_st1='0' group by rent_mng_id, rent_l_cd) f2, \n"+
					"        (select * from fee_etc_add where rent_st='t') g, (select * from fee_add where rent_st='t') i, estimate h, "+
					"        (select * from rent_cont where rent_st='10') j "+
					" where  a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.bus_id='"+ck_acar_id+"' \n"+
					" and    b.client_id=c.client_id \n"+
					" and    b.car_mng_id=d.car_mng_id(+) \n"+
					" and    a.rent_mng_id=e.rent_mng_id and a.rent_l_cd=e.rent_l_cd and e.rent_st='1' \n"+
					" and    a.car_mng_id=d2.car_mng_id \n"+
					" and    a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+) \n"+
					" and    a.rent_mng_id=f2.rent_mng_id(+) and a.rent_l_cd=f2.rent_l_cd(+) \n"+
					" and    a.rent_mng_id=t.rent_mng_id(+) and a.rent_l_cd=t.rent_l_cd(+) \n"+
					" and    b.bus_id=u.user_id "+
					" and    a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+) \n"+
					" and    a.rent_mng_id=i.rent_mng_id(+) and a.rent_l_cd=i.rent_l_cd(+) \n"+
					" and    g.bc_est_id=h.est_id(+) "+		
					" and    a.car_mng_id=j.car_mng_id(+) and a.rent_s_cd=j.rent_s_cd(+)"+
					" ";

	
			//계약상태
			if(gubun1.equals("Y")) query += " and b.use_yn='Y'";
			if(gubun1.equals("N")) query += " and b.use_yn='N'";
			if(gubun1.equals("0")) query += " and b.use_yn is null";

			//대차여부
			if(gubun3.equals("1")) query += " and e.rent_start_dt is null and b.use_yn='Y'";
			if(gubun3.equals("2")) query += " and e.rent_start_dt is not null and b.use_yn='Y'";
			if(gubun3.equals("3")) query += " and e.grt_amt_s>0";
			if(gubun3.equals("4")) query += " and e.ifee_s_amt>0";
			if(gubun3.equals("5")) query += " and e.pp_s_amt>0";

			//대차여부
			if(gubun2.equals("1")) query += " and a.req_st='1'";
			if(gubun2.equals("2")) query += " and a.req_st='0'";

			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(a.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(u.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(c.client_nm, ' '))";
			if(s_kd.equals("14"))	what = "upper(nvl(nvl(e.rent_dt,b.rent_dt), ' '))";
			if(s_kd.equals("15"))	what = "upper(nvl(e.rent_start_dt, ' '))";
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}	

			query += " order by b.use_yn desc, decode(e.rent_start_dt,'',0,1), a.car_rent_st";



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContTaechaStatList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String ck_acar_id)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

/**
	 * 사원별 지급수수료 리스트 - agent
	 */
	public Vector getCommis(String emp_id, String user_id)
	{
		getConnection();
		Vector vt = new Vector();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String query = "";
		query = " select"+
				" a.*, b.dlv_dt, c.firm_nm"+
				" from COMMI a, cont b, client c"+
				" where a.emp_id = '"+emp_id+"' and a.agnt_st<>'2' and a.commi >0"+
				" and a.rent_mng_id = b.rent_mng_id and a.rent_l_cd = b.rent_l_cd"+
		        " and b.client_id=c.client_id and b.bus_id = '" + user_id + "'"+
				" order by b.dlv_dt desc";
						
		try {
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCommis]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}	
	
	/****************************************************************************************
	*******************************************   smart
    ****************************************************************************************/

	//FMS검색-차량번호 조회
	public Vector getFmsSearchCarList(String s_kd, String t_wd, String use_yn)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select \n"+
				"        a.car_mng_id, a.rent_mng_id, a.rent_l_cd, a.client_id, a.use_yn, \n"+
				"        b.firm_nm, b.client_nm, h.r_site as site_nm, \n"+
				"        nvl(c.car_no,'미등록') car_no, f.car_nm, e.car_name, \n"+
				"        aa.rent_start_dt, aa.rent_end_dt, \n"+
				"        g.user_nm, g.user_m_tel, a.reg_dt, a.rent_dt, \n"+
				"        decode(aa.rent_st,'1',decode(a.car_gu,'0','재리스',decode(a.rent_st,'1','신차','3','대차','4','증차')),'연장') rent_st, "+
				"        decode(i.rent_way,'1','일반식','기본식') rent_way "+
				" from   cont a, client b, car_reg c, car_etc d, car_nm e, car_mng f, users g, client_site h, fee i, \n"+
				"        ( select rent_mng_id, rent_l_cd, \n"+
				"                 max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, \n"+
				"                 min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
				" 				 from   fee \n"+
				" 				 group by rent_mng_id, rent_l_cd \n"+
				"        ) aa, \n"+
				" 			 ( select car_mng_id, \n"+
				"                 min(car_no1)||' '||min(car_no2)||' '||min(car_no3)||' '||min(car_no4)||' '||min(car_no5)||' '||min(car_no6)||' '||min(car_no7)||' '||min(car_no8) car_no \n"+
				" 				 from \n"+
				" 					      ( select car_mng_id, \n"+
				" 								         decode(cha_seq,'1',car_no,'') car_no1, \n"+
				" 								         decode(cha_seq,'2',car_no,'') car_no2, \n"+
				" 								         decode(cha_seq,'3',car_no,'') car_no3, \n"+
				" 								         decode(cha_seq,'4',car_no,'') car_no4, \n"+
				" 								         decode(cha_seq,'5',car_no,'') car_no5, \n"+
				" 								         decode(cha_seq,'6',car_no,'') car_no6, \n"+
				" 								         decode(cha_seq,'7',car_no,'') car_no7, \n"+
				" 								         decode(cha_seq,'8',car_no,'') car_no8  \n"+
				" 								  from   car_change \n"+
				" 								 ) \n"+
				" 				 group by car_mng_id \n"+
				" 			 ) bb \n"+
				" where \n"+
				"        a.client_id=b.client_id \n"+
				" and    a.car_mng_id=c.car_mng_id(+) \n"+
				" and    a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
				" and    d.car_id=e.car_id and d.car_seq=e.car_seq and e.car_comp_id=f.car_comp_id and e.car_cd=f.code \n"+
				" and    a.bus_id2=g.user_id(+) \n"+
				" and    a.client_id=h.client_id(+) and a.r_site=h.seq(+) \n"+
				" and    a.rent_mng_id=i.rent_mng_id and a.rent_l_cd=i.rent_l_cd "+
				" and    i.rent_mng_id=aa.rent_mng_id and i.rent_l_cd=aa.rent_l_cd and i.rent_st=aa.rent_st \n"+
				" and    a.car_mng_id=bb.car_mng_id(+) \n"+
				" ";

			//고객검색일 경우 보유차는 제외
			if(s_kd.equals("1") || s_kd.equals("5"))		query += " and a.car_st<>'2'";				
	

			String what = "";
			
			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm||h.r_site, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(c.car_no||' '||bb.car_no, ' '))";
			if(s_kd.equals("5"))	what = "decode(i.rent_st,'1',a.rent_dt,i.rent_dt)";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(s_kd.equals("5")){
					query += " and "+what+" like upper('%"+AddUtil.replace(t_wd,"-","")+"%') ";
				}else{
					query += " and "+what+" like upper('%"+t_wd+"%') ";
				}
			}

			if(use_yn.equals("Y") || use_yn.equals("N"))	query += " and nvl(a.use_yn,'Y')='"+use_yn+"' ";

			if(use_yn.equals("no_start"))	query += " and a.use_yn='Y' and i.rent_start_dt is null";

			query += " order by a.use_yn desc, c.car_no, a.rent_dt, a.rent_mng_id";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getFmsSearchCarList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	public Vector getCarList(String client_id, String site_seq, String s_kd, String t_wd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  decode(aa.rent_way,'1','일반식','기본식') rent_way ,\n"+
				"        a.car_mng_id, a.rent_mng_id, a.rent_l_cd, a.client_id, a.use_yn, \n"+
				"        b.firm_nm, b.client_nm, h.r_site as site_nm, \n"+
				"        nvl(c.car_no,'미등록') car_no, f.car_nm, e.car_name, \n"+
				"        aa.rent_start_dt, aa.rent_end_dt, \n"+
				"        g.user_nm, a.reg_dt, a.rent_dt \n"+
				" from   cont a, client b, car_reg c, car_etc d, car_nm e, car_mng f, users g, client_site h, \n"+
				"        ( select rent_mng_id, rent_l_cd, rent_way, \n"+
				"                 max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, \n"+
				"                 min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
				" 				 from   fee \n"+
				" 				 group by rent_mng_id, rent_l_cd, rent_way \n"+
				"        ) aa \n"+
				" where \n"+
				"        a.client_id='"+client_id+"' "+
				" and    a.client_id=b.client_id \n"+
				" and    a.car_mng_id=c.car_mng_id(+) \n"+
				" and    a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
				" and    d.car_id=e.car_id and d.car_seq=e.car_seq and e.car_comp_id=f.car_comp_id and e.car_cd=f.code \n"+
				" and    a.bus_id2=g.user_id(+) \n"+
				" and    a.client_id=h.client_id(+) and a.r_site=h.seq(+) \n"+
				" and    a.rent_mng_id=aa.rent_mng_id and a.rent_l_cd=aa.rent_l_cd \n"+
				" ";

			String what = "";
			

			if(!site_seq.equals("") && !site_seq.equals("ALL")){
				if(site_seq.equals("00"))	query += " and a.r_site is null";	
				else 						query += " and a.r_site='"+site_seq+"'";
			}

			if(s_kd.equals("2"))	what = "upper(nvl(c.car_no, ' '))";
			
			if(!what.equals("") && !t_wd.equals("")){

				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}

	
			query += " order by a.use_yn desc, nvl(a.r_site,0), c.car_no";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }


	//사업장별 계약현황
	public Vector getContClientStat(String client_id, String use_yn)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  \n"+
				"        a.client_id, b.firm_nm, "+
				"        nvl(c.seq,'00') seq, "+
				"        decode(c.seq,'','본사',c.r_site) r_site, "+
				"        decode(c.seq,'','본사','지점') site_st, "+
				"        count(*) cont_cnt, \n"+
				"        count(decode(nvl(a.use_yn,'Y'),'Y',a.client_id)) cont_y_cnt \n"+
				" from   cont a, client b, client_site c \n"+
				" where  a.client_id='"+client_id+"' \n"+
				" and    a.client_id=b.client_id \n"+
				" and    a.client_id=c.client_id(+) and a.r_site=c.seq(+) \n";

		if(!use_yn.equals("")) query += " and nvl(a.use_yn,'Y')='"+use_yn+"'";

		query += " group by a.client_id, b.firm_nm, c.seq, c.r_site \n"+
				 " order by decode(nvl(c.seq,'00'),0,1), count(decode(nvl(a.use_yn,'Y'),'Y',a.client_id)) desc, c.r_site \n"+
				 " ";



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContClientStat]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }


    	//초기선납금 입금확인
	public String getPpPayDt(String rent_mng_id, String rent_l_cd, String rent_st, String pp_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String pay_dt = "";
		String query = "";


		query = " select max(nvl(ext_pay_dt,'')) ext_pay_dt"+
				" from scd_ext"+
				" where rent_mng_id=? and rent_l_cd=? and rent_st=? and ext_st in ('0','1','2','5')";
		
		if(!pp_st.equals(""))	query += " and ext_st=?";

		try {
				
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
			pstmt.setString(3, rent_st);
			if(!pp_st.equals("")){
				pstmt.setString(4, pp_st);
			}
			
	    	rs = pstmt.executeQuery();
    	
			if(rs.next())
			{				
				pay_dt  = rs.getString(1);
			}
			rs.close();
			pstmt.close();

			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getPpPayDt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return pay_dt;
		}		
	} 

//CMS 고객 리스트 조회 (gubun - 1:상호, 2:계약번호)
	public Vector getCmsContCarList(String s_kd, String t_wd, String gubun1)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select "+
				" a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, h.user_nm, "+
				" a.rent_dt, c.firm_nm, nvl(d.car_no,'미등록') car_no, b.rent_start_dt,"+
				" decode(nvl(e.cnt,0),0,'-','생성') scd_yn,"+
				" decode(f.reg_st,'1','신청','2','해지','미등록') reg_st,"+
				" decode(a.use_yn,'Y','진행','N','해지','미결') use_st,"+
				" f.cms_day, f.cms_bank, f.cms_acc_no, f.cms_dep_nm, g.cbit, "+
				" decode(g.cbit,'1','신규','2','승인','3','해지신청','4','해지완료','7','임의해지','8','신고에러','대기') cbit_nm"+
				" from cont a, fee b, client c, car_reg d,"+
				" (select rent_mng_id, rent_l_cd, count(*) cnt from scd_fee group by rent_mng_id, rent_l_cd) e,"+
				" cms_mng f, cust g, users h"+
				" where ";

		if(s_kd.equals("1"))	query += " a.client_id	='"+t_wd+"'";
		if(s_kd.equals("2"))	query += " a.car_mng_id	='"+t_wd+"'";	
		if(s_kd.equals("3"))	query += " a.rent_l_cd	='"+t_wd+"'";		
		if(s_kd.equals("4"))	query += " a.bus_id2	='"+t_wd+"'";	
		

		query +=" and a.car_st<>'2'"+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1'"+
				" and (b.fee_pay_st='1' or f.app_dt is not null)"+
				" and a.client_id=c.client_id"+
				" and a.car_mng_id=d.car_mng_id(+)"+
				" and a.rent_mng_id=e.rent_mng_id(+) and a.rent_l_cd=e.rent_l_cd(+)"+
				" and a.rent_mng_id=f.rent_mng_id(+) and a.rent_l_cd=f.rent_l_cd(+)"+
				" and a.rent_l_cd=g.code(+)"+
				" and nvl(b.ext_agnt,a.bus_id)=h.user_id "+
				" and nvl(g.cbit,'0') in ('0','1','2') and nvl(a.use_yn,'Y')='Y' "+
				" ";

		if(!gubun1.equals(""))	query += " and f.cms_acc_no||f.cms_day	='"+gubun1+"'";	
		
		if(s_kd.equals("1")){
			query += " order by f.cms_day, f.app_dt ";
		}else{
			query += " order by decode(a.use_yn,'Y','2','N','3','1'), a.rent_dt, b.rent_start_dt, a.rent_mng_id";
		}

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCmsContCarList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}

	//TAX 고객 리스트 조회 (gubun - 1:상호, 2:계약번호)
	public Vector getTAXContList(String s_kd, String t_wd, String gubun1)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select ";

		if(s_kd.equals("1")){
			query += " distinct ";
		}else{
			query += " "+
				"		a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, a.bus_id2, "+
				"		nvl(d.car_no,'미등록') car_no, "+
				" ";

		}

		query += " "+
				"        decode(g.rent_seq,'2','분할',decode(a.tax_type,'1','본사','2','지점')) tax_type_nm, decode(g.rent_seq,'2','3',decode(a.tax_type,'1','1','2','2')) tax_type, "+
				"        decode(c.rec_st,'1','이메일','2','우편','3','수령안함',decode(b.etax_not_cau,'','이메일','우편')) rec_st, "+
				"        decode(c.ele_tax_st,'2','별도시스템','당사시스템'||' '||c.tax_extra) ele_tax_st, "+
				"        decode(decode(nvl(g.rent_seq,'1'),'1',a.tax_type,decode(e.seq,'',a.tax_type,'2')), '2', decode(e.enp_no,   '', decode(b.client_st,'2',TEXT_DECRYPT(b.ssn, 'pw' ),b.enp_no),e.enp_no),   decode(b.client_st,'2',TEXT_DECRYPT(b.ssn, 'pw' ),b.enp_no)) reccoregno, "+
				"        decode(decode(nvl(g.rent_seq,'1'),'1',a.tax_type,decode(e.seq,'',a.tax_type,'2')), '2', decode(e.site_jang,'', b.client_nm,e.site_jang),b.client_nm) reccoceo, "+
				"        decode(decode(nvl(g.rent_seq,'1'),'1',a.tax_type,decode(e.seq,'',a.tax_type,'2')), '2', decode(e.r_site,   '', b.firm_nm,  e.r_site ),  b.firm_nm ) recconame, "+
				"        decode(decode(nvl(g.rent_seq,'1'),'1',a.tax_type,decode(e.seq,'',a.tax_type,'2')), '1', nvl(b.con_agnt_nm,b.client_nm),nvl(e.agnt_nm,b.con_agnt_nm)) agnt_nm, "+
				"        decode(decode(nvl(g.rent_seq,'1'),'1',a.tax_type,decode(e.seq,'',a.tax_type,'2')), '1', b.con_agnt_email, nvl(e.agnt_email,b.con_agnt_email)) agnt_email, "+
				"        decode(decode(nvl(g.rent_seq,'1'),'1',a.tax_type,decode(e.seq,'',a.tax_type,'2')), '1', b.con_agnt_m_tel, nvl(e.agnt_m_tel,b.con_agnt_m_tel)) agnt_m_tel "+
				" from   cont a, fee_rtn g, client b, cont_etc c, car_reg d, client_site e "+
				" where ";

		if(s_kd.equals("1"))	query += " a.client_id	='"+t_wd+"'";
		if(s_kd.equals("2"))	query += " a.car_mng_id	='"+t_wd+"'";	
		if(s_kd.equals("3"))	query += " a.rent_l_cd	='"+t_wd+"'";		
		if(s_kd.equals("4"))	query += " a.bus_id2	='"+t_wd+"'";	
		

		query +="		 and a.car_st<>'2' and nvl(a.use_yn,'Y')='Y' "+
				"		 and a.rent_mng_id=g.rent_mng_id(+) and a.rent_l_cd=g.rent_l_cd(+) "+
				"        and nvl(g.client_id,a.client_id)=b.client_id "+
				"        and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) "+
				"        and a.car_mng_id=d.car_mng_id(+) "+
				"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) "+
				" ";

		
		if(s_kd.equals("1")){
			query += " order by decode(g.rent_seq,'2','3',decode(a.tax_type,'1','1','2','2')) ";
		}else{
			query += " order by decode(g.rent_seq,'2','3',decode(a.tax_type,'1','1','2','2')), a.reg_dt";
		}

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getTAXContList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}


	//FMS검색-차량번호 조회
	public Vector getRentStartEstCarList(String s_kd, String t_wd,  String self_st, String user_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  \n"+
				"        a.car_mng_id, a.rent_mng_id, a.rent_l_cd, a.client_id, a.use_yn, a.dlv_dt, \n"+
				"        b.firm_nm, b.client_nm, h.r_site as site_nm, \n"+
				"        nvl(c.car_no,'미등록') car_no, f.car_nm, e.car_name, \n"+
				"        aa.rent_start_dt, aa.rent_end_dt, \n"+
				"        g.user_nm, a.reg_dt, a.rent_dt, \n"+
				"        decode(aa.rent_st,'1',decode(a.car_gu,'0','재리스',decode(a.rent_st,'1','신차','3','대차','4','증차')),'연장') rent_st, "+
				"        decode(i.rent_way,'1','일반식','기본식') rent_way "+
				" from   cont a, client b, car_reg c, car_etc d, car_nm e, car_mng f, users g, client_site h, fee i, \n"+
				"        ( select rent_mng_id, rent_l_cd, \n"+
				"                 max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, \n"+
				"                 min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
				" 				 from   fee \n"+
				" 				 group by rent_mng_id, rent_l_cd \n"+
				"        ) aa, \n"+
				" 			 ( select car_mng_id, \n"+
				"                 min(car_no1)||' '||min(car_no2)||' '||min(car_no3)||' '||min(car_no4)||' '||min(car_no5)||' '||min(car_no6)||' '||min(car_no7)||' '||min(car_no8) car_no \n"+
				" 				 from \n"+
				" 					      ( select car_mng_id, \n"+
				" 								         decode(cha_seq,'1',car_no,'') car_no1, \n"+
				" 								         decode(cha_seq,'2',car_no,'') car_no2, \n"+
				" 								         decode(cha_seq,'3',car_no,'') car_no3, \n"+
				" 								         decode(cha_seq,'4',car_no,'') car_no4, \n"+
				" 								         decode(cha_seq,'5',car_no,'') car_no5, \n"+
				" 								         decode(cha_seq,'6',car_no,'') car_no6, \n"+
				" 								         decode(cha_seq,'7',car_no,'') car_no7, \n"+
				" 								         decode(cha_seq,'8',car_no,'') car_no8  \n"+
				" 								  from   car_change \n"+
				" 								 ) \n"+
				" 				 group by car_mng_id \n"+
				" 			 ) bb \n"+
				" where \n"+
				"        a.client_id=b.client_id \n"+
				" and    a.car_mng_id=c.car_mng_id(+) \n"+
				" and    a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
				" and    d.car_id=e.car_id and d.car_seq=e.car_seq and e.car_comp_id=f.car_comp_id and e.car_cd=f.code \n"+
				" and    a.bus_id2=g.user_id(+) \n"+
				" and    a.client_id=h.client_id(+) and a.r_site=h.seq(+) \n"+
				" and    a.rent_mng_id=i.rent_mng_id and a.rent_l_cd=i.rent_l_cd "+
				" and    i.rent_mng_id=aa.rent_mng_id and i.rent_l_cd=aa.rent_l_cd and i.rent_st=aa.rent_st \n"+
				" and    a.car_mng_id=bb.car_mng_id(+) \n"+
				" and    a.use_yn='Y' and a.car_st<>'2' and a.car_mng_id is not null and i.rent_st='1' and i.rent_start_dt is null "+
				" ";

			if(self_st.equals("Y"))			query += " and a.bus_id = '"+user_id+"'";
	
			//고객검색일 경우 보유차는 제외
			if(s_kd.equals("1") || s_kd.equals("5"))		query += " and a.car_st<>'2'";				

			String what = "";
			
			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm||h.r_site, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(c.car_no||' '||bb.car_no, ' '))";
			if(s_kd.equals("5"))	what = "a.rent_dt";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(s_kd.equals("5")){
					query += " and "+what+" = replace('"+t_wd+"','-','') ";
				}else{
					query += " and "+what+" like upper('%"+t_wd+"%') ";
				}
			}

			query += " order by decode(a.car_gu,0,a.rent_dt,c.init_reg_dt) ";


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRentStartEstCarList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }



/**
	 *	부서별계약현황
	 */
	public Vector getStatDeptList(String mode, String gubun1, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
		String b_query = "";
		 		
		b_query = " select a.rent_l_cd, \n"+
				"        decode(b.rent_st||a.car_gu,'11','신차','10','재리스','12','재리스','연장') car_gu, \n"+
				"        decode(b.rent_way,'1','일반식','기본식') rent_way, \n"+
				"        decode(b.rent_st,'1',a.rent_dt,b.rent_dt) rent_dt, \n"+
				"        i.br_id, i.dept_id \n"+
				" from   cont a, fee b, car_etc c, car_nm d, car_reg g, cls_cont e, fee_etc h, \n"+
				"        (select rent_mng_id, rent_l_cd, cls_dt, cls_st, nvl(reg_dt,cls_dt) reg_dt from cls_cont where cls_st in ('4','5')) f, users i \n"+
				" where  a.car_st not in ('2','4') and a.client_id not in ('000228')  \n";

		String dt1 = "";
		String dt2 = "";
		
		dt1 = "substr(decode(b.rent_st,'1',a.rent_dt,b.rent_dt),1,6)";
		dt2 = "decode(b.rent_st,'1',a.rent_dt,b.rent_dt)";


		if(gubun1.equals("1"))				b_query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD') \n";		
		else if(gubun1.equals("2"))			b_query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD') \n";		
		else if(gubun1.equals("3"))			b_query += " and "+dt2+" = to_char(sysdate-2,'YYYYMMDD') \n";		
		else if(gubun1.equals("7"))			b_query += " and "+dt2+" = to_char(sysdate-3,'YYYYMMDD') \n";		
		else if(gubun1.equals("4"))			b_query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%' \n";
		else if(gubun1.equals("5"))			b_query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%' \n";
		else if(gubun1.equals("6"))			b_query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-2),'YYYYMM')||'%' \n";
		else if(gubun1.equals("9")){
			if(!st_dt.equals("") && end_dt.equals(""))	b_query += " and "+dt2+" like replace('"+st_dt+"%', '-','') \n";
			if(!st_dt.equals("") && !end_dt.equals("")) b_query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','') \n";
		}

		b_query += "     and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd \n"+
				"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
				"        and c.car_id=d.car_id and c.car_seq=d.car_seq \n"+
				"        and a.car_mng_id=g.car_mng_id(+) \n"+
				"        and a.rent_mng_id=e.rent_mng_id(+) and a.rent_l_cd=e.rent_l_cd(+) and nvl(e.cls_st,'0') not in ('7','10')  \n"+
				"        and b.rent_mng_id=h.rent_mng_id(+) and b.rent_l_cd=h.rent_l_cd(+) and b.rent_st=h.rent_st(+) \n"+
				"        and a.rent_mng_id=f.rent_mng_id(+) and a.reg_dt=f.reg_dt(+) \n"+
				"        and case when f.rent_l_cd is not null and a.reg_dt < nvl(to_char(h.reg_dt,'YYYYMMDD'),f.reg_dt)  then '' else f.rent_l_cd end is null \n"+
				"        and decode(b.rent_st,'1',a.bus_id,nvl(b.ext_agnt,a.bus_id))=i.user_id "+
				" ";				

		//신차
		if(mode.equals("1")) 		b_query += " and b.rent_st = '1' and a.car_gu = '1' \n";

		//재리스+중고차
		if(mode.equals("2")) 		b_query += " and b.rent_st = '1' and a.car_gu <> '1' \n";

		//연장
		if(mode.equals("3")) 		b_query += " and b.rent_st <> '1' \n";

		
		query = " select car_gu, rent_way, \n";
	
		query += " count(decode(dept_id,'0001',rent_l_cd)) cnt0, \n";	
		query += " count(decode(br_id, 'B1', rent_l_cd)) cnt1, \n";	
		query += " count(decode(br_id, 'D1', rent_l_cd)) cnt2, \n";	
		query += " count(decode(dept_id,'0009',rent_l_cd)) cnt3, \n";	
		query += " count(decode(dept_id,'0010',rent_l_cd)) cnt4, \n";	
		query += " count(decode(dept_id,'0011',rent_l_cd)) cnt5, \n";	
		query += " count(decode(dept_id,'0012',rent_l_cd)) cnt6, \n";	
		query += " count(decode(dept_id,'0013',rent_l_cd)) cnt7, \n";	
		query += " count(decode(dept_id,'0014',rent_l_cd)) cnt8, \n";
		query += " count(decode(dept_id,'0015',rent_l_cd)) cnt9, \n";
		query += " count(decode(dept_id,'0017',rent_l_cd)) cnt10, \n";
		query += " count(decode(dept_id,'0018',rent_l_cd)) cnt11, \n";
		query += " count(decode(dept_id,'1000',rent_l_cd)) cnt12, \n";

		query += " count(rent_l_cd) cnt13 \n"+
				" from   ("+b_query+") \n"+
				" group by car_gu, rent_way \n"+
				" order by decode(rent_way,'기본식','0','1')\n"+
				" ";


		try {

			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();

			ResultSetMetaData rsmd = rs.getMetaData();    	

			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getStatDeptList]"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}	

	/**
	 *	부서별계약현황-월렌트
	 */
	public Vector getStatDeptRmList(String mode, String gubun1, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
		String b_query = "";
		String b_query2 = "";
		 		
		b_query = " select a.rent_s_cd, \n"+
				"        a.rent_st, a.rent_dt, \n"+
				"        i.br_id, i.dept_id \n"+
				" from   rent_cont a, users i \n"+
				" where  a.rent_st='12' and a.use_st<>'5'  \n";

		String dt1 = "";
		String dt2 = "";
		
		dt1 = "substr(a.rent_dt,1,6)";
		dt2 = "a.rent_dt";


		if(gubun1.equals("1"))				b_query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD') \n";		
		else if(gubun1.equals("2"))			b_query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD') \n";		
		else if(gubun1.equals("3"))			b_query += " and "+dt2+" = to_char(sysdate-2,'YYYYMMDD') \n";		
		else if(gubun1.equals("7"))			b_query += " and "+dt2+" = to_char(sysdate-3,'YYYYMMDD') \n";		
		else if(gubun1.equals("4"))			b_query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%' \n";
		else if(gubun1.equals("5"))			b_query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%' \n";
		else if(gubun1.equals("6"))			b_query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-2),'YYYYMM')||'%' \n";
		else if(gubun1.equals("9")){
			if(!st_dt.equals("") && end_dt.equals(""))	b_query += " and "+dt2+" like replace('"+st_dt+"%', '-','') \n";
			if(!st_dt.equals("") && !end_dt.equals("")) b_query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','') \n";
		}

		b_query += "     and a.bus_id=i.user_id "+
				" ";				


		//cont
		b_query2 = " select a.rent_l_cd as rent_s_cd, \n"+
				  "        '12' rent_st, a.rent_dt, \n"+
				  "        i.br_id, i.dept_id \n"+
				  " from   cont a, users i, cls_cont b, fee_rm d \n"+
				  " where  a.car_st='4' and a.rent_l_cd not like 'RM%' and a.rent_mng_id=b.rent_mng_id(+) and a.rent_l_cd=b.rent_l_cd(+)"+
				  "	       and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd and d.rent_st='1' "+
				  "        and nvl(a.rent_start_dt,substr(d.deli_plan_dt,1,8))<>nvl(b.cls_dt,nvl(a.rent_end_dt,substr(d.ret_plan_dt,1,8)))  \n";

		
		dt1 = "substr(a.rent_dt,1,6)";
		dt2 = "a.rent_dt";


		if(gubun1.equals("1"))				b_query2 += " and "+dt2+" = to_char(sysdate,'YYYYMMDD') \n";		
		else if(gubun1.equals("2"))			b_query2 += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD') \n";		
		else if(gubun1.equals("3"))			b_query2 += " and "+dt2+" = to_char(sysdate-2,'YYYYMMDD') \n";		
		else if(gubun1.equals("7"))			b_query2 += " and "+dt2+" = to_char(sysdate-3,'YYYYMMDD') \n";		
		else if(gubun1.equals("4"))			b_query2 += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%' \n";
		else if(gubun1.equals("5"))			b_query2 += " and "+dt2+" like to_char(to_date(to_char(sysdate,'YYYYMM'),'YYYYMM')-1,'YYYYMM')||'%' \n";
		else if(gubun1.equals("6"))			b_query2 += " and "+dt2+" like to_char(to_date(to_char(sysdate,'YYYYMM'),'YYYYMM')-2,'YYYYMM')||'%' \n";
		else if(gubun1.equals("9")){
			if(!st_dt.equals("") && end_dt.equals(""))	b_query2 += " and "+dt2+" like replace('"+st_dt+"%', '-','') \n";
			if(!st_dt.equals("") && !end_dt.equals("")) b_query2 += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','') \n";
		}

		b_query2 += "     and a.bus_id=i.user_id "+
				" ";	



		
		query = " select rent_st, \n";
	
		query += " count(decode(dept_id,'0001',1,'0002',1)) cnt0, \n";	
		query += " count(decode(dept_id,'0007',rent_s_cd)) cnt1, \n";	
		query += " count(decode(dept_id,'0008',rent_s_cd)) cnt2, \n";	
		query += " count(decode(dept_id,'0009',rent_s_cd)) cnt3, \n";	
		query += " count(decode(dept_id,'0010',rent_s_cd)) cnt4, \n";	
		query += " count(decode(dept_id,'0011',rent_s_cd)) cnt5, \n";	
		query += " count(decode(dept_id,'0012',rent_s_cd)) cnt6, \n";	
		query += " count(decode(dept_id,'0013',rent_s_cd)) cnt7, \n";	
		query += " count(decode(dept_id,'0014',rent_s_cd)) cnt8, \n";
		query += " count(decode(dept_id,'0015',rent_s_cd)) cnt9, \n";
		query += " count(decode(dept_id,'0017',rent_s_cd)) cnt10, \n";
		query += " count(decode(dept_id,'0018',rent_s_cd)) cnt11, \n";
		query += " count(decode(dept_id,'1000',rent_s_cd)) cnt12, \n";

		query += " count(rent_s_cd) cnt13 \n"+
				" from   ("+b_query+" union all "+b_query2+") \n"+
				" group by rent_st \n"+
				" order by rent_st\n"+
				" ";

		try {

			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();

			ResultSetMetaData rsmd = rs.getMetaData();    	

			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getStatDeptRmList]"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}

    /**
	 *	부서별계약현황
	 */

	public Vector getStatDeptListSub(String mode, String gubun1, String st_dt, String end_dt, String rent_way, String br_id, String dept_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
		String b_query = "";
		 		
		b_query = " select a.rent_l_cd, \n"+
				"        decode(b.rent_st||a.car_gu,'11','신차','10','재리스','12','재리스','연장') car_gu, \n"+
				"        decode(b.rent_way,'1','일반식','기본식') rent_way, \n"+
				"        decode(b.rent_st,'1',a.rent_dt,b.rent_dt) rent_dt, \n"+
				"        i.br_id, i.dept_id, i.user_nm, \n"+
				"        j.firm_nm, g.car_no, k.car_nm, d.car_name "+
				" from   cont a, fee b, car_etc c, car_nm d, car_reg g, cls_cont e, fee_etc h, \n"+
				"        (select rent_mng_id, rent_l_cd, cls_dt, cls_st, nvl(reg_dt,cls_dt) reg_dt from cls_cont where cls_st in ('4','5')) f, \n"+
				"        users i, client j, car_mng k \n"+
				" where  a.car_st<>'2'  \n";

		String dt1 = "";
		String dt2 = "";
		
		dt1 = "substr(decode(b.rent_st,'1',a.rent_dt,b.rent_dt),1,6)";
		dt2 = "decode(b.rent_st,'1',a.rent_dt,b.rent_dt)";


		if(gubun1.equals("1"))				b_query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD') \n";		
		else if(gubun1.equals("2"))			b_query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD') \n";		
		else if(gubun1.equals("3"))			b_query += " and "+dt2+" = to_char(sysdate-2,'YYYYMMDD') \n";		
		else if(gubun1.equals("7"))			b_query += " and "+dt2+" = to_char(sysdate-3,'YYYYMMDD') \n";		
		else if(gubun1.equals("4"))			b_query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%' \n";
		else if(gubun1.equals("5"))			b_query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%' \n";
		else if(gubun1.equals("6"))			b_query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-2),'YYYYMM')||'%' \n";
		else if(gubun1.equals("9")){
			if(!st_dt.equals("") && end_dt.equals(""))	b_query += " and "+dt2+" like replace('"+st_dt+"%', '-','') \n";
			if(!st_dt.equals("") && !end_dt.equals("")) b_query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','') \n";
		}

		if(!rent_way.equals(""))			b_query += " and decode(b.rent_way,'1','일반식','기본식')='"+rent_way+"' ";


		b_query += "     and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd \n"+
				"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
				"        and c.car_id=d.car_id and c.car_seq=d.car_seq \n"+
				"        and a.car_mng_id=g.car_mng_id(+) \n"+
				"        and a.rent_mng_id=e.rent_mng_id(+) and a.rent_l_cd=e.rent_l_cd(+) and nvl(e.cls_st,'0') not in ('7','10')  \n"+
				"        and b.rent_mng_id=h.rent_mng_id(+) and b.rent_l_cd=h.rent_l_cd(+) and b.rent_st=h.rent_st(+) \n"+
				"        and a.rent_mng_id=f.rent_mng_id(+) and a.reg_dt=f.reg_dt(+) \n"+
				"        and case when f.rent_l_cd is not null and a.reg_dt < nvl(to_char(h.reg_dt,'YYYYMMDD'),f.reg_dt)  then '' else f.rent_l_cd end is null \n"+
				"        and decode(b.rent_st,'1',a.bus_id,nvl(b.ext_agnt,a.bus_id))=i.user_id "+
				"        and a.client_id=j.client_id "+
				"        and d.car_comp_id=k.car_comp_id and d.car_cd=k.code "+
				" ";				

		if(!br_id.equals(""))				b_query += " and i.br_id='"+br_id+"' ";
		if(!dept_id.equals(""))				b_query += " and i.dept_id='"+dept_id+"' ";

		//신차
		if(mode.equals("1")) 		b_query += " and b.rent_st = '1' and a.car_gu = '1' \n";

		//재리스+중고차
		if(mode.equals("2")) 		b_query += " and b.rent_st = '1' and a.car_gu <> '1' \n";

		//연장
		if(mode.equals("3")) 		b_query += " and b.rent_st <> '1' \n";


		
		query = b_query;
	
		query += " order by decode(b.rent_st||a.car_gu,'11','신차','10','재리스','12','재리스','연장'), decode(b.rent_way,'1','일반식','기본식'), decode(b.rent_st,'1',a.rent_dt,b.rent_dt), i.br_id, i.dept_id \n"+
				" ";


		try {

			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();

			ResultSetMetaData rsmd = rs.getMetaData();    	

			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[StatBusDatabase:getStatDeptListSub]"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}	
	
	/**
	 *	부서별계약현황-월렌트
	 */
	 public Vector getStatDeptRmListSub(String mode, String gubun1, String st_dt, String end_dt, String rent_way, String br_id, String dept_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
		String b_query = "";
		String b_query2 = "";
		 		
		b_query = " select a.rent_s_cd, \n"+
				"        a.rent_st, a.rent_dt, \n"+
				"        i.br_id, i.dept_id, i.user_nm, \n"+
				"        j.firm_nm, g.car_no, g.car_nm, d.car_name, '' car_gu, '' rent_way "+
				" from   rent_cont a, users i, car_reg g, client j, \n"+
				"        (select a.* FROM CONT a, (SELECT car_mng_id, min(rent_l_cd) rent_l_cd from cont where car_st<>'4' group by car_mng_id) b WHERE a.car_mng_id=b.car_mng_id AND a.rent_l_cd=b.rent_l_cd) b, \n"+
				"        car_etc c, car_nm d"+ 
				" where  a.rent_st='12' and a.use_st<>'5'  \n";

		String dt1 = "";
		String dt2 = "";
		
		dt1 = "substr(a.rent_dt,1,6)";
		dt2 = "a.rent_dt";


		if(gubun1.equals("1"))				b_query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD') \n";		
		else if(gubun1.equals("2"))			b_query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD') \n";		
		else if(gubun1.equals("3"))			b_query += " and "+dt2+" = to_char(sysdate-2,'YYYYMMDD') \n";		
		else if(gubun1.equals("7"))			b_query += " and "+dt2+" = to_char(sysdate-3,'YYYYMMDD') \n";		
		else if(gubun1.equals("4"))			b_query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%' \n";
		else if(gubun1.equals("5"))			b_query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%' \n";
		else if(gubun1.equals("6"))			b_query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-2),'YYYYMM')||'%' \n";
		else if(gubun1.equals("9")){
			if(!st_dt.equals("") && end_dt.equals(""))	b_query += " and "+dt2+" like replace('"+st_dt+"%', '-','') \n";
			if(!st_dt.equals("") && !end_dt.equals("")) b_query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','') \n";
		}

		b_query +=  "     and a.bus_id=i.user_id \n"+
					"     and a.car_mng_id=g.car_mng_id \n"+
					"     and a.cust_id=j.client_id \n"+
					"     and a.car_mng_id=b.car_mng_id \n"+
					"     and b.rent_mng_id=c.rent_mng_id and b.rent_l_cd=c.rent_l_cd \n"+
					"     and c.car_id=d.car_id and c.car_seq=d.car_seq "+
				" ";				

		if(!br_id.equals(""))				b_query += " and i.br_id='"+br_id+"' ";

		if(!dept_id.equals(""))	{			
			if(dept_id.equals("0001")){
				b_query += " and i.dept_id in ('0001','0002') ";
			}else{
				b_query += " and i.dept_id='"+dept_id+"' ";
			}
		}


		//cont
		b_query2 = " select a.rent_l_cd as rent_s_cd, \n"+
				  "        '12' rent_st, a.rent_dt, \n"+
				  "        i.br_id, i.dept_id, i.user_nm, \n"+
				  "        j.firm_nm, g.car_no, g.car_nm, d.car_name, '' car_gu, '' rent_way "+
				  " from   cont a, users i, cls_cont b, fee_rm d, client j, car_reg g, car_etc c, car_nm d \n"+
				  " where  a.car_st='4' and a.rent_l_cd not like 'RM%' and a.rent_mng_id=b.rent_mng_id(+) and a.rent_l_cd=b.rent_l_cd(+)"+
				  "	       and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd and d.rent_st='1' "+
				  "        and nvl(a.rent_start_dt,substr(d.deli_plan_dt,1,8))<>nvl(b.cls_dt,nvl(a.rent_end_dt,substr(d.ret_plan_dt,1,8))) "+
				  " \n";


		dt1 = "substr(a.rent_dt,1,6)";
		dt2 = "a.rent_dt";


		if(gubun1.equals("1"))				b_query2 += " and "+dt2+" = to_char(sysdate,'YYYYMMDD') \n";		
		else if(gubun1.equals("2"))			b_query2 += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD') \n";		
		else if(gubun1.equals("3"))			b_query2 += " and "+dt2+" = to_char(sysdate-2,'YYYYMMDD') \n";		
		else if(gubun1.equals("4"))			b_query2 += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%' \n";
		else if(gubun1.equals("5"))			b_query2 += " and "+dt2+" like to_char(to_date(to_char(sysdate,'YYYYMM'),'YYYYMM')-1,'YYYYMM')||'%' \n";
		else if(gubun1.equals("6"))			b_query2 += " and "+dt2+" like to_char(to_date(to_char(sysdate,'YYYYMM'),'YYYYMM')-2,'YYYYMM')||'%' \n";
		else if(gubun1.equals("9")){
			if(!st_dt.equals("") && end_dt.equals(""))	b_query2 += " and "+dt2+" like replace('"+st_dt+"%', '-','') \n";
			if(!st_dt.equals("") && !end_dt.equals("")) b_query2 += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','') \n";
		}

		b_query2 +=  "    and a.bus_id=i.user_id \n"+
					"     and a.car_mng_id=g.car_mng_id \n"+
					"     and a.client_id=j.client_id \n"+
					"     and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
					"     and c.car_id=d.car_id and c.car_seq=d.car_seq "+
				" ";				

		if(!br_id.equals(""))				b_query2 += " and i.br_id='"+br_id+"' ";
		if(!dept_id.equals(""))	{			
			if(dept_id.equals("0001")){
				b_query += " and i.dept_id in ('0001','0002') ";
			}else{
				b_query += " and i.dept_id='"+dept_id+"' ";
			}
		}

		query = "select * from ("+b_query+" union all "+b_query2+") " ;
	
		query += " order by rent_st, rent_dt, br_id, dept_id \n"+
				" ";



		try {

			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();

			ResultSetMetaData rsmd = rs.getMetaData();    	

			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[StatBusDatabase:getStatDeptRmListSub]"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
	}


     	//사용자 주민번호로 영업사원관리번호 가져오기
	public String getAgentEmpId(String user_ssn)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String emp_id = "";

		String query = " select emp_id from car_off_emp where replace(emp_ssn, '-', '')=replace(?, '-', '') ";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, user_ssn);
		    rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				emp_id = rs.getString(1);
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getAgentEmpId]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return emp_id;
		}			
	}

	//계약관리
	public Vector getContList_20150526(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select   \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, nvl(c.rent_suc_dt,y.cls_dt) as rent_suc_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체', '7', '에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	"        decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지', '15', '말소') cls_st, \n"+
					"        a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,mm.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					"        k.user_nm as bus_nm, k.user_m_tel as bus_m_tel,  \n"+
					"        nvl(qu.user_nm,l.user_nm) bus_agnt_nm, nvl(qu.user_m_tel,l.user_m_tel) bus_agnt_m_tel, \n"+
					"        n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel,  \n"+
					"        a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel,  \n"+
					"        a.mng_id2, u2.user_nm as mng_nm2, u2.user_m_tel as mng_m_tel2,  \n"+
					"        a.bus_id3, decode(d.ext_agnt,'',x.user_nm,k.user_nm) as bus_nm3, decode(d.ext_agnt,'',x.user_m_tel,k.user_m_tel) as bus3_m_tel,  \n"+
					"        a.sanction_id, s.user_nm as sanction_nm, \n"+
				    "        z.ins_com_id,\n"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        m.rent_st as fee_rent_st \n"+
					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, users l, users n, users s, users u, \n"+
					"		 ( select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee  \n"+
					"          group by rent_mng_id, rent_l_cd \n"+
					"        ) m, \n"+
					"        cls_cont o, \n"+
					"	     users x,  \n"+
					"	     ( select * from cls_cont where cls_st in ('4','5')) y, \n"+
					"        ( select a.car_mng_id, a.ins_com_id  from insur a, ins_cls b  where  a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+) and  to_char(sysdate,'YYYYMMDD')  between to_char(to_date(a.ins_start_dt) + DECODE(a.INS_ST,'0', 0, 1) , 'yyyymmdd')  and decode(b.car_mng_id, null, a.ins_exp_dt, b.exp_dt)  ) z, \n"+
					"        fee_etc mm,  \n"+
				    "        users qu, users u2,  \n"+
				    "        (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2  \n"+
					" where  \n"+
					"        a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code \n"+
					"        and nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id)=k.user_id \n"+					
					"        and c.bus_agnt_id=l.user_id(+) \n"+
					"        and a.bus_id2=n.user_id(+) \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"        and a.sanction_id=s.user_id(+) \n"+
					"        and a.mng_id=u.user_id(+) \n"+
					"        and a.bus_id3=x.user_id(+) \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id(+) and d.rent_l_cd=mm.rent_l_cd(+) and d.rent_st=mm.rent_st(+) \n"+
					"        and mm.bus_agnt_id=qu.user_id(+) \n"+
					"        and a.mng_id2=u2.user_id(+) \n"+
					"        and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+) \n"+
					" ";

	
			if(gubun1.equals("Y")) query += " and nvl(a.use_yn,'Y')='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("R")) query += " and nvl(a.use_yn,'Y')='Y' and a.car_st='2' ";
			if(gubun1.equals("E")) query += " and nvl(a.use_yn,'Y')='Y' and d.fee_chk='1' ";
			if(gubun1.equals("F")) query += " and nvl(a.use_yn,'Y')='Y' and h.car_origin='2' ";

			if(gubun3.equals("1")) query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2")) query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3")) query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4")) query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5")) query += " and a.car_st<>'2' and a.car_gu='2'";
			if(gubun3.equals("6")) query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and y.cls_st='5'";
			if(gubun3.equals("8")) query += " and a.car_st<>'2' and y.cls_st='4'";
			if(gubun3.equals("10")) query += " and a.car_st='1'";
			if(gubun3.equals("11")) query += " and a.car_st='3'";
			if(gubun3.equals("9")) query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("20")) query += " and a.rent_st in ('3','4') and d.rent_way='3' and d.rent_st='1' and k.loan_st='2' and n.loan_st='2'";
			if(gubun3.equals("12")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='1'";
			if(gubun3.equals("13")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='4'";
			if(gubun3.equals("14")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='3'";
			if(gubun3.equals("15")) query += " and a.car_st='5'";


			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";
			String dt1 = "";
			String dt2 = "";

			dt1 = "substr(decode(d.rent_st,'1',a.rent_dt,d.rent_dt),1,6)";
			dt2 = "decode(d.rent_st,'1',a.rent_dt,d.rent_dt)";

			if(gubun4.equals("2")){
				dt1 = "substr(nvl(c.rent_suc_dt,y.cls_dt),1,6)";
				dt2 = "nvl(c.rent_suc_dt,y.cls_dt)";
			}else if(gubun4.equals("3")){
				dt1 = "to_char(a.sanction_date,'YYYYMM')";
				dt2 = "to_char(a.sanction_date,'YYYYMMDD')";
			}

			if(gubun5.equals("4"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";				//당월
			else if(gubun5.equals("5"))		query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%'";	//전월
			else if(gubun5.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";				//당일
			else if(gubun5.equals("2"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";			//전일
			else if(gubun5.equals("3"))		query += " and "+dt2+" between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD') ";//2일
			else if(gubun5.equals("6")){
				if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
				if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
			}

			
			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm||e.r_site, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(f.car_no||' '||f.first_car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(f.car_doc_no, ' '))";	
			if(s_kd.equals("5"))	what = "upper(nvl(f.car_num, ' '))";	
			if(s_kd.equals("8"))	what = "upper(nvl(k.user_nm, ' '))";	
			if(s_kd.equals("9"))	what = "upper(nvl(nvl(qu.user_nm,l.user_nm), ' '))";	
			if(s_kd.equals("10"))	what = "upper(nvl(n.user_nm, ' '))";	
			if(s_kd.equals("11"))	what = "upper(nvl(u.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(b.client_nm||e.site_jang, ' '))";
			if(s_kd.equals("15"))	what = "upper(nvl(x.user_nm, ' '))";
			if(s_kd.equals("16"))	what = "upper(nvl(j.car_nm, ' '))";
			if(s_kd.equals("23"))	what = "upper(nvl(u2.user_nm, ' '))";	
			if(s_kd.equals("19"))	what = "upper(nvl(b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' )||TEXT_DECRYPT(e.enp_no, 'pw' ) , ' '))";
			if(s_kd.equals("20"))	what = "i.jg_code";
			if(s_kd.equals("22"))	what = "upper(nvl(c.grt_suc_l_cd, ' '))";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(!s_kd.equals("3") && !s_kd.equals("1") && !gubun1.equals("R"))		query += " and a.car_st<>'2'";				//차량번호 검색이 아닌경우 보유차는 뺄것
				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17")||s_kd.equals("18"))	t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%')  \n";

				if(s_kd.equals("14") && !gubun1.equals("R")) query += " and b.client_id<>'000228'\n";	

				if(s_kd.equals("14")||s_kd.equals("23")) query += " and a.car_st in ('1','3') \n";	 //계약일자 검색시 보유차,월렌트는 보여주지 않는다.

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";
			}else{
				//차량회수 / GPS장착 / 보유차 / 미스캔
				if(gubun1.equals("I") || gubun1.equals("G") || gubun1.equals("R") || gubun1.equals("J") || gubun1.equals("E")){
				}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{
						//계약관리 디폴트
						/*승계미포함*/query += " and nvl(a.use_yn,'Y')='Y' and b.client_id<>'000228' and a.car_st in ('1','3','5') \n"; //계약관리 디폴트에서 보유차와 월렌트는 제외

						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), "+
							     "          decode(y.cls_st||decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')),'5', nvl(c.rent_suc_dt,y.cls_dt), nvl(d.rent_dt,a.rent_dt)) desc, "+
								 "          a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc \n";
					}
				}
			}


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContList_20150526]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리-미검수현황
	public Vector getContNoChkList_20150526(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  \n"+
					" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, a.use_yn, \n"+
					" b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					" j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					" nvl(f.car_ext,h.car_ext) car_ext, \n"+
					" decode(m.rent_st,'1','','연장') ext_st, \n"+
					" decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					" decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					" decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					" decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					" decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					" decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,  \n"+
					" decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
					" d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt, \n"+
					" a.brch_id, c.mng_br_id, nvl(d.ext_agnt,a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,o.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					" k.user_nm as bus_nm, n.user_nm bus_nm2, a.mng_id, a.mng_id2, a.bus_id3, l.user_nm as chk_nm,"+
					" a.sanction_id, s.user_nm as sanction_nm, \n"+
					" decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st,"+
				    " decode(o.chk_id,'','미점검','점검') chk_st, c.rent_suc_dt "+
					" from \n"+
					"		cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, \n"+
					"		car_etc h, car_nm i, car_mng j, users k, users n, users s, \n"+
					"		(select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"			from fee group by rent_mng_id, rent_l_cd) m, \n"+
					"       (select * from cls_cont where cls_st in ('4','5')) y, fee_etc o, users l\n"+
					"  where \n"+
					"  a.use_yn='Y' \n"+
					"  and a.client_id=b.client_id \n"+
					"  and a.rent_mng_id=c.rent_mng_id(+) and a.rent_l_cd=c.rent_l_cd(+) \n"+
					"  and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"  and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"  and a.car_mng_id=f.car_mng_id(+) \n"+
					"  and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd \n"+
					"  and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"  and h.car_id=i.car_id(+) and h.car_seq=i.car_seq(+) and i.car_comp_id=j.car_comp_id(+) and i.car_cd=j.code(+) \n"+
					"  and nvl(d.ext_agnt,a.bus_id)=k.user_id \n"+
					"  and a.bus_id2=n.user_id(+) \n"+
					"  and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"  and a.sanction_id=s.user_id(+) \n"+
					"  and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"  and d.rent_mng_id=o.rent_mng_id(+) and d.rent_l_cd=o.rent_l_cd(+) and d.rent_st=o.rent_st(+) \n"+
					"  and o.chk_id=l.user_id(+) \n"+
					"  and to_char(o.reg_dt,'YYYYMMDD')>='20101231' "+
					"  and b.client_id<>'000228' "+
			        "  and case when d.rent_st > '1' and y.cls_st is null then 'N' when d.rent_st > '1' and sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')) in (1,0) then 'N' else 'Y' end = 'Y' "+
					" ";

	
			//계약상태
			if(gubun1.equals("Y")) query += " and a.use_yn='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("1")) query += " and y.cls_st is null and d.rent_st='1'";
			if(gubun1.equals("2")) query += " and d.rent_st<>'1' and (y.cls_st is null or decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장',''))='연장') ";
			if(gubun1.equals("3")) query += " and nvl(y.cls_st,'0')<>'0' and decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) is null";

			//검수여부
			if(gubun3.equals("1")) query += " and o.chk_dt is null ";
			if(gubun3.equals("2")) query += " and o.chk_dt is not null ";

			if(!gubun2.equals("")) query += " and nvl(c.mng_br_id,a.brch_id)='"+gubun2+"'";

			String what = "";

			String dt1 = "";
			String dt2 = "";

			dt1 = "substr(decode(d.rent_st,'1',a.rent_dt,d.rent_dt),1,6)";
			dt2 = "decode(d.rent_st,'1',a.rent_dt,d.rent_dt)";

			if(gubun4.equals("2")){
				dt1 = "substr(nvl(c.rent_suc_dt,y.cls_dt),1,6)";
				dt2 = "nvl(c.rent_suc_dt,y.cls_dt)";
			}else if(gubun4.equals("3")){
				dt1 = "to_char(a.sanction_date,'YYYYMM')";
				dt2 = "to_char(a.sanction_date,'YYYYMMDD')";
			}

			if(gubun5.equals("4"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";				//당월
			else if(gubun5.equals("5"))		query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%'";	//전월
			else if(gubun5.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";				//당일
			else if(gubun5.equals("2"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";			//전일
			else if(gubun5.equals("3"))		query += " and "+dt2+" between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD') ";//2일
			else if(gubun5.equals("6")){
				if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
				if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
			}


			if(s_kd.equals("1"))	what = "upper(nvl(b.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(f.car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(f.car_doc_no, ' '))";	
			if(s_kd.equals("5"))	what = "upper(nvl(f.car_num, ' '))";	
			if(s_kd.equals("6"))	what = "upper(nvl(g.rpt_no, ' '))";		
			if(s_kd.equals("7"))	what = "upper(nvl(r.nm, ' '))";	
			if(s_kd.equals("8"))	what = "upper(nvl(k.user_nm, ' '))";	
			if(s_kd.equals("10"))	what = "upper(nvl(n.user_nm, ' '))";	
			if(s_kd.equals("13"))	what = "upper(nvl(b.client_nm, ' '))";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
				query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc";
			}else{
				if(s_kd.equals("10")){
					query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt";
				}else{
					query += " order by a.use_yn desc, decode(d.rent_st,'1',1,2) desc, a.car_gu, a.rent_st desc, nvl(d.rent_dt,a.rent_dt)";
				}
			}



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContNoChkList_20150526]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//월렌트 계약관리
	public Vector getContRmList_20160204(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, a.use_yn, \n"+
					"        b.firm_nm, f.car_nm, f.car_no, "+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"	     d.con_mon as ext_mon, m.con_mon, m.con_day, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, k.user_nm as bus_nm, u3.user_nm as bus_agnt_nm, "+
					"	     a.bus_id2, n.user_nm bus_nm2, a.mng_id, u.user_nm as mng_nm, "+
					"	     z.ins_com_id, z.ins_com_nm, \n"+
					"        m.rent_st as fee_rent_st, "+
				    "        mm.con_day as ext_day, a.reg_step  \n"+

					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 users k, users n, users u, users u2, users x, users u3,  \n"+
					"		 ( select a.rent_mng_id, a.rent_l_cd, max(a.rent_st) rent_st, sum(a.con_mon) con_mon, sum(b.con_day) con_day, "+
					"                 min(nvl(a.rent_start_dt,'')) rent_start_dt, max(nvl(a.rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee a, fee_etc b \n"+
					"          where  a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.rent_st=b.rent_st "+
					"          group by a.rent_mng_id, a.rent_l_cd \n"+
					"        ) m, \n"+					
					"        ( select a.car_mng_id, a.ins_com_id, c.ins_com_nm  from insur a, ins_cls b, ins_com c  where  a.ins_com_id=c.ins_com_id and a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+) and  to_char(sysdate,'YYYYMMDD')  between to_char(to_date(a.ins_start_dt) + DECODE(a.INS_ST,'0', 0, 1) , 'yyyymmdd')  and decode(b.car_mng_id, null, a.ins_exp_dt, b.exp_dt)  ) z, \n"+
					"        fee_etc mm, car_etc h, car_nm i  \n"+

					" where  \n"+
					"        a.car_st='4' "+
					"	     and a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id \n"+
				    "        AND ((d.RENT_ST='1' AND a.BUS_ID = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is not null AND d.ext_agnt = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is null AND a.bus_id = k.user_id )) \n"+						
					"        and a.bus_id2=n.user_id \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.mng_id=u.user_id(+) \n"+
					"        and a.mng_id2=u2.user_id(+) \n"+
					"        and a.bus_id3=x.user_id(+) \n"+
					"        and c.bus_agnt_id=u3.user_id(+) \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id and d.rent_l_cd=mm.rent_l_cd and d.rent_st=mm.rent_st \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq \n"+
					"		 \n";


	
			if(gubun1.equals("Y")) query += " and (a.use_yn is null or a.use_yn='Y')";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("F")) query += " and (a.use_yn is null or a.use_yn='Y') and h.car_origin='2' ";

			if(gubun3.equals("6")) query += " and d.rent_st<>'1'";

			if(!gubun2.equals("")) query += " and c.mng_br_id='"+gubun2+"'";

			String what = "";

				//당월
				if(gubun5.equals("4"))			query += " and ( (d.rent_st='1' and a.rent_dt like to_char(sysdate,'YYYYMM')||'%') or (d.rent_st<>'1' and a.rent_dt like to_char(sysdate,'YYYYMM')||'%') ) ";
				//전월
				else if(gubun5.equals("5"))		query += " and ( (d.rent_st='1' and a.rent_dt like to_char(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%') or (d.rent_st<>'1' and a.rent_dt like to_char(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%') ) ";
				//당일
                else if(gubun5.equals("1"))		query += " and ( (d.rent_st='1' and a.rent_dt=to_char(sysdate,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt=to_char(sysdate,'YYYYMMDD')) ) ";
				//전일				
                else if(gubun5.equals("2"))		query += " and ( (d.rent_st='1' and a.rent_dt=to_char(sysdate-1,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt=to_char(sysdate-1,'YYYYMMDD')) ) ";
				//2일
				else if(gubun5.equals("3"))		query += " and ( (d.rent_st='1' and a.rent_dt between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')) ) ";
                //기간 
				else if(gubun5.equals("6")){
					if(!st_dt.equals("") && !end_dt.equals("")) query += " and ( (d.rent_st='1' and a.rent_dt between '"+st_dt+"' and '"+end_dt+"') or (d.rent_st<>'1' and d.rent_dt between '"+st_dt+"' and '"+end_dt+"') ) ";
				}

			if(s_kd.equals("1"))	what = "upper(b.firm_nm||e.r_site)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no||' '||f.first_car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("12"))	what = "u2.user_nm";	
			if(s_kd.equals("13"))	what = "b.client_nm||e.site_jang";
			if(s_kd.equals("15"))	what = "x.user_nm";
			if(s_kd.equals("16"))	what = "f.car_nm";
			if(s_kd.equals("19"))	what = "b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' )|| TEXT_DECRYPT(e.enp_no, 'pw' ), ' '))";
			if(s_kd.equals("20"))	what = "i.jg_code";
			
			if(!what.equals("") && !t_wd.equals("")){				

				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17")||s_kd.equals("18"))	t_wd = AddUtil.replace(t_wd,"-","");

				if(s_kd.equals("1") || s_kd.equals("2") || s_kd.equals("5")) {
					query += " and "+what+" like upper('%"+t_wd+"%')  \n";
				}else{
					query += " and "+what+" like '%"+t_wd+"%'  \n";
				}

				if(s_kd.equals("12")) query += " and a.use_yn ='Y' \n";	

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";

			}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{
						//계약관리 디폴트 (당월계약분)
						/*승계미포함*/query += " and (a.use_yn is null or a.use_yn='Y') \n";

						//미결,신차,재리스,연장,승계순
						query += " order by nvl(d.rent_dt,a.rent_dt) desc, a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc \n";
					}
			}


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContRmList_20160204]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리
	public Vector getContList_20160614(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select   \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, nvl(c.rent_suc_dt,y.cls_dt) as rent_suc_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체', '7', '에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2',decode(a.car_gu,'2','중고차','예비'),'3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	"        decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지', '15', '말소') cls_st, \n"+
					"        a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, "+
					"        k.user_nm as bus_nm, k.user_m_tel as bus_m_tel,  \n"+
					"        a.bus_id2, \n"+
					"        n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel,  \n"+
					"        a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel,  \n"+
				    "        z.ins_com_id, z.ins_com_nm, \n"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        m.rent_st as fee_rent_st, a.reg_step \n"+
					" from \n"+ 
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, "+
					"	     users n, "+
					"	     users u, \n"+
					"		 ( select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee  \n"+
					"          group by rent_mng_id, rent_l_cd \n"+
					"        ) m, \n"+
					"        cls_cont o, \n"+
				    "        ( select rent_mng_id, reg_dt, cls_dt, cls_st from cls_cont where cls_st in ('4','5')) y, \n"+ 
                    "        ( select a.car_mng_id, a.ins_com_id, c.ins_com_nm    \n"+ 
                    "          from   insur a, ins_cls b, ins_com c   \n"+ 
                    "          where  a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+) and a.ins_com_id=c.ins_com_id   \n"+ 
                    "                 AND a.ins_start_dt <= TO_CHAR(sysdate-1,'YYYYMMDD')  \n"+ 
                    "                 AND ( (b.car_mng_id IS NULL and a.ins_exp_dt > TO_CHAR(sysdate,'YYYYMMDD'))  OR   (b.car_mng_id IS NOT NULL AND b.exp_dt >  TO_CHAR(sysdate,'YYYYMMDD')) )  \n"+ 
			        "        ) z, \n"+ 
					"        fee_etc mm,  \n"+
					"        (select a.car_mng_id from cont a, commi c \n"+
					"    where  a.rent_mng_id = c.rent_mng_id and a.rent_l_cd = c.rent_l_cd and a.car_gu='2' and c.agnt_st = '6'   AND a.car_mng_id IS NOT NULL group by a.car_mng_id) ac, \n"+ 
					"    (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2, car_pur p \n"+ 
					" where  \n"+
					"        a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code \n"+
				    "        AND ((d.RENT_ST='1' AND a.BUS_ID = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is not null AND d.ext_agnt = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is null AND a.bus_id = k.user_id )) \n"+
					"        and a.bus_id2=n.user_id \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"        and a.mng_id=u.user_id(+) \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id and d.rent_l_cd=mm.rent_l_cd and d.rent_st=mm.rent_st \n"+
					"        and a.car_mng_id=ac.car_mng_id(+) and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+) \n"+
					"        and a.rent_mng_id=p.rent_mng_id and a.rent_l_cd=p.rent_l_cd \n"+
					" ";

	
			if(gubun1.equals("Y")) query += " and a.use_yn='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("R")) query += " and a.use_yn='Y' and a.car_st='2' ";
			if(gubun1.equals("E")) query += " and a.use_yn='Y' and d.fee_chk='1' ";
			if(gubun1.equals("F")) query += " and h.car_origin='2' ";//수입차
			if(gubun1.equals("C")) query += " and ac.car_mng_id is not null ";//자산양수차
			if(gubun1.equals("EH")) query += " and p.ecar_loc_st||p.hcar_loc_st is not null ";//전기,수소차

			if(gubun3.equals("1"))  query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2"))  query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3"))  query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4"))  query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5"))  query += " and a.car_gu='2'";
			if(gubun3.equals("6"))  query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7"))  query += " and a.car_st<>'2' and y.cls_st='5'";
			if(gubun3.equals("8"))  query += " and a.car_st<>'2' and y.cls_st='4'";
			if(gubun3.equals("10")) query += " and a.car_st='1'";
			if(gubun3.equals("11")) query += " and a.car_st='3'";
			if(gubun3.equals("9"))  query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("20")) query += " and a.rent_st in ('3','4') and d.rent_way='3' and d.rent_st='1' and k.loan_st='2' and n.loan_st='2'";
			if(gubun3.equals("12")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='1'";
			if(gubun3.equals("13")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='4'";
			if(gubun3.equals("14")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='3'";
			if(gubun3.equals("15")) query += " and a.car_st='5'";


			if(!gubun2.equals("")) query += " and (c.mng_br_id='"+gubun2+"' OR (c.mng_br_id is null and a.brch_id='"+gubun2+"' ))";

			String what = "";

			String dt1 = "";
			String dt2 = "";

			//계약(연장)일자
			if(gubun4.equals("1")){

				//당월
				if(gubun5.equals("4"))			query += " and ( (d.rent_st='1' and a.rent_dt like to_char(sysdate,'YYYYMM')||'%') or (d.rent_st<>'1' and a.rent_dt like to_char(sysdate,'YYYYMM')||'%') ) ";
				//전월
				else if(gubun5.equals("5"))		query += " and ( (d.rent_st='1' and a.rent_dt like to_char(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%') or (d.rent_st<>'1' and a.rent_dt like to_char(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%') ) ";
				//당일
                else if(gubun5.equals("1"))		query += " and ( (d.rent_st='1' and a.rent_dt=to_char(sysdate,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt=to_char(sysdate,'YYYYMMDD')) ) ";
				//전일				
                else if(gubun5.equals("2"))		query += " and ( (d.rent_st='1' and a.rent_dt=to_char(sysdate-1,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt=to_char(sysdate-1,'YYYYMMDD')) ) ";
				//2일
				else if(gubun5.equals("3"))		query += " and ( (d.rent_st='1' and a.rent_dt between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')) ) ";
                //기간 
				else if(gubun5.equals("6")){
					if(!st_dt.equals("") && !end_dt.equals("")) query += " and ( (d.rent_st='1' and a.rent_dt between '"+st_dt+"' and '"+end_dt+"') or (d.rent_st<>'1' and d.rent_dt between '"+st_dt+"' and '"+end_dt+"') ) ";
				}

			//승계일자
			}else if(gubun4.equals("2")){

				dt1 = "substr(c.rent_suc_dt,1,6)";
				dt2 = "c.rent_suc_dt";

				if(gubun5.equals("4"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";				//당월
				else if(gubun5.equals("5"))		query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%'";	//전월
				else if(gubun5.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";				//당일
				else if(gubun5.equals("2"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";			//전일
				else if(gubun5.equals("3"))		query += " and "+dt2+" between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD') ";//2일
				else if(gubun5.equals("6")){
					if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between '"+st_dt+"' and '"+end_dt+"'";
				}
				
			//대여개시일
			}else if(gubun4.equals("3")){

				dt1 = "substr(m.rent_start_dt,1,6)";
				dt2 = "m.rent_start_dt";

				if(gubun5.equals("4"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";				//당월
				else if(gubun5.equals("5"))		query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%'";	//전월
				else if(gubun5.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";				//당일
				else if(gubun5.equals("2"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";			//전일
				else if(gubun5.equals("3"))		query += " and "+dt2+" between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD') ";//2일
				else if(gubun5.equals("6")){
					if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between '"+st_dt+"' and '"+end_dt+"'";
				}				
				

			}
			
			if(s_kd.equals("1"))	what = "upper(b.firm_nm||e.r_site)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no||' '||f.first_car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("13"))	what = "upper(nvl(b.client_nm||e.site_jang, ' '))";
			if(s_kd.equals("16"))	what = "upper(j.car_nm)";
			if(s_kd.equals("19"))	what = "b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' )||TEXT_DECRYPT(e.enp_no, 'pw' ) ";
			if(s_kd.equals("20"))	what = "i.jg_code";
			if(s_kd.equals("22"))	what = "c.grt_suc_l_cd";			
			if(s_kd.equals("99"))	what = "upper(b.firm_nm||e.r_site)";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(!s_kd.equals("1") && !s_kd.equals("2") && !s_kd.equals("3") && !gubun1.equals("R") && !gubun1.equals("C"))		query += " and a.car_st<>'2'";				//차량번호 검색이 아닌경우 보유차는 뺄것
				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17")||s_kd.equals("18"))	t_wd = AddUtil.replace(t_wd,"-","");

				if(s_kd.equals("1")||s_kd.equals("2")||s_kd.equals("13")||s_kd.equals("16")){	
					query += " and "+what+" like upper('%"+t_wd+"%') \n";
				} else if (s_kd.equals("99")) {
					query += " and "+what+" like upper('"+t_wd+"') \n";
				}else{
					query += " and "+what+" like '%"+t_wd+"%' \n";
				}

				if(s_kd.equals("14") && !gubun1.equals("R") && !gubun1.equals("C") && !gubun3.equals("5")) query += " and b.client_id<>'000228'\n";	

				if(s_kd.equals("14")||s_kd.equals("23")) query += " and a.car_st in ('1','3') \n";	 //계약일자 검색시 보유차,월렌트는 보여주지 않는다.

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";
			}else{
				//차량회수 / GPS장착 / 보유차 / 미스캔 / 중고차
				if(gubun1.equals("I") || gubun1.equals("G") || gubun1.equals("R") || gubun1.equals("C") || gubun1.equals("J") || gubun1.equals("E") || gubun3.equals("5")){
				}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{
						//계약관리 디폴트
						/*승계미포함*/query += " and (a.use_yn is null or a.use_yn='Y') and b.client_id<>'000228' and a.car_st in ('1','3','5') \n"; //계약관리 디폴트에서 보유차와 월렌트는 제외

						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), "+
							     "          decode(y.cls_st||decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')),'5', nvl(c.rent_suc_dt,y.cls_dt), nvl(d.rent_dt,a.rent_dt)) desc, "+
								 "          a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc \n";
					}
				}
			}

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContList_20160614]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//미결 계약 검색 : 리스트 조회
	public Vector getHoldContList_20160614(String s_kd, String t_wd, String andor, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  "+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.brch_id, c.mng_br_id,"+
					"        b.firm_nm, nvl(d.ext_agnt,a.bus_id) as bus_id, decode(d.rent_st,'1',c.bus_agnt_id,q.bus_agnt_id) bus_agnt_id, "+
					"        a.bus_id2, nvl(d.rent_dt,a.rent_dt) rent_dt, nvl(c.rent_suc_dt,o.cls_dt) rent_suc_dt, "+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st, "+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st,"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu,"+
					"        decode(a.car_st,'1','렌트','2',decode(a.car_gu,'2','중고차','예비'),'3','리스','4','월렌트','5','업무대여') car_st, "+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way,"+
					"        decode(d.rent_st,'1','','연장') ext_st,"+
  					"        decode(d.rent_st,'1','',decode(c.suc_rent_st,d.rent_st,'계약승계',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(o.cls_dt,'YYYYMMDD')),1,'연장',0,'연장',''))) ext_st2, \n"+
					"        decode(o.cls_st,'4','차종변경','5','계약승계') cng_st,"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm,"+
					"        f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, "+
					"        nvl(ec.nm, ec2.nm) car_ext,"+
					"        g.rpt_no, j.car_nm,"+
					"        k.user_nm as bus_nm, nvl(qu.user_nm,l.user_nm) as bus_agnt_nm, n.user_nm as bus_nm2, "+
			        "        d.rent_st as fee_rent_st,"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        a.reg_step, d.rent_start_dt, d.rent_end_dt "+
					" from   cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, car_etc h, car_nm i, car_mng j, users k, users l, users n, "+
					"        (select rent_mng_id, reg_dt, cls_dt, cls_st from cls_cont where cls_st in ('4','5')) o,"+
					"        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) p, fee_etc q, users qu,"+
					"        (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 "+
					" where "+
					"        ( (a.use_yn is null) or (a.use_yn='Y' and (o.cls_st in ('4','5') or d.rent_st>'1') and d.rent_dt > '20071013' and nvl(to_char(a.sanction_date,'YYYYMMDD'),'00000000') < d.rent_dt) ) "+
					"        and a.car_st<>'4' "+
					"        and a.client_id=b.client_id"+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd "+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+)"+
					"        and a.car_mng_id=f.car_mng_id(+)"+
					"        and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code"+
//				    "        AND ((d.RENT_ST='1' AND a.BUS_ID = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is not null AND d.ext_agnt = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is null AND a.bus_id = k.user_id )) \n"+
				    "        AND ((d.ext_agnt is null and a.bus_id=k.user_id) or (d.ext_agnt is not null and d.ext_agnt=k.user_id)) \n"+
					"        and c.bus_agnt_id=l.user_id(+)"+
					"        and a.bus_id2=n.user_id(+)"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.reg_dt=o.reg_dt(+)"+
					"        and d.rent_mng_id=p.rent_mng_id and d.rent_l_cd=p.rent_l_cd and d.rent_st=p.rent_st"+
					"        and d.rent_mng_id=q.rent_mng_id and d.rent_l_cd=q.rent_l_cd and d.rent_st=q.rent_st"+
					"        and q.bus_agnt_id=qu.user_id(+) and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)"+
					" ";

			if(!gubun2.equals("")) query += " and (c.mng_br_id='"+gubun2+"' OR (c.mng_br_id is null and a.brch_id='"+gubun2+"' ))";

			if(gubun3.equals("1")) query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2")) query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3")) query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4")) query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5")) query += " and a.car_gu='2'";
			if(gubun3.equals("6")) query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7")) query += " and a.car_st<>'2' and o.cls_st='5'";
			if(gubun3.equals("8")) query += " and a.car_st<>'2' and o.cls_st='4'";
			if(gubun3.equals("9")) query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("12")) query += " and a.car_st<>'2' and a.rent_st='1' and d.rent_st='1'";
			if(gubun3.equals("13")) query += " and a.car_st<>'2' and a.rent_st='4' and d.rent_st='1'";
			if(gubun3.equals("14")) query += " and a.car_st<>'2' and a.rent_st='3' and d.rent_st='1'";
			if(gubun3.equals("15")) query += " and a.reg_step='1'";
			if(gubun3.equals("16")) query += " and a.reg_step='2'";
			if(gubun3.equals("17")) query += " and a.reg_step='3'";
			

			
			String what = "";

			if(s_kd.equals("1"))	what = "upper(b.firm_nm)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";		
			if(s_kd.equals("6"))	what = "g.rpt_no";	
			if(s_kd.equals("7"))	what = "a.brch_id";	
			if(s_kd.equals("8"))	what = "k.user_nm";		
			if(s_kd.equals("9"))	what = "j.car_nm||i.car_name";	
			if(s_kd.equals("10"))	what = "a.reg_dt";		
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				if(s_kd.equals("1")||s_kd.equals("2")||s_kd.equals("5")||s_kd.equals("6")){	
					query += " and "+what+" like upper('%"+t_wd+"%') ";				
				}else{
					query += " and "+what+" like '%"+t_wd+"%' ";				
				}
			}

			query += " order by decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') desc, "+
					 "          decode(o.cls_st,'',nvl(d.rent_dt,a.rent_dt), decode(sign(to_date(nvl(c.rent_suc_dt,o.cls_dt),'YYYYMMDD')-to_date(d.rent_dt,'YYYYMMDD')),-1,d.rent_dt,nvl(c.rent_suc_dt,o.cls_dt))) desc,"+
					 "          a.rent_mng_id";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
	    	    	
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

			

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getHoldContList_20160614]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//미결 계약 검색 : 리스트 조회
	public Vector getHoldContList_20160614(String s_kd, String t_wd, String andor, String gubun2, String gubun3, String ck_acar_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select "+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.brch_id, c.mng_br_id,"+
					"        b.firm_nm, a.bus_id, decode(d.rent_st,'1',c.bus_agnt_id,q.bus_agnt_id) bus_agnt_id, a.bus_id2, nvl(d.rent_dt,a.rent_dt) rent_dt, nvl(c.rent_suc_dt,o.cls_dt) rent_suc_dt, "+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st, "+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st,"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu,"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st, "+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way,"+
					"        decode(d.rent_st,'1','','연장') ext_st,"+
  					"        decode(d.rent_st,'1','',decode(c.suc_rent_st,d.rent_st,'계약승계',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(o.cls_dt,'YYYYMMDD')),1,'연장',0,'연장',''))) ext_st2, \n"+
					"        decode(o.cls_st,'',decode(c.rent_suc_dt,'','','계약승계'),'4','차종변경','5','계약승계') cng_st,"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm,"+
					"        f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, "+
					"        nvl(ec.nm, ec2.nm) car_ext,"+
					"        g.rpt_no, j.car_nm,"+
					"        k.user_nm as bus_nm, nvl(qu.user_nm,l.user_nm) as bus_agnt_nm, n.user_nm as bus_nm2, decode(d.ext_agnt,'',m.user_nm,k.user_nm) as bus_nm3, d.rent_st as fee_rent_st,"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        a.reg_step "+
					" from   cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, car_etc h, car_nm i, car_mng j, users k, users l, users n, users m, "+
					"        (select rent_mng_id, reg_dt, cls_dt, cls_st  from cls_cont where cls_st in ('4','5') and reg_dt < '20180611') o,"+
					"        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) p, fee_etc q, users qu,"+
					"        (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 "+
					" where  a.bus_id='"+ck_acar_id+"' and a.car_st<>'2' and a.use_yn is null "+
					"        and a.client_id=b.client_id"+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+)"+
					"        and a.car_mng_id=f.car_mng_id(+)"+
					"        and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code"+
				    "        AND ((d.RENT_ST='1' AND a.BUS_ID = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is not null AND d.ext_agnt = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is null AND a.bus_id = k.user_id )) \n"+
					"        and c.bus_agnt_id=l.user_id(+)"+
					"        and a.bus_id2=n.user_id(+)"+
					"        and a.bus_id3=m.user_id(+)"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.reg_dt=o.reg_dt(+) and o.rent_mng_id is null "+
					"        and d.rent_mng_id=p.rent_mng_id and d.rent_l_cd=p.rent_l_cd and d.rent_st=p.rent_st"+
					"        and d.rent_mng_id=q.rent_mng_id and d.rent_l_cd=q.rent_l_cd and d.rent_st=q.rent_st"+
					"        and q.bus_agnt_id=qu.user_id(+) and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)"+
					" ";

			if(gubun3.equals("1")) query += " and a.car_st='1'";
			if(gubun3.equals("2")) query += " and a.car_st='3'";
			if(gubun3.equals("3")) query += " and d.rent_way='1'";
			if(gubun3.equals("4")) query += " and d.rent_way in ('2','3')";
			if(gubun3.equals("12")) query += " and a.car_st<>'2' and a.rent_st='1' and d.rent_st='1'";
			if(gubun3.equals("13")) query += " and a.car_st<>'2' and a.rent_st='4' and d.rent_st='1'";
			if(gubun3.equals("14")) query += " and a.car_st<>'2' and a.rent_st='3' and d.rent_st='1'";

			
			String what = "";

			if(s_kd.equals("1"))	what = "upper(b.firm_nm)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";		
			if(s_kd.equals("6"))	what = "g.rpt_no";	
			if(s_kd.equals("7"))	what = "a.brch_id";	
			if(s_kd.equals("9"))	what = "j.car_nm||i.car_name";	
			
			if(!s_kd.equals("") && !t_wd.equals("")){

				if(s_kd.equals("1")||s_kd.equals("2")||s_kd.equals("5")||s_kd.equals("6")){	
					query += " and "+what+" like upper('%"+t_wd+"%') ";				
				}else{
					query += " and "+what+" like '%"+t_wd+"%' ";				
				}

			}

			query += " order by decode(length(a.sanction),8,'요청','미결') desc, "+
					 "          a.rent_dt desc, "+
					 "          a.rent_mng_id";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
	    	    	
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getHoldContList_20160614(String s_kd, String t_wd, String andor, String gubun2, String gubun3, String ck_acar_id)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리-계약변경미확인현황
	public Vector getContNoCngChkList_20160614(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
					"        d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt, \n"+
					"        a.brch_id, c.mng_br_id, nvl(d.ext_agnt,a.bus_id) bus_id, "+
					"        k.user_nm as bus_nm, "+
					"	     a.sanction, to_char(a.sanction_date,'YYYYMMDD') sanction_date, to_char(o.reg_dt,'YYYYMMDD') cng_reg_dt, o.cng_chk_dt, \n"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st,"+
				    "        decode(o.cng_chk_dt,'','미점검','점검') chk_st"+
					" from \n"+
					"		 fee_etc o, fee d, cont a, client b, cont_etc c, client_site e, car_reg f, car_pur g, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, "+
					"		 ( select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"		   from fee group by rent_mng_id, rent_l_cd) m, \n"+
					"        ( select rent_mng_id, reg_dt, cls_dt, cls_st from cls_cont where cls_st in ('4','5')) y, "+
					"        ( select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2  "+
					"  where \n"+
					"         o.cng_chk_id is not null  "+
					"         and o.reg_dt >= to_date('20100422','YYYYMMDD') "+
					"         and o.rent_mng_id=d.rent_mng_id and o.rent_l_cd=d.rent_l_cd and o.rent_st=d.rent_st \n"+
					"         and o.rent_mng_id=a.rent_mng_id and o.rent_l_cd=a.rent_l_cd \n"+
					"         and a.car_st in ('1','3') "+
					"         and a.client_id=b.client_id \n"+
					"         and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
					"         and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"         and a.car_mng_id=f.car_mng_id \n"+
					"         and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd \n"+
					"         and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"         and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code \n"+
				    "         AND ((d.RENT_ST='1' AND a.BUS_ID = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is not null AND d.ext_agnt = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is null AND a.bus_id = k.user_id )) \n"+
					"         and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"         and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"         and b.client_id<>'000228' and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+) "+
					" ";

	
			//계약상태
			if(gubun1.equals("Y")) query += " and a.use_yn='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";

			//검수여부
			if(gubun3.equals("1")) query += " and o.cng_chk_dt is null ";
			if(gubun3.equals("2")) query += " and o.cng_chk_dt is not null ";



			String what = "";

			if(s_kd.equals("1"))	what = "upper(b.firm_nm)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14"))		t_wd = AddUtil.replace(t_wd,"-","");

				if(s_kd.equals("1")||s_kd.equals("2")||s_kd.equals("5")||s_kd.equals("6")){	
					query += " and "+what+" like upper('%"+t_wd+"%') ";
				}else{
                	query += " and "+what+" like '%"+t_wd+"%' ";
				}
				query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc";
			}else{
				if(s_kd.equals("10")){ //영업담당자
					query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt";
				}else{
					query += " order by a.use_yn desc, a.sanction desc, a.SANCTION_DATE desc, o.reg_dt desc, decode(d.rent_st,'1',1,2) desc, nvl(a.car_gu,a.reg_id), a.rent_st desc, nvl(d.rent_dt,a.rent_dt)";
				}
			}



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContNoCngChkList_20160614]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리-미검수현황
	public Vector getContNoChkList_20160614(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
					"        d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt, \n"+
					"        a.brch_id, c.mng_br_id, nvl(d.ext_agnt,a.bus_id) bus_id, decode(d.rent_st,'1',c.bus_agnt_id,o.bus_agnt_id) bus_agnt_id, a.bus_id2, \n"+
					"        k.user_nm as bus_nm, "+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st,"+
				    "        decode(o.chk_id,'','미점검','점검') chk_st, c.rent_suc_dt "+
					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, "+
					"		 ( select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"		   from fee group by rent_mng_id, rent_l_cd) m, \n"+
					"        (select rent_mng_id, reg_dt, cls_dt, cls_st from cls_cont where cls_st in ('4','5')) y, fee_etc o, \n"+
					"        (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2  \n"+
					"  where \n"+
					"        a.use_yn='Y' \n"+
					"        and a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code \n"+
				    "        AND ((d.RENT_ST='1' AND a.BUS_ID = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is not null AND d.ext_agnt = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is null AND a.bus_id = k.user_id )) \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"        and d.rent_mng_id=o.rent_mng_id and d.rent_l_cd=o.rent_l_cd and d.rent_st=o.rent_st \n"+
					"        and to_char(o.reg_dt,'YYYYMMDD')>='20101231' "+
					"        and b.client_id<>'000228' and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)"+
					" ";

	
			//계약상태
			if(gubun1.equals("Y")) query += " and a.use_yn='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("1")) query += " and y.cls_st is null and d.rent_st='1'";
			if(gubun1.equals("2")) query += " and d.rent_st<>'1' and (y.cls_st is null or ( m.rent_st=<>'1' and d.rent_start_dt > y.cls_dt ) ) ";//연장
			if(gubun1.equals("3")) query += " and y.cls_st is not null and d.rent_start_dt < y.cls_dt "; //계약승계,차종변경

			//검수여부
			if(gubun3.equals("1")) query += " and o.chk_dt is null ";
			if(gubun3.equals("2")) query += " and o.chk_dt is not null ";


			String what = "";

			String dt1 = "";
			String dt2 = "";

			//계약(연장)일자
			if(gubun4.equals("1")){

				//당월
				if(gubun5.equals("4"))			query += " and ( (d.rent_st='1' and a.rent_dt like to_char(sysdate,'YYYYMM')||'%') or (d.rent_st<>'1' and a.rent_dt like to_char(sysdate,'YYYYMM')||'%') ) ";
				//전월
				else if(gubun5.equals("5"))		query += " and ( (d.rent_st='1' and a.rent_dt like to_char(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%') or (d.rent_st<>'1' and a.rent_dt like to_char(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%') ) ";
				//당일
                else if(gubun5.equals("1"))		query += " and ( (d.rent_st='1' and a.rent_dt=to_char(sysdate,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt=to_char(sysdate,'YYYYMMDD')) ) ";
				//전일				
                else if(gubun5.equals("2"))		query += " and ( (d.rent_st='1' and a.rent_dt=to_char(sysdate-1,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt=to_char(sysdate-1,'YYYYMMDD')) ) ";
				//2일
				else if(gubun5.equals("3"))		query += " and ( (d.rent_st='1' and a.rent_dt between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')) ) ";
                //기간 
				else if(gubun5.equals("6")){
					if(!st_dt.equals("") && !end_dt.equals("")) query += " and ( (d.rent_st='1' and a.rent_dt between '"+st_dt+"' and '"+end_dt+"') or (d.rent_st<>'1' and d.rent_dt between '"+st_dt+"' and '"+end_dt+"') ) ";
				}

			//승계일자
			}else if(gubun4.equals("2")){

				dt1 = "substr(c.rent_suc_dt,1,6)";
				dt2 = "c.rent_suc_dt";

				if(gubun5.equals("4"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";				//당월
				else if(gubun5.equals("5"))		query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%'";	//전월
				else if(gubun5.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";				//당일
				else if(gubun5.equals("2"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";			//전일
				else if(gubun5.equals("3"))		query += " and "+dt2+" between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD') ";//2일
				else if(gubun5.equals("6")){
					if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between '"+st_dt+"' and '"+end_dt+"'";
				}

			}


			if(s_kd.equals("1"))	what = "upper(b.firm_nm)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			if(s_kd.equals("4"))	what = "a.brch_id";		
			if(s_kd.equals("5"))	what = "k.user_nm";		
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");

				if(s_kd.equals("1")||s_kd.equals("2")){	
					query += " and "+what+" like upper('%"+t_wd+"%') ";
				}else{
                	query += " and "+what+" like '%"+t_wd+"%' ";
				}

				query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc";
			}else{
				if(s_kd.equals("10")){
					query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt";
				}else{
					query += " order by a.use_yn desc, decode(d.rent_st,'1',1,2) desc, a.car_gu, a.rent_st desc, nvl(d.rent_dt,a.rent_dt)";
				}
			}



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContNoChkList_20160614]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }



	//계약관련 보험 검색
	public Hashtable getInsurOfCont(String l_cd, String m_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";
				 
		query =  "  SELECT c.ins_com_nm, DECODE(c.ins_com_id,'0007','1588-5114','0008','1588-0100','0038','1661-7977') AS ins_tel , a.mng_id ,d.USER_NM,d.user_m_tel ,d.br_id,a.client_id \n  "+
	   			 "  FROM cont a, insur b, ins_com c ,users d  \n  "+
				 "  WHERE a.rent_mng_id = '"+m_id+"'  \n "+
				 "  AND a.rent_l_cd = '"+l_cd+"'  \n "+
				 "  AND a.car_mng_id=b.CAR_MNG_ID  \n "+
				 "  AND b.ins_sts='1'   \n "+
				 "  AND b.ins_com_id = c.INS_COM_ID  "+
				 "  AND a.mng_id = d.user_id   \n ";
					 
				 
		try 
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getInsurOfCont]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }


	public ContCmsBean getCardCmsMng(String m_id, String l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ContCmsBean bean = new ContCmsBean();

		String query = " select a.*, decode(g.cms_status, 'Y','완료','N','오류','-') cbit, g.adate  "+
						" from card_cms_mng a, (select rent_mng_id, rent_l_cd, max(seq) seq from card_cms_mng group by rent_mng_id, rent_l_cd) b, cms.card_cms_mem g"+
						" where a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and a.seq=b.seq and a.rent_l_cd=g.cms_primary_seq(+)"+
						" and a.rent_mng_id = '"+m_id+"' and a.rent_l_cd = '"+l_cd+"'";


		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();    	
			if(rs.next())
			{
				bean.setRent_mng_id	(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				bean.setRent_l_cd	(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				bean.setSeq			(rs.getString("SEQ")==null?"":rs.getString("SEQ"));
				bean.setCms_st		(rs.getString("CMS_ST")==null?"":rs.getString("CMS_ST"));
				bean.setCms_amt		(rs.getInt   ("CMS_AMT"));
				bean.setCp_st		(rs.getString("CP_ST")==null?"":rs.getString("CP_ST"));
				bean.setCms_start_dt(rs.getString("CMS_START_DT")==null?"":rs.getString("CMS_START_DT"));
				bean.setCms_end_dt	(rs.getString("CMS_END_DT")==null?"":rs.getString("CMS_END_DT"));
				bean.setCms_day		(rs.getString("CMS_DAY")==null?"":rs.getString("CMS_DAY"));
				bean.setCms_bank	(rs.getString("CMS_BANK")==null?"":rs.getString("CMS_BANK"));
				bean.setCms_acc_no	(rs.getString("CMS_ACC_NO")==null?"":rs.getString("CMS_ACC_NO"));
				bean.setCms_dep_nm	(rs.getString("CMS_DEP_NM")==null?"":rs.getString("CMS_DEP_NM"));
				bean.setCms_dep_ssn	(rs.getString("CMS_DEP_SSN")==null?"":rs.getString("CMS_DEP_SSN"));
				bean.setCms_dep_post(rs.getString("CMS_DEP_POST")==null?"":rs.getString("CMS_DEP_POST"));
				bean.setCms_dep_addr(rs.getString("CMS_DEP_ADDR")==null?"":rs.getString("CMS_DEP_ADDR"));
				bean.setCms_etc		(rs.getString("CMS_ETC")==null?"":rs.getString("CMS_ETC"));
				bean.setCms_tel		(rs.getString("CMS_TEL")==null?"":rs.getString("CMS_TEL"));
				bean.setCms_m_tel	(rs.getString("CMS_M_TEL")==null?"":rs.getString("CMS_M_TEL"));
				bean.setCms_email	(rs.getString("CMS_EMAIL")==null?"":rs.getString("CMS_EMAIL"));
				bean.setApp_dt		(rs.getString("APP_DT")==null?"":rs.getString("APP_DT"));
				bean.setReg_dt		(rs.getString("REG_DT")==null?"":rs.getString("REG_DT"));
				bean.setReg_id		(rs.getString("REG_ID")==null?"":rs.getString("REG_ID"));
				bean.setUpdate_dt	(rs.getString("UPDATE_DT")==null?"":rs.getString("UPDATE_DT"));
				bean.setUpdate_id	(rs.getString("UPDATE_ID")==null?"":rs.getString("UPDATE_ID"));
				bean.setReg_st		(rs.getString("REG_ST")==null?"":rs.getString("REG_ST"));				
				bean.setCbit		(rs.getString("cbit")==null?"":rs.getString("cbit"));		
				bean.setApp_id		(rs.getString("APP_ID")==null?"":rs.getString("APP_ID"));
				bean.setC_firm_nm	(rs.getString("C_FIRM_NM")==null?"":rs.getString("C_FIRM_NM"));
				bean.setC_enp_no	(rs.getString("C_ENP_NO")==null?"":rs.getString("C_ENP_NO"));
				bean.setC_mm		(rs.getString("C_MM")==null?"":rs.getString("C_MM"));
				bean.setC_yyyy		(rs.getString("C_YYYY")==null?"":rs.getString("C_YYYY"));
				bean.setAdate		(rs.getString("ADATE")==null?"":rs.getString("ADATE"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCardCmsMng]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return bean;
		}				
	}

	//계약 수정 : 자동이체 insert
	public boolean insertContCardCmsMng(ContCmsBean bean)
	{
		getConnection();
		PreparedStatement pstmt1 = null;
		PreparedStatement pstmt2 = null;
		PreparedStatement pstmt3 = null;
		boolean flag = true;
		ResultSet rs = null;
		ResultSet rs1 = null;
		String seq = "";
		String bank_cd = "";
		
		String query1 = " select nvl(max(seq)+1, 1) ID from card_cms_mng"+
							" where rent_mng_id ='"+bean.getRent_mng_id()+"' and rent_l_cd='"+bean.getRent_l_cd()+"'" ;

		String query3 = " select code from code "+
							" where c_st = '0003' and nm_cd ='"+bean.getCms_bank()+"'" ;
							
		String query2 = " insert into card_cms_mng "+
						" (RENT_MNG_ID, RENT_L_CD, SEQ, CMS_ST, CMS_AMT,"+
						" CP_ST, CMS_START_DT, CMS_END_DT, CMS_DAY, CMS_BANK,"+
						" CMS_ACC_NO, CMS_DEP_NM, CMS_DEP_SSN, CMS_DEP_POST, CMS_DEP_ADDR,"+
						" CMS_ETC, CMS_TEL, CMS_M_TEL, CMS_EMAIL, APP_DT,"+
						" REG_DT, REG_ID, REG_ST, BANK_CD, APP_ID, c_firm_nm, c_enp_no, c_mm, c_yyyy )"+
						" values ("+
						" ?, ?, ?, ?, ?,"+
						" ?, replace(?, '-', ''), replace(?, '-', ''), ?, ?,"+
						" replace(?, '-', ''), ?, ?, ?, ?,"+
						" ?, ?, ?, ?, replace(?, '-', ''),"+
						" to_char(sysdate,'YYYYMMDD'), ?, ?, ?, ?, ?, ?, ?, ? "+
						")";
		
		try{
			conn.setAutoCommit(false);

			pstmt1 = conn.prepareStatement(query1);
			rs = pstmt1.executeQuery();
			if(rs.next())	seq = rs.getString(1)==null?"":rs.getString(1);
			rs.close();    
			pstmt1.close();
			
			pstmt3 = conn.prepareStatement(query3);
			rs1 = pstmt3.executeQuery();
			if(rs1.next()){
				bank_cd = rs1.getString(1)==null?"":rs1.getString(1);
			}
			rs1.close();   
			pstmt3.close();
			
			pstmt2 = conn.prepareStatement(query2);
			pstmt2.setString(1, bean.getRent_mng_id	());	
			pstmt2.setString(2, bean.getRent_l_cd	());
			pstmt2.setString(3, seq                   );
			pstmt2.setString(4, bean.getCms_st		());
			pstmt2.setInt   (5, bean.getCms_amt		());
			pstmt2.setString(6, bean.getCp_st		());
			pstmt2.setString(7, bean.getCms_start_dt());
			pstmt2.setString(8, bean.getCms_end_dt	());
			pstmt2.setString(9, bean.getCms_day		());
			pstmt2.setString(10, bean.getCms_bank	());
			pstmt2.setString(11, bean.getCms_acc_no	());
			pstmt2.setString(12, bean.getCms_dep_nm	());
			pstmt2.setString(13, bean.getCms_dep_ssn());
			pstmt2.setString(14, bean.getCms_dep_post());
			pstmt2.setString(15, bean.getCms_dep_addr());
			pstmt2.setString(16, bean.getCms_etc	());
			pstmt2.setString(17, bean.getCms_tel	());
			pstmt2.setString(18, bean.getCms_m_tel	());
			pstmt2.setString(19, bean.getCms_email	());
			pstmt2.setString(20, bean.getApp_dt		());
			pstmt2.setString(21, bean.getReg_id		());
			pstmt2.setString(22, bean.getReg_st		());	
			pstmt2.setString(23, bank_cd              );			
			pstmt2.setString(24, bean.getApp_id		());
			pstmt2.setString(25, bean.getC_firm_nm	());
			pstmt2.setString(26, bean.getC_enp_no	());
			pstmt2.setString(27, bean.getC_mm		());
			pstmt2.setString(28, bean.getC_yyyy		());
		    pstmt2.executeUpdate();	
			pstmt2.close();

			conn.commit();


		}catch(Exception e){
			System.out.println("[AddContDatabase:insertContCardCmsMng]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
                if(rs != null )		rs.close();
                if(rs1 != null )	rs1.close();
                if(pstmt1 != null)	pstmt1.close();
                if(pstmt2 != null)	pstmt2.close();
                if(pstmt3 != null)	pstmt3.close();
				conn.setAutoCommit(true);
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약 수정 : 자동이체 update
	public boolean updateContCardCmsMng(ContCmsBean bean)
	{
		getConnection();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt3 = null;
		ResultSet rs = null;
		boolean flag = true;
		String query = "";
		String bank_cd = "";
		
		String query3 = " select code from code "+
							" where c_st = '0003' and nm_cd ='"+bean.getCms_bank()+"'" ;
							
		query = " update card_cms_mng set "+
				" CMS_ST=?, CMS_AMT=?, CP_ST=?, CMS_START_DT=replace(?, '-', ''), CMS_END_DT=replace(?, '-', ''),"+
				" CMS_DAY=?, CMS_BANK=?, CMS_ACC_NO=replace(?, '-', ''), CMS_DEP_NM=?, CMS_DEP_SSN=?,"+
				" CMS_DEP_POST=?,  CMS_DEP_ADDR=?, CMS_ETC=?, CMS_TEL=?, CMS_M_TEL=?,"+
				" CMS_EMAIL=?, UPDATE_DT=to_char(sysdate,'YYYYMMDD'), UPDATE_ID=?, REG_ST=?, APP_DT=replace(?, '-', ''), BANK_CD = ?, APP_ID=?, "+
				" c_firm_nm=?, c_enp_no=?, c_mm=?, c_yyyy=? "+
				" where rent_mng_id=? and rent_l_cd=? and seq=?";
		
		try{

			conn.setAutoCommit(false);
			
			pstmt3 = conn.prepareStatement(query3);
			rs = pstmt3.executeQuery();
			if(rs.next()){
				bank_cd = rs.getString(1)==null?"":rs.getString(1);
			}
			rs.close();
			pstmt3.close();
						
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, bean.getCms_st());
			pstmt.setInt   (2, bean.getCms_amt());
			pstmt.setString(3, bean.getCp_st());
			pstmt.setString(4, bean.getCms_start_dt());
			pstmt.setString(5, bean.getCms_end_dt());
			pstmt.setString(6, bean.getCms_day());
			pstmt.setString(7, bean.getCms_bank());
			pstmt.setString(8, bean.getCms_acc_no());
			pstmt.setString(9, bean.getCms_dep_nm());
			pstmt.setString(10, bean.getCms_dep_ssn());
			pstmt.setString(11, bean.getCms_dep_post());
			pstmt.setString(12, bean.getCms_dep_addr());
			pstmt.setString(13, bean.getCms_etc());
			pstmt.setString(14, bean.getCms_tel());
			pstmt.setString(15, bean.getCms_m_tel());
			pstmt.setString(16, bean.getCms_email());
			pstmt.setString(17, bean.getUpdate_id());
			pstmt.setString(18, bean.getReg_st());			
			pstmt.setString(19, bean.getApp_dt());
			pstmt.setString(20, bank_cd);			
			pstmt.setString(21, bean.getApp_id());			
			pstmt.setString(22, bean.getC_firm_nm());			
			pstmt.setString(23, bean.getC_enp_no());			
			pstmt.setString(24, bean.getC_mm());			
			pstmt.setString(25, bean.getC_yyyy());			
			pstmt.setString(26, bean.getRent_mng_id());	
			pstmt.setString(27, bean.getRent_l_cd());
			pstmt.setString(28, bean.getSeq());				
		    pstmt.executeUpdate();	
			pstmt.close();

			conn.commit();

		}catch(Exception e){
			System.out.println("[AddContDatabase:updateContCardCmsMng]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
				if(rs != null )		rs.close();
				if(pstmt3 != null)	pstmt3.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//자동이체 조회
	public Vector getSearchCardCmsList(String client_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " SELECT a.rent_l_cd, a.rent_dt, b.cms_start_dt, b.cms_end_dt, b.cms_acc_no, b.cms_bank, b.cms_dep_nm, b.cms_day, \n"+
				"        b.cms_dep_ssn, b.cms_dep_post, b.cms_dep_addr, b.cms_tel, b.cms_m_tel, b.cms_email,  \n"+
				"        DECODE(LENGTH(REPLACE(REPLACE(b.cms_dep_ssn,'-',''),' ','')),13,SUBSTR(REPLACE(REPLACE(b.cms_dep_ssn,'-',''),' ',''),1,6),REPLACE(REPLACE(b.cms_dep_ssn,'-',''),' ','')) cms_dep_ssn2, "+
				"        b.c_mm, b.c_yyyy "+
				" FROM   CONT a, CARD_CMS_MNG b  \n"+
				" WHERE  a.client_id='"+client_id+"'  \n"+
				"        AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd \n"+
				" ORDER BY b.cms_start_dt ";

		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSearchCardCmsList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}


  	//card CMS 고객 리스트 조회 (gubun - 1:상호, 2:계약번호)
	public Vector getCardCmsContRmList(String s_kd, String t_wd, String st_dt, String end_dt, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select  "+
				" a.rent_mng_id, a.rent_l_cd, a.client_id, a.car_mng_id, a.car_st, "+
				" a.rent_dt, c.firm_nm, d.car_no, b.rent_start_dt,"+
				" decode(nvl(e.cnt,0),0,'-','생성') scd_yn,"+
				" decode(f.reg_st,'1',decode(f.app_dt,'','-','신청'),'2','해지','-') reg_st,"+
				" decode(a.use_yn,'Y','진행','N','해지','미결') use_st,"+
				" f.cms_day, f.cms_bank, f.cms_acc_no, f.cms_dep_nm,"+		
				" decode(g.cms_status, '0', '신규', '1','신규신청중','Y','완료','11','해지','-') cbit, \n"+
				" h.user_nm, h2.user_nm as reg_nm, h3.user_nm as app_nm, f.app_dt, b.rent_st, i.rent_suc_dt, f.cms_start_dt , f.c_yyyy, f.c_mm  "+
				" from   cont a, fee b, client c, car_reg d,"+
				"        (select rent_mng_id, rent_l_cd, count(*) cnt from scd_fee group by rent_mng_id, rent_l_cd) e,"+
				"        card_cms_mng f, cms.CARD_CMS_MEM  g, users h, users h2, users h3, cont_etc i "+
				" where a.car_st = '4' "+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1'"+
				" and a.client_id=c.client_id"+
				" and a.car_mng_id=d.car_mng_id(+)"+
				" and a.rent_mng_id=e.rent_mng_id(+) and a.rent_l_cd=e.rent_l_cd(+)"+
				" and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd  "+
				" and a.rent_l_cd=g.cms_primary_seq(+)"+
				" and decode(b.rent_st,'1',a.bus_id,b.ext_agnt)=h.user_id "+
				" and f.reg_id=h2.user_id(+) "+
    			" and f.app_id=h3.user_id(+) "+
				" and a.rent_mng_id=i.rent_mng_id(+) and a.rent_l_cd=i.rent_l_cd(+)"+				 		
				" " ;


		String what = "";
		String dt1 = "";
		String dt2 = "";


		dt1 = "substr(f.app_dt,1,6)";
		dt2 = "f.app_dt";

		if(gubun3.equals("2"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";
		else if(gubun3.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";
		else if(gubun3.equals("4"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";//전일
		else if(gubun3.equals("3")){
			if(!st_dt.equals("") && end_dt.equals(""))	query += " and "+dt2+" like replace('"+st_dt+"%', '-','')";
			if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between replace('"+st_dt+"', '-','') and replace('"+end_dt+"', '-','')";
		}

		if(!gubun4.equals("")){	
			if(gubun4.equals("9"))		query += " and g.cms_status is null and nvl(a.use_yn,'Y')='Y' and e.rent_l_cd||b.rent_start_dt is not null ";//
			else 						query += " and g.cms_status='"+gubun4+"'";
		}

		if(gubun1.equals("2"))			query += " and f.app_dt is not null and f.reg_st='2'";
		else{
			if(gubun1.equals("Y"))			query += " and f.app_dt is not null";
			else if(gubun1.equals("N"))		query += " and f.app_dt is null and nvl(a.use_yn,'Y')='Y' and e.rent_l_cd||b.rent_start_dt is not null ";// 
		}

		if(s_kd.equals("1"))	what = "upper(nvl(c.firm_nm, ' '))";
		if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
		if(s_kd.equals("3"))	what = "upper(nvl(d.car_no, ' '))";		
		if(s_kd.equals("4"))	what = "upper(nvl(h.user_nm, ' '))";	
		if(s_kd.equals("5"))	what = "upper(nvl(b.rent_start_dt, ' '))";	
		if(s_kd.equals("6"))	what = "upper(nvl(f.app_dt, ' '))";	
		if(s_kd.equals("7"))	what = "upper(nvl(f.cms_start_dt, ' '))";	
		if(s_kd.equals("8"))	what = "upper(nvl(h2.user_nm, ' '))";	
		if(s_kd.equals("9"))	what = "upper(nvl(f.cms_acc_no, ' '))";	
		if(s_kd.equals("10"))	what = "upper(nvl(h3.user_nm, ' '))";	


		if(!s_kd.equals("") && !t_wd.equals("")){
			query += " and "+what+" like upper(replace('%"+t_wd+"%','-','')) ";
		}	
		
		if(s_kd.equals("6")) 		query += " order by h2.user_nm, decode(a.use_yn,'Y','2','N','3','1'), decode(g.cms_status,'',0,1), nvl(f.cms_acc_no, 'N' ) , f.cms_start_dt, b.rent_start_dt, a.rent_dt, a.rent_mng_id";
		else						query += " order by decode(a.use_yn,'Y','2','N','3','1'), decode(g.cms_status,'',0,1),nvl(f.cms_acc_no, 'N' ) ,   f.cms_start_dt,  b.rent_start_dt, a.rent_dt, a.rent_mng_id";

		try {
								
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCardCmsContRmList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}


	//세금계산서 및 출고일자 일괄등록 팝업 - 리스트 호출
	public Vector getRegAllTaxInvoiceList(String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " SELECT " +
				" p.RENT_MNG_ID, " +
				" p.RENT_L_CD, " +
				" p.RPT_NO, " +
				" TO_CHAR(((e.car_fs_amt + e.sd_cs_amt - e.dc_cs_amt) + (e.car_fv_amt + e.sd_cv_amt - e.dc_cv_amt)) , '999,999,999,999,999,999') AS tot_f_amt, " +
				" SUBSTR(p.dlv_est_dt, 1, 8) AS dlv_est_dt, " +
				" c.dlv_dt, e.car_amt_dt, e.car_tax_dt " +				
				" FROM cont c, car_pur p, CAR_ETC e " +
				" WHERE " +
				" p.rent_l_cd = ?" +	
				" AND p.RENT_L_CD = c.RENT_L_CD " +
				" AND e.RENT_L_CD = c.RENT_L_CD " +
				"  ";
		
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_l_cd);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRegAllTaxInvoiceList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}
	
	//세금계산서 및 출고일자 일괄등록 팝업 - 세금계산서 스캔파일 정보 호출
	public Vector getRegAllTaxInvoiceScan(String contentSeq)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " SELECT " +
				" seq, " +
				" content_code, " +
				" content_seq, " +
				" file_name, " +
				" file_size, " +
				" file_type, " +
				" save_file, " +
				" save_folder, " +
				" reg_userseq, " +
				" reg_date, " +
				" isdeleted, " +
				" to_char(reg_date,'YYYYMMDD') reg_dt " +
				" FROM ACAR_ATTACH_FILE " +
				" WHERE " +
				" ISDELETED = 'N' " +	
				" and content_code = 'LC_SCAN' " +
				" AND SUBSTR(content_seq,-2) = '10' " +
				" and content_seq like ? " +
				"  ";
		
		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, contentSeq);			
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getRegAllTaxInvoiceScan]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}
	
	//세금계산서 및 출고일자 일괄등록 팝업 - 출고일자 일괄 수정
	public boolean updateAllDlvDt(String dlv_dt, String rent_mng_id, String rent_l_cd)
	{
		
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " UPDATE CONT SET "+
						" DLV_DT = replace(?,'-',''), "+
						" UPDATE_DT	= to_char(sysdate,'YYYYMMDD')"+
						" WHERE RENT_MNG_ID = ? AND RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);
				
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  dlv_dt		);
			pstmt.setString(2,  rent_mng_id	);
			pstmt.setString(3,  rent_l_cd	);
						
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateAllDlvDt]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	//계약관련 정보가져오기 (car_no, firm_nm)
	public Hashtable getContInfo(String car_no, String firm_nm)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";	
		
		query = "  SELECT a.RENT_L_CD, a.RENT_MNG_ID, a.CAR_MNG_ID  "+
				"  FROM cont a, CAR_PUR b, client c  "+
				"  WHERE a.RENT_L_CD = b.RENT_L_CD  "+
				"  AND a.CLIENT_ID = c.CLIENT_ID  "+
				"  AND b.EST_CAR_NO ='"+car_no+"'  "+
				"  AND c.FIRM_NM ='"+firm_nm+"'  "+
				"  "; 
						
		try {
			pstmt = conn.prepareStatement(query);
			rs = pstmt.executeQuery();
			ResultSetMetaData rsmd = rs.getMetaData();
			
			if(rs.next())
			{				
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					String columnName = rsmd.getColumnName(pos);
					ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
			}
			rs.close();
			pstmt.close();
			
		} catch (SQLException e) {
			
			System.out.println("[AddContDatabase:getContInfo(String car_no, String firm_nm)]"+ e);
			e.printStackTrace();
		} finally {
			try{
				if(rs != null )		rs.close();
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
	}	
	
		//세금계산서 및 출고일자 일괄등록 팝업 - 계출번호, 출고 예정 일자 모두 일괄 수정
	public boolean updateAllParams(String dlv_dt, String rpt_no, String rent_mng_id, String rent_l_cd)
	{
		
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " UPDATE CAR_PUR SET "+
				" RPT_NO = ?, "+
				" DLV_EST_DT = replace(?,'-','') "+
				" WHERE RENT_MNG_ID = ? AND RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);
				
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  rpt_no		);
			pstmt.setString(2,  dlv_dt		);
			pstmt.setString(3,  rent_mng_id	);
			pstmt.setString(4,  rent_l_cd	);
						
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateAllParams]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//차량번호 자동등록 위한 파라미터 조회
	public Vector getParamForRegCarNo(String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";
		query = " select  a.rent_mng_id, a.rent_l_cd, nvl(c.car_no,d.est_car_no) car_no, h.car_nm, "+
				" decode(d.udt_st,'1','본사','2','부산지점','3','대전지점','4','고객','5','대구지점','6','광주지점','') udt_st,"+
				" n.nm udt_st_ext "+
				" from cont a, fee b, car_reg c, car_pur d, car_etc f, car_nm g, car_mng h, users i, users j, users k, branch q, tint r, cont_etc s, "+
				"      (select a.*, c.car_off_nm, c.car_off_tel from commi a, car_off_emp b, car_off c where a.agnt_st='2' and a.emp_id=b.emp_id and b.car_off_id=c.car_off_id) l,"+
				"      (select rent_mng_id, rent_l_cd, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0)) pp_amt, sum(ext_pay_amt) pay_amt, sum(decode(ext_tm,'1',ext_s_amt+ext_v_amt,0))-sum(ext_pay_amt) jan_amt from scd_ext where rent_st='1' and ext_st in ('0','1','2') group by rent_mng_id, rent_l_cd) m,"+
				"      (select car_mng_id from insur where to_char(sysdate,'YYYYMMDD') between ins_start_dt and ins_exp_dt group by car_mng_id) o,"+
				"      (select rent_mng_id, rent_l_cd, min(off_nm) off_nm from consignment where cons_cau='1' group by rent_mng_id, rent_l_cd) p,"+
				"      (select * from cls_cont where cls_st in ('4','5') and rent_l_cd not in ('D114HHGR00233')) t, "+
				"      (select * from doc_settle where doc_st='5' and doc_step='3') q, "+				
                "      (select code, nm from code where c_st='0001' and code<>'0000') v, car_off_emp z, "+
                "      (select * from code where c_st='0032') n  "+
				" where"+
				" nvl(a.use_yn,'Y')='Y' and decode(a.rent_l_cd,'S114KK5S00001','1',a.car_st)<>'2' and a.car_gu='1' and d.dlv_est_dt is not null"+
				" and a.rent_mng_id=b.rent_mng_id and a.rent_l_cd=b.rent_l_cd and b.rent_st='1' "+
				" and a.car_mng_id=c.car_mng_id(+)"+
				" and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
				" and a.rent_mng_id=f.rent_mng_id and a.rent_l_cd=f.rent_l_cd"+
				" and f.car_id=g.car_id and f.car_seq=g.car_seq and g.car_comp_id=h.car_comp_id and g.car_cd=h.code"+
				" and a.bus_id=i.user_id(+) and i.br_id=q.br_id(+)"+
				" and a.bus_id2=j.user_id(+)"+
				" and a.mng_id=k.user_id(+)"+
				" and a.rent_mng_id=l.rent_mng_id(+) and a.rent_l_cd=l.rent_l_cd(+)"+
				" and a.rent_mng_id=m.rent_mng_id(+) and a.rent_l_cd=m.rent_l_cd(+)"+
				" and a.car_mng_id=o.car_mng_id(+)"+
				" and a.rent_mng_id=p.rent_mng_id(+) and a.rent_l_cd=p.rent_l_cd(+)"+
				" and a.rent_mng_id=r.rent_mng_id(+) and a.rent_l_cd=r.rent_l_cd(+) and nvl(r.tint_cau,'1')='1'"+
				" and a.rent_mng_id=s.rent_mng_id(+) and a.rent_l_cd=s.rent_l_cd(+)"+
				" and d.req_code=q.doc_id(+)"+
				" and a.rent_mng_id=t.rent_mng_id(+) and a.reg_dt=t.reg_dt(+) and t.rent_l_cd is null "+
				" and nvl(nvl(s.car_deli_dt,b.rent_start_dt),'99999999') >= to_char(sysdate,'YYYYMMDD')"+
				" and g.car_comp_id =v.code "+
				" and a.agent_emp_id =z.emp_id(+) "+
				" and d.udt_st =n.nm_cd "+
				" and a.rent_l_cd = '"+rent_l_cd+"'"+
				" ";
		try {				
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getParamForRegCarNo(String rent_l_cd)]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}		
	}
	
	// 영업관리 > 계출관리 > 납품준비상황 페이지에서 최초영업 자 클릭 후 문자 메시지 보낼 경우 주차장에 차량이 도착한 시간을 저장한다. 2017. 11. 30
	// 쿼리에서 rent_l_cd 부분이 rent_mng_id로 변경되어 있어 다시 rent_l_cd 로 변경 2017.1.5 
	public boolean updateArrivalDate(String rent_l_cd, int gubun)	 {
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = "";
		String query1 =  " UPDATE CONT_ETC SET "+
				" ARRIVAL_DT = TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI') "+
				" WHERE RENT_L_CD = ? ";
		String query2 =  " UPDATE CONT_ETC SET "+
				" ARRIVAL_DT = NULL "+
				" WHERE RENT_L_CD = ? ";
		if(gubun==1){
			query = query1;
		}else{
			query = query2;
		}
		try 
		{
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1, rent_l_cd);
						
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateArrivalDate]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	// 계약번호 rent_l_cd로 조회하여 차대번호와 차량번호가 있는지 체크
	public Vector getCheckCarNo(String rent_l_cd) {
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " select car_no, car_num from car_reg where car_mng_id = (select car_mng_id from insur where car_mng_id = "+
				" (select car_mng_id from cont where rent_l_cd =?) AND ROWNUM = 1)";

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_l_cd);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCheckCarNo]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
	}
	
	//사고,정비,과태료 등 여부
	public int getContCarAccidServFineCnt(String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;		
		String query = "";
		int count = 0;

		query = " SELECT (a.cnt+b.cnt+c.cnt) cnt "+
                " FROM  "+
                " (SELECT COUNT(0) AS cnt FROM accident where rent_l_cd='"+rent_l_cd+"') a, "+
                " (SELECT COUNT(0) AS cnt FROM service  where rent_l_cd='"+rent_l_cd+"') b, "+
                " (SELECT COUNT(0) AS cnt FROM fine     where rent_l_cd='"+rent_l_cd+"') c  "+
	            " ";

		try {
								
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
			if(rs.next())
			{								
				count = rs.getInt("cnt");
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContCarAccidServFineCnt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return count;
		}		
	}

	/**
	 * 송금요청
	 */
	public boolean updateCarPurPayReq(ContPurBean pur, String msg_st){
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;

		String query = " update car_pur set "+msg_st+"=sysdate where rent_mng_id=? and rent_l_cd=?";

		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, pur.getRent_mng_id());
			pstmt.setString(2, pur.getRent_l_cd());
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateCarPurPayReq]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}

	//계약관리
	public Vector getLcMngList(String s_kd, String t_wd, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select   \n"+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, nvl(d.rent_dt,a.rent_dt) as rent_dt, nvl(c.rent_suc_dt,y.cls_dt) as rent_suc_dt, a.use_yn, \n"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm, \n"+
					"        j.car_nm, f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, \n"+
					"        nvl(ec.nm, ec2.nm) car_ext, \n"+
					"        decode(m.rent_st,'1','','연장') ext_st, \n"+
					"        decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')) ext_st2, \n"+
					"        decode(y.cls_st,'4','차종변경','5','계약승계') cng_st, \n"+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st,  \n"+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체', '7', '에이젼트','8','모바일') bus_st, \n"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차','3','월렌트') car_gu, \n"+
					"        decode(a.car_st,'1','렌트','2',decode(a.car_gu,'2','중고차','예비'),'3','리스','4','월렌트','5','업무대여') car_st,  \n"+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way, \n"+
				 	"        decode(o.cls_st,'1','계약만료','2','중도해지','3','영업소변경','4','차종변경','5','계약승계','6','매각','7','출고전해지','8','매입옵션','9','폐차','10','개시전해지', '15', '말소') cls_st, \n"+
					"        a.dlv_dt, d.con_mon as ext_mon, m.con_mon, m.rent_start_dt, m.rent_end_dt,  \n"+
			        "        nvl(decode(d.rent_st, '1', a.bus_id, d.ext_agnt),a.bus_id) bus_id, "+
					"        k.user_nm as bus_nm, k.user_m_tel as bus_m_tel,  \n"+
					"        a.bus_id2, \n"+
					"        n.user_nm bus_nm2, n.user_m_tel as bus2_m_tel,  \n"+
					"        a.mng_id, u.user_nm as mng_nm, u.user_m_tel as mng_m_tel,  \n"+
				    "        z.ins_com_id,\n"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        m.rent_st as fee_rent_st \n"+
					" from \n"+
					"		 cont a, client b, cont_etc c, fee d, client_site e, car_reg f, \n"+
					"		 car_etc h, car_nm i, car_mng j, users k, "+
					"	     users n, "+
					"	     users u, \n"+
					"		 ( select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st, sum(con_mon) con_mon, min(nvl(rent_start_dt,'')) rent_start_dt, max(nvl(rent_end_dt,'')) rent_end_dt \n"+
					"		   from   fee  \n"+
					"          group by rent_mng_id, rent_l_cd \n"+
					"        ) m, \n"+
					"        cls_cont o, \n"+
				    "        ( select rent_mng_id, reg_dt, cls_dt, cls_st from cls_cont where cls_st in ('4','5')) y, \n"+ 
                    "        ( select a.car_mng_id, a.ins_com_id    \n"+ 
                    "          from   insur a, ins_cls b   \n"+ 
                    "          where  a.car_mng_id = b.car_mng_id(+) and a.ins_st = b.ins_st(+)   \n"+ 
                    "                 AND a.ins_start_dt <= TO_CHAR(sysdate-1,'YYYYMMDD')  \n"+ 
                    "                 AND ( (b.car_mng_id IS NULL and a.ins_exp_dt > TO_CHAR(sysdate,'YYYYMMDD'))  OR   (b.car_mng_id IS NOT NULL AND b.exp_dt >  TO_CHAR(sysdate,'YYYYMMDD')) )  \n"+ 
			        "        ) z, \n"+ 
					"        fee_etc mm,  \n"+
					"        (select a.car_mng_id from cont a, commi c \n"+
					"    where  a.rent_mng_id = c.rent_mng_id and a.rent_l_cd = c.rent_l_cd and a.car_gu='2' and c.agnt_st = '6'   AND a.car_mng_id IS NOT NULL group by a.car_mng_id) ac, \n"+ 
					"    (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 \n"+ 
					" where  \n"+
					"        a.client_id=b.client_id \n"+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd \n"+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd \n"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+) \n"+
					"        and a.car_mng_id=f.car_mng_id(+) \n"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd \n"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code \n"+
				    "        AND ((d.RENT_ST='1' AND a.BUS_ID = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is not null AND d.ext_agnt = k.user_id)  OR (d.RENT_ST<>'1' and d.ext_agnt is null AND a.bus_id = k.user_id )) \n"+
					"        and a.bus_id2=n.user_id \n"+
					"        and d.rent_mng_id=m.rent_mng_id and d.rent_l_cd=m.rent_l_cd and d.rent_st=m.rent_st \n"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.rent_l_cd=o.rent_l_cd(+) \n"+
					"        and a.mng_id=u.user_id \n"+
					"        and a.rent_mng_id=y.rent_mng_id(+) and a.reg_dt=y.reg_dt(+) \n"+
					"        and a.car_mng_id=z.car_mng_id(+) \n"+
					"        and d.rent_mng_id=mm.rent_mng_id and d.rent_l_cd=mm.rent_l_cd and d.rent_st=mm.rent_st \n"+
					"        and a.car_mng_id=ac.car_mng_id(+) and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+) \n"+
					" ";

	
			if(gubun1.equals("Y")) query += " and a.use_yn='Y'";
			if(gubun1.equals("N")) query += " and a.use_yn='N'";
			if(gubun1.equals("0")) query += " and a.use_yn is null";
			if(gubun1.equals("R")) query += " and a.use_yn='Y' and a.car_st='2' ";
			if(gubun1.equals("E")) query += " and a.use_yn='Y' and d.fee_chk='1' ";
			if(gubun1.equals("F")) query += " and nvl(a.use_yn,'Y')='Y' and h.car_origin='2' ";//수입차
			if(gubun1.equals("C")) query += " and ac.car_mng_id is not null ";//자산양수차

			if(gubun3.equals("1"))  query += " and a.car_st<>'2' and d.rent_way='1'";
			if(gubun3.equals("2"))  query += " and a.car_st<>'2' and d.rent_way in ('2','3')";
			if(gubun3.equals("3"))  query += " and a.car_st<>'2' and a.car_gu='1'";
			if(gubun3.equals("4"))  query += " and a.car_st<>'2' and a.car_gu='0'";
			if(gubun3.equals("5"))  query += " and a.car_gu='2'";
			if(gubun3.equals("6"))  query += " and a.car_st<>'2' and d.rent_st<>'1'";
			if(gubun3.equals("7"))  query += " and a.car_st<>'2' and y.cls_st='5'";
			if(gubun3.equals("8"))  query += " and a.car_st<>'2' and y.cls_st='4'";
			if(gubun3.equals("10")) query += " and a.car_st='1'";
			if(gubun3.equals("11")) query += " and a.car_st='3'";
			if(gubun3.equals("9"))  query += " and a.car_st<>'2' and a.bus_st='7'";
			if(gubun3.equals("20")) query += " and a.rent_st in ('3','4') and d.rent_way='3' and d.rent_st='1' and k.loan_st='2' and n.loan_st='2'";
			if(gubun3.equals("12")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='1'";
			if(gubun3.equals("13")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='4'";
			if(gubun3.equals("14")) query += " and a.car_st<>'2' and d.rent_st='1' and a.rent_st='3'";
			if(gubun3.equals("15")) query += " and a.car_st='5'";


			if(!gubun2.equals("")) query += " and (c.mng_br_id='"+gubun2+"' OR (c.mng_br_id is null and a.brch_id='"+gubun2+"' ))";

			String what = "";

			String dt1 = "";
			String dt2 = "";

			//계약(연장)일자
			if(gubun4.equals("1")){

				//당월
				if(gubun5.equals("4"))			query += " and ( (d.rent_st='1' and a.rent_dt like to_char(sysdate,'YYYYMM')||'%') or (d.rent_st<>'1' and a.rent_dt like to_char(sysdate,'YYYYMM')||'%') ) ";
				//전월
				else if(gubun5.equals("5"))		query += " and ( (d.rent_st='1' and a.rent_dt like to_char(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%') or (d.rent_st<>'1' and a.rent_dt like to_char(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%') ) ";
				//당일
                else if(gubun5.equals("1"))		query += " and ( (d.rent_st='1' and a.rent_dt=to_char(sysdate,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt=to_char(sysdate,'YYYYMMDD')) ) ";
				//전일				
                else if(gubun5.equals("2"))		query += " and ( (d.rent_st='1' and a.rent_dt=to_char(sysdate-1,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt=to_char(sysdate-1,'YYYYMMDD')) ) ";
				//2일
				else if(gubun5.equals("3"))		query += " and ( (d.rent_st='1' and a.rent_dt between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')) or (d.rent_st<>'1' and d.rent_dt between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD')) ) ";
                //기간 
				else if(gubun5.equals("6")){
					if(!st_dt.equals("") && !end_dt.equals("")) query += " and ( (d.rent_st='1' and a.rent_dt between '"+st_dt+"' and '"+end_dt+"') or (d.rent_st<>'1' and d.rent_dt between '"+st_dt+"' and '"+end_dt+"') ) ";
				}

			//승계일자
			}else if(gubun4.equals("2")){

				dt1 = "substr(c.rent_suc_dt,1,6)";
				dt2 = "c.rent_suc_dt";

				if(gubun5.equals("4"))			query += " and "+dt2+" like to_char(sysdate,'YYYYMM')||'%'";				//당월
				else if(gubun5.equals("5"))		query += " and "+dt2+" like TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM')||'%'";	//전월
				else if(gubun5.equals("1"))		query += " and "+dt2+" = to_char(sysdate,'YYYYMMDD')";				//당일
				else if(gubun5.equals("2"))		query += " and "+dt2+" = to_char(sysdate-1,'YYYYMMDD')";			//전일
				else if(gubun5.equals("3"))		query += " and "+dt2+" between to_char(sysdate-1,'YYYYMMDD') and to_char(sysdate,'YYYYMMDD') ";//2일
				else if(gubun5.equals("6")){
					if(!st_dt.equals("") && !end_dt.equals("")) query += " and "+dt2+" between '"+st_dt+"' and '"+end_dt+"'";
				}

			}
			
			if(s_kd.equals("1"))	what = "upper(b.firm_nm||e.r_site)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no||' '||f.first_car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";	
			if(s_kd.equals("8"))	what = "k.user_nm";	
			if(s_kd.equals("10"))	what = "n.user_nm";	
			if(s_kd.equals("11"))	what = "u.user_nm";	
			if(s_kd.equals("13"))	what = "upper(nvl(b.client_nm||e.site_jang, ' '))";
			if(s_kd.equals("16"))	what = "upper(j.car_nm)";
			if(s_kd.equals("19"))	what = "b.enp_no||TEXT_DECRYPT(b.ssn, 'pw' )||TEXT_DECRYPT(e.enp_no, 'pw' ) ";
			if(s_kd.equals("20"))	what = "i.jg_code";
			if(s_kd.equals("22"))	what = "c.grt_suc_l_cd";
			
			if(!what.equals("") && !t_wd.equals("")){
				if(!s_kd.equals("1") && !s_kd.equals("2") && !s_kd.equals("3") && !gubun1.equals("R") && !gubun1.equals("C"))		query += " and a.car_st<>'2'";				//차량번호 검색이 아닌경우 보유차는 뺄것
				if(t_wd.indexOf("'") != -1)					t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14")||s_kd.equals("17")||s_kd.equals("18"))	t_wd = AddUtil.replace(t_wd,"-","");

				if(s_kd.equals("1")||s_kd.equals("2")||s_kd.equals("13")||s_kd.equals("16")){	
					query += " and "+what+" like upper('%"+t_wd+"%') \n";
				}else{
					query += " and "+what+" like '%"+t_wd+"%' \n";
				}

				if(s_kd.equals("14") && !gubun1.equals("R") && !gubun1.equals("C") && !gubun3.equals("5")) query += " and b.client_id<>'000228'\n";	

				if(s_kd.equals("14")||s_kd.equals("23")) query += " and a.car_st in ('1','3') \n";	 //계약일자 검색시 보유차,월렌트는 보여주지 않는다.

				if(s_kd.equals("17"))		query += " order by a.use_yn desc, f.init_reg_dt desc, f.car_doc_no desc  \n";
				else  						query += " order by a.use_yn desc, a.rent_dt desc, a.rent_mng_id desc, a.reg_dt desc, a.update_dt desc \n";
			}else{
				//차량회수 / GPS장착 / 보유차 / 미스캔 / 중고차
				if(gubun1.equals("I") || gubun1.equals("G") || gubun1.equals("R") || gubun1.equals("C") || gubun1.equals("J") || gubun1.equals("E") || gubun3.equals("5")){
				}else{
					if(s_kd.equals("10")){ //영업담당자
						query += " and a.bus_id2 is null order by a.rent_dt, a.rent_start_dt \n";
					}else{
						//계약관리 디폴트
						/*승계미포함*/query += " and (a.use_yn is null or a.use_yn='Y') and b.client_id<>'000228' and a.car_st in ('1','3','5') \n"; //계약관리 디폴트에서 보유차와 월렌트는 제외

						//미결,신차,재리스,연장,승계순
						query += " order by decode(y.cls_st,'5',decode(sign(to_date(d.rent_start_dt)-to_date(y.cls_dt,'YYYYMMDD')),1,0,0,0,1),0), "+
							     "          decode(y.cls_st||decode(m.rent_st,'1','',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(y.cls_dt,'YYYYMMDD')),1,'연장',0,'연장','')),'5', nvl(c.rent_suc_dt,y.cls_dt), nvl(d.rent_dt,a.rent_dt)) desc, "+
								 "          a.use_yn desc, decode(d.rent_st,'1',1,2), decode(nvl(a.car_gu,a.reg_id),'0','1','2','2','1','3') desc, a.rent_st desc \n";
					}
				}
			}


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	


		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getLcMngList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }
	
	//계약관리-미점검현황
	public Vector getLcNoChkList(String s_kd, String t_wd, String gubun1, String gubun2, String gubun3, String gubun4, String gubun5, String st_dt, String end_dt)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " SELECT o.rent_mng_id, o.rent_l_cd, o.rent_st, TO_CHAR(o.reg_dt,'YYYYMMDD') reg_dt, " + 
					"       DECODE(b.suc_rent_st,o.rent_st,'승계계약',DECODE(o.rent_st,'1','신규계약','연장계약')) gubun, " + 
					"       a.use_yn, a.car_gu, a.car_st, " + 
					"       b.firm_nm, f.car_mng_id, f.car_no, f.car_nm, ec.nm AS car_ext, f.car_doc_no, " + 
					"       DECODE(b.suc_rent_st,o.rent_st,k.br_id,DECODE(o.rent_st,'1',k.br_id,k2.br_id)) br_id, " + 
					"       DECODE(b.suc_rent_st,o.rent_st,k.user_nm,DECODE(o.rent_st,'1',k.user_nm,k2.user_nm)) bus_nm " + 
					"FROM   fee_etc o, fee d, cont a, client b, cont_etc b, car_reg f, (SELECT code, nm_cd, nm FROM code WHERE c_st='0032') ec, users k, users k2 " + 
					"WHERE  (to_char(o.reg_dt,'YYYYMMDD')>'20181231' or d.rent_start_dt > '20181231') " + 
					"       AND o.chk_id IS NULL " + 
					"       AND o.rent_mng_id=d.rent_mng_id AND o.rent_l_cd=d.rent_l_cd AND o.rent_st=d.rent_st " + 
					"       AND d.rent_mng_id=a.rent_mng_id AND d.rent_l_cd=a.rent_l_cd AND a.use_yn='Y' AND a.car_st<>'2' AND a.car_st<>'4' " + 
					"       AND a.client_id=b.client_id " + 
					"       AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd " + 
					"       AND a.car_mng_id=f.car_mng_id " + 
					"       AND f.car_ext=ec.nm_cd " + 
					"       AND a.bus_id=k.user_id " + 
					"       AND d.ext_agnt=k2.user_id(+) "+
					" ";
	
			//계약상태
			if(gubun1.equals("1")) query += " and o.rent_st='1' and b.rent_suc_dt is null ";//신규 o.rent_st<>nvl(b.suc_rent_st,'0')
			if(gubun1.equals("2")) query += " and o.rent_st>'1' and (b.rent_suc_dt is null or o.rent_st>b.suc_rent_st) ";//연장
			if(gubun1.equals("3")) query += " and b.suc_rent_st=o.rent_st "; //계약승계

			String dt = "TO_CHAR(o.reg_dt,'YYYYMMDD')";
						
			if(gubun5.equals("6")){
				if(!st_dt.equals("") && !end_dt.equals("")) {
					query += " and "+dt+" between replace('"+st_dt+"','-','') and replace('"+end_dt+"','-','') ";
				}
			}

			String what = "";

			if(s_kd.equals("1"))	what = "b.firm_nm";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			if(s_kd.equals("4"))	what = "a.brch_id";		
			if(s_kd.equals("5"))	what = "k.user_nm";		
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");				
               	query += " and "+what+" like '%"+t_wd+"%' ";
			}   
			
			query += " order by o.reg_dt ";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getLcNoChkList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	//계약관리-계약변경미확인현황
	public Vector getLcNoCngChkList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " SELECT o.rent_mng_id, o.rent_l_cd, o.rent_st, TO_CHAR(o.reg_dt,'YYYYMMDD') reg_dt, " + 
				"       DECODE(b.suc_rent_st,o.rent_st,'승계계약',DECODE(o.rent_st,'1','신규계약','연장계약')) gubun, " + 
				"       DECODE(b.suc_rent_st,o.rent_st,'승계',DECODE(o.rent_st,'1','신규','연장')) cng_st, " +				
				"       a.use_yn, a.car_gu, a.car_st, a.sanction, to_char(a.sanction_date,'YYYYMMDD') sanction_date, d.con_mon, d.rent_start_dt, d.rent_end_dt, " + 
				"       b.firm_nm, f.car_mng_id, f.car_no, f.car_nm, f.car_doc_no, " + 
				"       DECODE(b.suc_rent_st,o.rent_st,k.br_id,DECODE(o.rent_st,'1',k.br_id,k2.br_id)) br_id, " + 
				"       DECODE(b.suc_rent_st,o.rent_st,k.user_nm,DECODE(o.rent_st,'1',k.user_nm,k2.user_nm)) bus_nm " + 
				"FROM   fee_etc o, fee d, cont a, client b, cont_etc b, car_reg f, users k, users k2 " + 
				"WHERE  to_char(o.reg_dt,'YYYYMMDD')>'20181231' " + 
				"       AND o.cng_chk_dt IS NULL " + 
				"       AND o.rent_mng_id=d.rent_mng_id AND o.rent_l_cd=d.rent_l_cd AND o.rent_st=d.rent_st " + 
				"       AND d.rent_mng_id=a.rent_mng_id AND d.rent_l_cd=a.rent_l_cd AND (a.use_yn='Y' or a.use_yn is null) AND a.car_st<>'2' AND a.car_st<>'4' " + 
				"       AND a.client_id=b.client_id " + 
				"       AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd " + 
				"       AND a.car_mng_id=f.car_mng_id " + 
				"       AND a.bus_id=k.user_id " + 
				"       AND d.ext_agnt=k2.user_id(+) "+
				"       and (b.suc_rent_st=o.rent_st or (o.rent_st>'1' and (b.rent_suc_dt is null or o.rent_st>b.suc_rent_st or d.rent_start_dt > b.rent_suc_dt))) "+
				" ";

		//계약상태
		if(gubun1.equals("2")) query += " and o.rent_st>'1' and (b.rent_suc_dt is null or o.rent_st>b.suc_rent_st or d.rent_start_dt > b.rent_suc_dt) ";//연장
		if(gubun1.equals("3")) query += " and b.suc_rent_st=o.rent_st "; //계약승계
		

			String what = "";

			if(s_kd.equals("1"))	what = "b.firm_nm";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				
				query += " and "+what+" like '%"+t_wd+"%' ";
			}
			
			query += " order by a.use_yn desc, a.sanction_date desc ";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
			
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getLcNoCngChkList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }
	
    /**
     * 에이전트 계약출고현황
     * 1: 상호, 2: 차종, 3:출고일, 4:영업담당자, 5:출고지점
     */
    public Vector getAgentDlvStats(String s_kd, String t_wd, String dt, String t_st_dt, String t_end_dt, String user_id)
    {
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = " select  b.nm AS nm1, c.nm AS nm2, A.rent_l_cd, decode(A.rent_dt, '', '', substr(A.rent_dt, 1, 4)||'-'||substr(A.rent_dt, 5, 2)||'-'||substr(A.rent_dt, 7, 2)) rent_dt, nvl(A.firm_nm, A.client_nm) firm_nm, A.car_no car_no, A.car_nm car_nm, A.car_name car_name, A.car_num,"+
								" decode(A.dlv_dt, '', '', substr(A.dlv_dt, 1, 4)||'-'||substr(A.dlv_dt, 5, 2)||'-'||substr(A.dlv_dt, 7, 2)) dlv_dt,"+
								" decode(A.init_reg_dt, '', '미등록', substr(A.init_reg_dt, 1, 4)||'-'||substr(A.init_reg_dt, 5, 2)||'-'||substr(A.init_reg_dt, 7, 2)) init_reg_dt,"+
								" A.gds_yn gds_yn, a.lpg_yn lpg_yn, B.car_off_nm bus_off, C.car_off_nm dlv_off, B.emp_nm emp_nm, decode(A.one_self,'Y','자체출고','N','영업사원출고') one_self, "+
								" A.car_f_amt, A.car_fs_amt, A.trf_amt, "+
								" decode(A.pur_bus_st,'1','자체영업','2','영업사원영업','3','실적이관','4','에이전트') pur_bus_st, A.dlv_ext "+
						" from"+
						" ("+
							" select C.car_mng_id, C.rent_mng_id, C.rent_l_cd, C.rent_dt, nvl(L.firm_nm, L.client_nm) firm_nm, L.client_nm, R.car_no, M.car_nm, R.init_reg_dt, R.car_num,"+
									" C.dlv_dt, P.gds_yn, E.lpg_yn, M.car_nm||' '||N.car_name car_name, P.one_self, "+
			                        " (E.car_fs_amt+E.car_fv_amt+E.sd_cs_amt+E.sd_cv_amt-E.dc_cs_amt-E.dc_cv_amt) car_f_amt, "+
                                    " (E.car_fs_amt+E.sd_cs_amt-E.dc_cs_amt) car_fs_amt, "+
                                    " (P.trf_amt1+P.trf_amt2+P.trf_amt3+P.trf_amt4+P.con_amt) trf_amt, "+
									" P.pur_bus_st, P.dlv_ext "+

							" from cont C, client L, car_reg R, car_pur P, car_etc E, car_nm N, car_mng M, (select * from cls_cont where cls_st in ('4','5')) S, cls_cont S2, "+
                            "      (select /*+ index(doc_settle DOC_SETTLE_IDX2  ) */ * from doc_settle where doc_st='4' and doc_step='3') d "+
							" where C.bus_id='"+user_id+"' and C.client_id = L.client_id and"+
									" C.car_mng_id = R.car_mng_id(+) and"+
								  	" C.rent_mng_id = P.rent_mng_id and"+
								  	" C.rent_l_cd = P.rent_l_cd and"+
								  	" C.rent_mng_id = E.rent_mng_id and"+
								  	" C.rent_l_cd = E.rent_l_cd and"+
								  	" E.car_id = N.car_id and E.car_seq = N.car_seq and N.car_comp_id = M.car_comp_id and N.car_cd = M.code "+
								  	" and C.rent_mng_id=S.rent_mng_id(+) and C.reg_dt=S.reg_dt(+) and S.rent_l_cd is null"+
									" and C.rent_mng_id=S2.rent_mng_id(+) and C.rent_l_cd=S2.rent_l_cd(+) "+
								  	" and C.dlv_dt is not null and nvl(S2.cls_st,'0')<>'7' and C.car_gu ='1' "+	  
								    " and C.rent_l_cd=d.doc_id "+
						" )A,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_nm , C.nm "+
							" from commi M, car_off_emp E, car_off O, (SELECT * FROM CODE WHERE c_st ='0001') c"+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '1' and"+
								  	" E.car_off_id = O.car_off_id  AND o.CAR_COMP_ID = c.code"+
						" )B,"+
						" ("+
							" select M.rent_mng_id, M.rent_l_cd, M.emp_id, E.emp_nm, O.car_off_nm, C.nm "+
							" from commi M, car_off_emp E, car_off O, (SELECT * FROM CODE WHERE c_st ='0001') c "+
							" where M.emp_id = E.emp_id and"+
									" M.agnt_st = '2' and"+
									" E.car_off_id = O.car_off_id  AND o.CAR_COMP_ID = c.code"+
						" )C"+
						" where A.rent_mng_id = B.rent_mng_id(+) and"+
								" A.rent_l_cd = B.rent_l_cd(+) and"+
							 	" A.rent_mng_id = C.rent_mng_id(+) and"+
								" A.rent_l_cd = C.rent_l_cd(+)";
		
		if(!t_wd.equals("")) {
			if(s_kd.equals("1"))		query += " and A.firm_nm like '%"+t_wd+"%'";
			else if(s_kd.equals("2"))	query += " and A.car_nm like '%"+t_wd+"%'";
			else if(s_kd.equals("3"))	query += " and A.dlv_dt like '"+t_wd+"%'";
			else if(s_kd.equals("4"))	query += " and B.emp_nm like '%"+t_wd+"%'";
			else if(s_kd.equals("5"))	query += " and C.car_off_nm like '%"+t_wd+"%'";
			else if(s_kd.equals("6"))	query += " and A.dlv_ext like '%"+t_wd+"%'";
		}
		
		if(dt.equals("0"))			query +=" and a.dlv_dt like to_char(sysdate,'YYYYMM')||'%' and A.dlv_dt <= to_char(sysdate,'yyyymmdd') ";
		else if(dt.equals("1"))		query +=" and A.dlv_dt = to_char(sysdate,'YYYYMMDD') ";
		else if(dt.equals("2"))		query +=" and a.dlv_dt like to_char(sysdate,'YYYYMM')||'%' and A.dlv_dt <= to_char(sysdate,'yyyymmdd')  ";
		else if(dt.equals("4"))		query +=" and a.dlv_dt like to_char(add_months(to_date(to_char(sysdate,'YYYYMMDD')), -1), 'yyyymm')||'%'  ";   
		else if(dt.equals("9"))		query +=" and a.dlv_dt is not null and a.car_mng_id is null and a.rent_l_cd not in ( 'S213KK5R00638' ) "; //출고는 되있는데 미등록인 경우    
		else if(dt.equals("3")){
			if(!t_st_dt.equals("") && !t_end_dt.equals("")){	
				query +=" and A.dlv_dt between replace(" + t_st_dt + ",'-','') and replace(" + t_end_dt + ",'-','') ";
			}	
		}
		
		
		query += " order by A.dlv_dt, A.init_reg_dt, A.car_mng_id ";


		try
		{
			pstmt = conn.prepareStatement(query);
		    rs = pstmt.executeQuery();
	    	ResultSetMetaData rsmd = rs.getMetaData();
    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName));
				}
				vt.add(ht);	
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[ContDatabase:getDlvStats]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}				
    }
    
	//추가이용 영업효율등록현황
	public Vector getContImAddList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

     	query = " SELECT a.gubun, a.rent_mng_id, a.rent_l_cd, a.rent_st, a.add_rent_st, a.rent_start_dt, a.rent_end_dt, a.con_mon,\r\n" + 
     			"       c.bus_id2 AS bus_id,\r\n" + 
     			"       DECODE(c.use_yn,'Y','진행','N','해지') use_yn, '임의연장' cont_st, g.user_nm, i.firm_nm, j.car_nm, j.car_no,\r\n" + 
     			"       DECODE(l.bc_est_id,'','N','Y') bc_est_yn, l.bc_s_c, l.bc_s_g, a.inv_s_amt, a.fee_s_amt,\r\n" + 
     			"       decode(c.car_gu,'1','신차','0','재리스','2','중고차') car_gu,\r\n" + 
     			"			 decode(c.car_st,'1','렌트','2','예비','3','리스','5','업무대여') car_st,\r\n" + 
     			"			 substr(p.reg_dt,0,8) reg_dt, p.reg_id  \r\n" + 
     			" FROM  \r\n" + 
     			"       (\r\n" + 
     			"       SELECT '미등록' gubun, a.rent_mng_id, a.rent_l_cd, a.rent_st, 'im'||a.rent_st AS add_rent_st, \r\n" + 
     			"             MIN(a.use_s_dt) rent_start_dt, MAX(a.use_e_dt) rent_end_dt,\r\n" + 
     			"             TO_CHAR(round(MONTHS_BETWEEN(TO_DATE(MAX(a.use_e_dt),'YYYYMMDD')+1,TO_DATE(MIN(a.use_s_dt),'YYYYMMDD')))) con_mon, 0 inv_s_amt, 0 fee_s_amt \r\n" + 
     			"       FROM   scd_fee a, fee b, fee_add c\r\n" + 
     			"       WHERE  a.tm_st2='3' AND a.tm_st1='0' AND a.bill_yn='Y'  \r\n" + 
     			"       AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd AND a.RENT_ST=b.RENT_ST-1 \r\n" + 
     			"       AND b.rent_start_dt >= '20190501'\r\n" + 
     			"       AND a.rent_mng_id=c.rent_mng_id(+) AND a.rent_l_cd=c.rent_l_cd(+) AND 'im'||a.rent_st=c.rent_st(+) AND c.rent_start_dt IS NULL \r\n" + 
     			"       GROUP BY a.rent_mng_id, a.rent_l_cd, a.rent_st\r\n" + 
     			"       HAVING MAX(a.use_e_dt) < TO_CHAR(SYSDATE,'YYYYMMDD') AND round(MONTHS_BETWEEN(TO_DATE(MAX(a.use_e_dt),'YYYYMMDD')+1,TO_DATE(MIN(a.use_s_dt),'YYYYMMDD'))) >=1\r\n" + 
     			"       UNION ALL\r\n" + 
     			"       SELECT '등록' gubun, a.rent_mng_id, a.rent_l_cd, REPLACE(a.rent_st,'im','') rent_st, a.rent_st as add_rent_st, a.rent_start_dt, a.rent_end_dt, a.con_mon, a.inv_s_amt, a.fee_s_amt \r\n" + 
     			"       FROM   fee_add a\r\n" + 
     			"       WHERE  a.rent_st LIKE 'im%'\r\n" + 
     			"       ) a, cont c, users g, client i, car_reg j, fee_etc_add l, estimate p\r\n" + 
     			" WHERE a.rent_mng_id=c.rent_mng_id AND a.rent_l_cd=c.rent_l_cd and c.car_st in ('1','3') \r\n" + 
     			"      AND c.bus_id2=g.user_id  \r\n" + 
     			"      AND c.client_id=i.client_id\r\n" + 
     			"      AND c.car_mng_id=j.car_mng_id \r\n" + 
     			"      AND a.rent_mng_id=l.rent_mng_id(+) AND a.rent_l_cd=c.rent_l_cd(+) AND a.add_rent_st=l.rent_st(+)\r\n" + 
     			"      AND l.bc_est_id=p.est_id(+) "+
				" ";
	

			if(gubun3.equals("1")) query += " and l.bc_est_id is not null";
			if(gubun3.equals("2")) query += " and l.bc_est_id is null";


			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(i.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(a.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(j.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(g.user_nm, ' '))";	
			if(s_kd.equals("14"))	what = "upper(nvl(to_char(to_date(a.rent_start_dt,'YYYYMMDD')+1,'YYYYMMDD'), ' '))";
			if(s_kd.equals("16"))	what = "upper(nvl(j.car_nm, ' '))";
			if(s_kd.equals("19"))	what = "upper(nvl(p.reg_dt, ' '))";	
			
			if(!what.equals("") && !t_wd.equals("")){
				if(t_wd.indexOf("'") != -1) t_wd = AddUtil.replace(t_wd,"'","");
				if(s_kd.equals("14"))		t_wd = AddUtil.replace(t_wd,"-","");
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}

			query += " order by l.bc_est_id, a.rent_end_dt";


		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContImAddList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }    
	
	//임의연장영업효율등록현황
	public Hashtable getContBcImCase(String rent_mng_id, String rent_l_cd, String rent_st)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Hashtable ht = new Hashtable();
		String query = "";


     	query = "       SELECT a.rent_mng_id, a.rent_l_cd, a.rent_st, 'im'||a.rent_st AS add_rent_st, \r\n" + 
     			"             MIN(a.use_s_dt) rent_start_dt, MAX(a.use_e_dt) rent_end_dt,\r\n" + 
     			"             TO_CHAR(round(MONTHS_BETWEEN(TO_DATE(MAX(a.use_e_dt),'YYYYMMDD')+1,TO_DATE(MIN(a.use_s_dt),'YYYYMMDD')))) con_mon, 0 inv_s_amt, 0 fee_s_amt \r\n" + 
     			"       FROM   scd_fee a, fee b, fee_add c\r\n" + 
     			"       WHERE  a.rent_mng_id='"+rent_mng_id+"' and a.rent_l_cd='"+rent_l_cd+"' and a.rent_st='"+rent_st+"' \n"+
     			"       and a.tm_st2='3' AND a.tm_st1='0' AND a.bill_yn='Y'  \r\n" + 
     			"       AND a.rent_mng_id=b.rent_mng_id AND a.rent_l_cd=b.rent_l_cd AND a.RENT_ST=b.RENT_ST-1 \r\n" + 
     			"       AND a.rent_mng_id=c.rent_mng_id(+) AND a.rent_l_cd=c.rent_l_cd(+) AND 'im'||a.rent_st=c.rent_st(+) AND c.rent_start_dt IS NULL \r\n" + 
     			"       GROUP BY a.rent_mng_id, a.rent_l_cd, a.rent_st\r\n" + 
				" ";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			if(rs.next())
			{								
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContBcImCase]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return ht;
		}
    }	
	
	//계약수정 : 분할청구분 스케줄 납입횟수 최고값 조회
	public int getMax_fee_tm2(String m_id, String rent_seq)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int fee_tm_count = 0;

		String query =" select max(TO_NUMBER(fee_tm)) from scd_fee "+
						" where rent_mng_id=? and rent_seq=?";


		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, m_id);
			pstmt.setString(2, rent_seq);
			rs = pstmt.executeQuery();
			if(rs.next()) 
			{
				fee_tm_count = Integer.parseInt(rs.getString(1)==null?"0":rs.getString(1));
			}
			rs.close();
			pstmt.close();
    	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getMax_fee_tm2]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return fee_tm_count;
		}
	}
	
	//고객의 진행중 계약을 fetch(20191025)
	public Vector getContListForClient(String client_id){
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

     	query = " SELECT a.rent_l_cd, a.rent_mng_id, b.rent_st, e.car_no, (d.fee_s_amt + d.fee_v_amt)AS fee_amt \n" + 
     			"        FROM cont a, client c, fee d, car_reg e, \n" +
     			"				   (SELECT rent_l_cd, rent_mng_id, MAX(to_number(rent_st)) AS rent_st FROM fee GROUP BY rent_l_cd, rent_mng_id  ) b \n"+
     			"        WHERE a.rent_l_cd = b.rent_l_cd AND a.rent_mng_id = b.rent_mng_id \n" + 
     			"            AND a.client_id = c.client_id \n" +
     			"			 AND b.rent_l_cd = d.rent_l_cd AND b.rent_mng_id = d.rent_mng_id AND b.rent_st = d.rent_st \n"+
     			"			 AND a.car_mng_id = e.car_mng_id \n"+
     			"			 AND a.use_yn = 'Y' \n"+
     			"            AND c.client_id ='"+client_id+"'"+
     			"		 ORDER BY a.rent_dt desc ";
		try{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next()){				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++){
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContListForClient]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    } 
	
	//세금계산서 및 출고일자 일괄등록 팝업 - 출고예정일자/세금계산서일자/계산서금액점검일자 일괄 수정
	public boolean updateAllCartax(String car_tax_dt, String car_amt_dt, String rent_mng_id, String rent_l_cd)
	{
		
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " UPDATE car_etc SET "+
						" car_tax_dt = replace(?,'-',''), car_amt_dt= replace(?,'-','') "+
						" WHERE RENT_MNG_ID = ? AND RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);
				
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  car_tax_dt	);
			pstmt.setString(2,  car_amt_dt	);
			pstmt.setString(3,  rent_mng_id	);
			pstmt.setString(4,  rent_l_cd	);
						
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		System.out.println("[AddContDatabase:updateAllCartax]\n"+e);
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	
	
	public boolean updateClientRepreSt(String client_repre_st, String rent_mng_id, String rent_l_cd)
	{
		
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query =  " UPDATE cont_etc SET "+
				" client_repre_st = ? "+
				" WHERE rent_mng_id = ? AND rent_l_cd = ? ";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);			
			pstmt.setString(1,  client_repre_st	);
			pstmt.setString(2,  rent_mng_id	);
			pstmt.setString(3,  rent_l_cd	);
			
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			
		} catch (Exception e) {
			System.out.println("[AddContDatabase: updateClientRepreSt]\n"+e);
			e.printStackTrace();
			flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	
	
	//계약결재/점검 구분 : 5년이상당사직원
	public int getSanctionUserType(String user_id, String user_nm)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int sanction_user_type = 0;

		String query =" SELECT 1 as cnt \r\n" + 
				"FROM   users \r\n" + 
				"WHERE  loan_st IN ('1','2') AND use_yn='Y' AND dept_id<>'1000'\r\n" + 
				"AND (user_id=? OR user_nm=?)\r\n" + 
				"AND to_char(trunc(months_between(sysdate, TO_DATE(enter_dt, 'YYYYMMDD'))/12,0),99) > 4\r\n" + 
				"ORDER BY dept_id";

		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, user_id);
			pstmt.setString(2, user_nm);
			rs = pstmt.executeQuery();
			if(rs.next()) 
			{
				sanction_user_type = Integer.parseInt(rs.getString(1)==null?"0":rs.getString(1));
			}
			rs.close();
			pstmt.close();
    	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getSanctionUserType]\n"+e);
			e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return sanction_user_type;
		}
	}
	
	//고객예약 연동 월렌트 계약취소시 스케줄 정리
	public boolean updateRmScdFeeCancel(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = "";

		query = " update scd_fee set "+
				" bill_yn='N' "+
				" where rent_mng_id=? and rent_l_cd=? and rc_dt is null and bill_yn='Y' ";

		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
	  		e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	//계약기타정보 보조번호판 발급정보 조회
	public CarSecondPlateBean getCarSecondPlate(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		CarSecondPlateBean secondPlate = new CarSecondPlateBean();
		String query = "";
		query = " select * from CAR_SECOND_PLATE where rent_mng_id=? and rent_l_cd=?";
		try
		{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
			pstmt.setString(2, rent_l_cd);
		   	rs = pstmt.executeQuery();
		
			if(rs.next())
			{
				secondPlate.setRent_mng_id			(rs.getString("RENT_MNG_ID")==null?"":rs.getString("RENT_MNG_ID"));
				secondPlate.setRent_l_cd				(rs.getString("RENT_L_CD")==null?"":rs.getString("RENT_L_CD"));
				secondPlate.setSecond_plate_yn	(rs.getString("SECOND_PLATE_YN")==null?"":rs.getString("SECOND_PLATE_YN"));
				secondPlate.setWarrant				(rs.getString("WARRANT")==null?"":rs.getString("WARRANT"));
				secondPlate.setBus_regist			(rs.getString("BUS_REGIST")==null?"":rs.getString("BUS_REGIST"));
				secondPlate.setCar_regist				(rs.getString("CAR_REGIST")==null?"":rs.getString("CAR_REGIST"));
				secondPlate.setCorp_regist			(rs.getString("CORP_REGIST")==null?"":rs.getString("CORP_REGIST"));
				secondPlate.setCorp_cert				(rs.getString("CORP_CERT")==null?"":rs.getString("CORP_CERT"));
				secondPlate.setClient_nm				(rs.getString("CLIENT_NM")==null?"":rs.getString("CLIENT_NM"));
				secondPlate.setClient_number		(rs.getString("CLIENT_NUMBER")==null?"":rs.getString("CLIENT_NUMBER"));
				secondPlate.setClient_zip				(rs.getString("CLIENT_ZIP")==null?"":rs.getString("CLIENT_ZIP"));
				secondPlate.setClient_addr			(rs.getString("CLIENT_ADDR")==null?"":rs.getString("CLIENT_ADDR"));
				secondPlate.setClient_detail_addr	(rs.getString("CLIENT_DETAIL_ADDR")==null?"":rs.getString("CLIENT_DETAIL_ADDR"));
				secondPlate.setEtc						(rs.getString("ETC")==null?"":rs.getString("ETC"));
				secondPlate.setReturn_dt				(rs.getString("RETURN_DT")==null?"":rs.getString("RETURN_DT"));
				secondPlate.setReg_id					(rs.getString("REG_ID")==null?"":rs.getString("REG_ID"));
				secondPlate.setReg_dt					(rs.getString("REG_DT")==null?"":rs.getString("REG_DT"));
				secondPlate.setUpdate_dt			(rs.getString("UPDATE_DT")==null?"":rs.getString("UPDATE_DT"));
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarSecondPlate]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return secondPlate;
		}
	}	
	
	//계약특이사항 - 보조번호판 발급 요청 등록
	public boolean insertCarSecondPlate(CarSecondPlateBean secondPlate)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " insert into CAR_SECOND_PLATE "+
							" ( " + 
								"rent_mng_id, rent_l_cd, second_plate_yn, "+ 
								"warrant, bus_regist, car_regist, corp_regist, corp_cert, " + 
								"client_nm, client_number, client_zip, client_addr, client_detail_addr, " + 
								"reg_id, reg_dt" + 
							" ) "+
							" VALUES"+
							" ( " + 
								"?, ?, ?, " + 
								"?, ?, ?, ?, ?, " + 
								"?, ?, ?, ?, ?, " + 
								"?, to_char(sysdate,'YYYYMMDD')" + 
							" ) ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
		    pstmt.setString(1,  	secondPlate.getRent_mng_id());
			pstmt.setString(2,  	secondPlate.getRent_l_cd());
			pstmt.setString(3,  	secondPlate.getSecond_plate_yn());
			pstmt.setString(4,	secondPlate.getWarrant());
			pstmt.setString(5,	secondPlate.getBus_regist());
			pstmt.setString(6,	secondPlate.getCar_regist());
			pstmt.setString(7,	secondPlate.getCorp_regist());
			pstmt.setString(8,	secondPlate.getCorp_cert());
			pstmt.setString(9,	secondPlate.getClient_nm());
			pstmt.setString(10,	secondPlate.getClient_number());
			pstmt.setString(11,	secondPlate.getClient_zip());
			pstmt.setString(12,	secondPlate.getClient_addr());
			pstmt.setString(13,	secondPlate.getClient_detail_addr());
			pstmt.setString(14,	secondPlate.getReg_id());
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:insertCarSecondPlate]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}	

	//계약특이사항 - 보조번호판 발급 요청 수정
	public boolean updateCarSecondPlate(CarSecondPlateBean secondPlate)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_SECOND_PLATE set "+
								" second_plate_yn = ?, "+
								" warrant = ?, "+
								" bus_regist = ?, "+
								" car_regist	 = ?, "+
								" corp_regist = ?, "+
								" corp_cert	= ?, "+
								" client_nm	= ?, "+
								" client_number	= ?, "+
								" client_zip	= ?, "+
								" client_addr	= ?, "+
								" client_detail_addr	= ?, "+
								" update_dt = to_char(sysdate,'YYYYMMDD') "+
							" where RENT_MNG_ID = ? and RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);

			pstmt = conn.prepareStatement(query);
			pstmt.setString(1,  	secondPlate.getSecond_plate_yn());
			pstmt.setString(2,	secondPlate.getWarrant());
			pstmt.setString(3,	secondPlate.getBus_regist());
			pstmt.setString(4,	secondPlate.getCar_regist());
			pstmt.setString(5,	secondPlate.getCorp_regist());
			pstmt.setString(6,	secondPlate.getCorp_cert());
			pstmt.setString(7,	secondPlate.getClient_nm());
			pstmt.setString(8,	secondPlate.getClient_number());
			pstmt.setString(9,	secondPlate.getClient_zip());
			pstmt.setString(10,	secondPlate.getClient_addr());
			pstmt.setString(11,	secondPlate.getClient_detail_addr());
		    pstmt.setString(12, secondPlate.getRent_mng_id());
			pstmt.setString(13, secondPlate.getRent_l_cd());
		    pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
		    
	  	} catch (Exception e) {
			System.out.println("[AddContDatabase:updateCarSecondPlate]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	//보조번호판관리 - 보조번호판 발급 요청 수정
	public boolean updateCarSecondPlateMng(String second_plate_yn, String return_dt, String etc, String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		boolean flag = true;
		String query = " update CAR_SECOND_PLATE set "+
				" second_plate_yn = ?, "+
				" return_dt = replace(?, '-', ''), "+
				" etc = ?, "+
				" update_dt = to_char(sysdate,'YYYYMMDD') "+
				" where RENT_MNG_ID = ? and RENT_L_CD = ? ";
		try 
		{
			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, second_plate_yn);
			pstmt.setString(2, return_dt);
			pstmt.setString(3, etc);
			pstmt.setString(4, rent_mng_id);
			pstmt.setString(5, rent_l_cd);
			pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			
		} catch (Exception e) {
			System.out.println("[AddContDatabase:updateCarSecondPlateMng]\n"+e);
			e.printStackTrace();
			flag = false;
			conn.rollback();
		} finally {
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	//보조번호판 발급 목록
	public Vector getCarSecondPlateList(String s_kd, String t_wd, String st_dt, String end_dt, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " SELECT " +
						" a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.use_yn, " +
						" b.firm_nm, b.client_nm, " +
						" f.car_num, f.car_no, j.car_nm, f.init_reg_dt, f.car_doc_no, " +
						" s.second_plate_yn, s.warrant, s.bus_regist, s.car_regist, s.corp_regist, s.corp_cert, " +
						" s.client_nm as re_client_nm, s.client_number as re_client_number, " +
						" s.client_zip, s.client_addr, s.client_detail_addr, " +
					  	" s.etc, s.return_dt, s.reg_id, u.user_nm AS reg_nm, " +
					  	" s.reg_dt, s.update_dt " +
					" FROM " +
						" CONT a, CLIENT b, CONT_ETC c, CAR_REG f, CAR_ETC h, CAR_NM i, CAR_MNG j, CAR_SECOND_PLATE s, USERS u " +
					" WHERE " +
						" a.client_id=b.client_id " +
						" and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd " +
						" and a.car_mng_id=f.car_mng_id(+) " +
						" and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd " +
						" and a.rent_mng_id=s.rent_mng_id and a.rent_l_cd=s.rent_l_cd " +
						" and s.reg_id=u.user_id " + 
						" and h.car_id=i.car_id and h.car_seq=i.car_seq " + 
						" and i.car_comp_id=j.car_comp_id and i.car_cd=j.code ";
		
		//등록일에따른 날짜 검색 조건
		if(gubun1.equals("1")) {			
			//당일
			if(gubun2.equals("1")) query += " and s.reg_dt=to_char(sysdate,'YYYYMMDD') ";
			//전일
			if(gubun2.equals("2")) query += " and s.reg_dt=to_char(sysdate-1, 'YYYYMMDD') ";
			//당월
			if(gubun2.equals("3")) query += " and substr(s.reg_dt, 1, 6)=to_char(sysdate,'YYYYMM') ";
			//전월
			if(gubun2.equals("4")) query += " and substr(s.reg_dt, 1, 6)=to_char(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') ";
			//기간
			if(gubun2.equals("5")) query += " and s.reg_dt between '"+st_dt+"' and '"+end_dt+"' ";
		}
		
		//보조번호판 발급요청 상태
		if(gubun3.equals("1")) query += " and s.second_plate_yn = 'Y' ";
		if(gubun3.equals("2")) query += " and s.second_plate_yn = 'R' ";
		if(gubun3.equals("3")) query += " and s.second_plate_yn = 'N' ";
		
		//검색조건
		if (!t_wd.equals("")) {
			if(s_kd.equals("1")) query += " and b.firm_nm like '%"+ t_wd +"%' ";
			if(s_kd.equals("2")) query += " and a.rent_l_cd = '"+ t_wd +"' ";
			if(s_kd.equals("3")) query += " and f.car_no like '%"+ t_wd +"%' ";
			if(s_kd.equals("4")) query += " and f.car_num = '"+ t_wd +"' ";
		}

		query += " order by s.reg_dt ";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarSecondPlateList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }
	
	//계약 수정 : 자동이체 delete
	public boolean deleteContCmsMng(ContCmsBean bean)
	{
		getConnection();
		PreparedStatement pstmt = null;
		PreparedStatement pstmt3 = null;
		ResultSet rs = null;
		boolean flag = true;
		String query = "";
		String bank_cd = "";
		String cms_bk = "";
		
		query = " delete from cms_mng "+
				" where rent_mng_id=? and rent_l_cd=? and seq=?";
		
		try{

			conn.setAutoCommit(false);
			
			pstmt = conn.prepareStatement(query);		
			pstmt.setString(1, bean.getRent_mng_id());	
			pstmt.setString(2, bean.getRent_l_cd());
			pstmt.setString(3, bean.getSeq());				
		    pstmt.executeUpdate();	
			pstmt.close();

			conn.commit();

		}catch(Exception e){
			System.out.println("[AddContDatabase:deleteContCmsMng]\n"+e);
			e.printStackTrace();
	  		flag = false;
			conn.rollback();
		}finally{
			try{
				conn.setAutoCommit(true);
				if(pstmt != null)	pstmt.close();
				if(rs != null )		rs.close();
				if(pstmt3 != null)	pstmt3.close();
			}catch(Exception ignore){}
			closeConnection();
			return flag;
		}
	}
	
	//기본탁송료 cm_bean.getCar_comp_id(), cm_bean.getCode(), pur.getDlv_ext(), pur.getUdt_st(), rent_l_cd
	public Vector getCarPurBaseConsCost(String car_comp_id, String car_cd, String dlv_ext, String udt_st, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " SELECT a.cons_st, a.cons_amt1, b.dlv_dt\r\n"
				+ "FROM   car_pur a, cont b, car_etc c, car_nm d, (SELECT * FROM doc_settle  WHERE doc_st='4' AND doc_step='3') e\r\n"
				+ "WHERE  a.cons_st='1' and a.dlv_ext='"+dlv_ext+"' AND a.udt_st='"+udt_st+"'\r\n"
				+ "AND a.rent_l_cd=b.rent_l_cd AND b.rent_start_dt IS NOT NULL \r\n"
				+ "AND b.rent_l_cd=c.rent_l_cd \r\n"
				+ "AND c.car_id=d.car_id AND c.car_seq=d.car_seq\r\n"
				+ "AND d.car_comp_id='"+car_comp_id+"' AND d.car_cd='"+car_cd+"'\r\n"
				+ "AND a.rent_l_cd=e.doc_id\r\n"
				+ "AND a.rent_l_cd<>'"+rent_l_cd+"'\r\n"
				+ "ORDER BY b.dlv_dt desc ";
		

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getCarPurBaseConsCost]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }
	
	//출고전대차 리스트
	public Vector getTaechaList(String rent_mng_id, String rent_l_cd)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

		query = " SELECT * from taecha WHERE rent_mng_id='"+rent_mng_id+"' AND rent_l_cd='"+rent_l_cd+"' order by no";

		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getTaechaList]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }

	// 미결 계약 검색 : 전자문서 발송 전용
	public Vector getHoldContListForEdoc(String s_kd, String t_wd, String gubun2, String document_st, String document_type){
		
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " select  "+
					"        a.rent_mng_id, a.rent_l_cd, a.car_mng_id, a.client_id, a.brch_id, c.mng_br_id,"+
					"        b.firm_nm, nvl(d.ext_agnt,a.bus_id) as bus_id, decode(d.rent_st,'1',c.bus_agnt_id,q.bus_agnt_id) bus_agnt_id, "+
					"        a.bus_id2, nvl(d.rent_dt,a.rent_dt) rent_dt, nvl(c.rent_suc_dt,o.cls_dt) rent_suc_dt, "+
					"        decode(a.rent_st,'1','신규','2','연장','3','대차','4','증차','5','연장','6','재리스','7','재리스') rent_st, "+
					"        decode(a.bus_st, '1','인터넷','2','영업사원','3','업체소개','4','카달로그','5','전화상담','6','기존업체','7','에이젼트','8','모바일') bus_st,"+
					"        decode(nvl(a.car_gu,a.reg_id),'1','신차','0','재리스','2','중고차') car_gu,"+
					"        decode(a.car_st,'1','렌트','2',decode(a.car_gu,'2','중고차','예비'),'3','리스','4','월렌트','5','업무대여') car_st, "+
					"        decode(d.rent_way,'1','일반식','2','맞춤식','3','기본식') rent_way,"+
					"        decode(d.rent_st,'1','','연장') ext_st,"+
  					"        decode(d.rent_st,'1','',decode(c.suc_rent_st,d.rent_st,'계약승계',decode(sign(to_date(d.rent_dt,'YYYYMMDD')-to_date(o.cls_dt,'YYYYMMDD')),1,'연장',0,'연장',''))) ext_st2, \n"+
					"        decode(o.cls_st,'4','차종변경','5','계약승계') cng_st,"+
					"        b.firm_nm, b.client_nm, e.r_site as site_nm,"+
					"        f.car_no, f.init_reg_dt, f.car_doc_no, f.car_num, "+
					"        nvl(ec.nm, ec2.nm) car_ext,"+
					"        g.rpt_no, j.car_nm,"+
					"        k.user_nm as bus_nm, nvl(qu.user_nm,l.user_nm) as bus_agnt_nm, n.user_nm as bus_nm2, "+
			        "        d.rent_st as fee_rent_st,"+
					"        decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') sanction_st, "+
					"        a.reg_step, d.rent_start_dt, d.rent_end_dt "+
					" from   cont a, client b, cont_etc c, fee d, client_site e, car_reg f, car_pur g, car_etc h, car_nm i, car_mng j, users k, users l, users n, "+
					"        (select rent_mng_id, reg_dt, cls_dt, cls_st from cls_cont where cls_st in ('4','5')) o,"+
					"        (select rent_mng_id, rent_l_cd, max(to_number(rent_st)) rent_st from fee group by rent_mng_id, rent_l_cd) p, fee_etc q, users qu,"+
					"        (select * from code where c_st='0032') ec, (select * from code WHERE c_st='0032') ec2 "+
					" where "+
					"        ( (a.use_yn is null) or (a.use_yn='Y' and (o.cls_st in ('4','5') or d.rent_st>'1') and d.rent_dt > '20071013' and nvl(to_char(a.sanction_date,'YYYYMMDD'),'00000000') < d.rent_dt) ) "+
					"        and a.car_st<>'4' "+
					"        and a.client_id=b.client_id"+
					"        and a.rent_mng_id=c.rent_mng_id and a.rent_l_cd=c.rent_l_cd "+
					"        and a.rent_mng_id=d.rent_mng_id and a.rent_l_cd=d.rent_l_cd"+
					"        and a.client_id=e.client_id(+) and a.r_site=e.seq(+)"+
					"        and a.car_mng_id=f.car_mng_id(+)"+
					"        and a.rent_mng_id=g.rent_mng_id and a.rent_l_cd=g.rent_l_cd"+
					"        and a.rent_mng_id=h.rent_mng_id and a.rent_l_cd=h.rent_l_cd"+
					"        and h.car_id=i.car_id and h.car_seq=i.car_seq and i.car_comp_id=j.car_comp_id and i.car_cd=j.code"+
				    "        AND ((d.ext_agnt is null and a.bus_id=k.user_id) or (d.ext_agnt is not null and d.ext_agnt=k.user_id)) \n"+
					"        and c.bus_agnt_id=l.user_id(+)"+
					"        and a.bus_id2=n.user_id(+)"+
					"        and a.rent_mng_id=o.rent_mng_id(+) and a.reg_dt=o.reg_dt(+)"+
					"        and d.rent_mng_id=p.rent_mng_id and d.rent_l_cd=p.rent_l_cd and d.rent_st=p.rent_st"+
					"        and d.rent_mng_id=q.rent_mng_id and d.rent_l_cd=q.rent_l_cd and d.rent_st=q.rent_st"+
					"        and q.bus_agnt_id=qu.user_id(+) and f.car_ext = ec.nm_cd(+) and h.car_ext = ec2.nm_cd(+)"+
					" ";

			if(!gubun2.equals("")) query += " and (c.mng_br_id='"+gubun2+"' OR (c.mng_br_id is null and a.brch_id='"+gubun2+"' ))";

			
			if(document_st.equals("1")){
				if(document_type.equals("1")){	// 신규, 증차, 대차
					query += " AND a.car_st <> '2' AND d.rent_st = '1' AND ( a.car_st = '5' OR  a.rent_st IN ('1', '4', '3') ) "; 
				} else if(document_type.equals("2")){		// 승계
					query += " AND a.car_st <> '2' AND o.cls_st = '5' ";
				} else if(document_type.equals("3")){		// 연장
					query += " AND a.car_st <> '2' AND d.rent_st<>'1' ";
				}
			}

			
			String what = "";

			if(s_kd.equals("1"))	what = "upper(b.firm_nm)";
			if(s_kd.equals("2"))	what = "a.rent_l_cd";	
			if(s_kd.equals("3"))	what = "f.car_no";		
			if(s_kd.equals("4"))	what = "f.car_doc_no";	
			if(s_kd.equals("5"))	what = "f.car_num";		
			if(s_kd.equals("6"))	what = "g.rpt_no";	
			if(s_kd.equals("7"))	what = "a.brch_id";	
			if(s_kd.equals("8"))	what = "k.user_nm";		
			if(s_kd.equals("9"))	what = "j.car_nm||i.car_name";	
			if(s_kd.equals("10"))	what = "a.reg_dt";		
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				if(s_kd.equals("1")||s_kd.equals("2")||s_kd.equals("5")||s_kd.equals("6")){	
					query += " and "+what+" like upper('%"+t_wd+"%') ";				
				}else{
					query += " and "+what+" like '%"+t_wd+"%' ";				
				}
			}

			query += " order by decode(length(a.sanction),8,decode(sign(to_date(a.sanction,'YYYYMMDD')-to_date(DECODE(sign(to_date(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD')-to_date(nvl(d.rent_dt,a.rent_dt),'YYYYMMDD')),-1,TO_CHAR(SYSDATE,'YYYYMMDD'),nvl(d.rent_dt,a.rent_dt)),'YYYYMMDD')),-1,'미결',1,'요청',0,'요청','미결'),'미결') desc, "+
					 "          decode(o.cls_st,'',nvl(d.rent_dt,a.rent_dt), decode(sign(to_date(nvl(c.rent_suc_dt,o.cls_dt),'YYYYMMDD')-to_date(d.rent_dt,'YYYYMMDD')),-1,d.rent_dt,nvl(c.rent_suc_dt,o.cls_dt))) desc,"+
					 "          a.rent_mng_id";
		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
	    	    	
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

			

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getHoldContList_20160614]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }
	
	
	// 최초 계약일 조회
	public String getFirstRentDt(String rent_mng_id)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;		
		String first_rent_dt = "";
		
		String query = " SELECT MIN(rent_dt) FROM CONT " +
						" WHERE rent_mng_id = ? " ;

		try{
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, rent_mng_id);
		    rs = pstmt.executeQuery();
    	
			if(rs.next())
			{
				first_rent_dt = rs.getString(1);
			}
		    rs.close();
            pstmt.close();	
		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getFirstRentDt]\n"+e);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null )		rs.close();
                if(pstmt != null)	pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return first_rent_dt;
		}			
	}
	
	//계출관리-출고전대차미등록현황
	public Vector getContTaecha2StatList(String s_kd, String t_wd, String andor, String gubun1, String gubun2, String gubun3)
	{
		getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Vector vt = new Vector();
		String query = "";

			query = " SELECT a.car_mng_id AS d_car_mng_id, e.car_no, e.car_nm, f.firm_nm, \r\n"
					+ "               DECODE(a.use_st,'1','예약','2','배차','3','반차','4','정산') use_st,\r\n"
					+ "               SUBSTR(a.deli_dt,1,8) deli_dt, SUBSTR(a.ret_dt,1,8) ret_dt,\r\n"
					+ "               TRUNC(to_number(to_date(SUBSTR(a.ret_dt,1,8),'YYYYMMDD')-to_date(SUBSTR(a.deli_dt,1,8),'YYYYMMDD'))) days,\r\n"
					+ "               b.rent_mng_id, b.rent_l_cd, b.use_yn, b.car_st, \r\n"
					+ "               DECODE(b.use_yn,'Y','진행','N','해지','대기') use_yn_nm,\r\n"
					+ "               f2.firm_nm r_firm_nm, \r\n"
					+ "               b.rent_dt,\r\n"
					+ "               DECODE(b.car_gu,'1','신차','0','재리스') car_gu, \r\n"
					+ "               DECODE(b.car_mng_id,'','미등록',e2.car_no) r_car_no,                \r\n"
					+ "               g.rent_start_dt, h.user_nm, \r\n"
					+ "               DECODE(d.cls_st,'1','계약만기','2','중도해지','7','출고전해지','5','계약승계',d.cls_st) cls_st, \r\n"
					+ "               d.cls_dt,\r\n"
					+ "               i.cnt, i.amt                                 \r\n"
					+ "        FROM   rent_cont a, cont b, taecha c, cls_cont d, car_reg e, car_reg e2, client f, client f2, fee g, users h, \r\n"
					+ "               (SELECT rent_l_cd, COUNT(0) cnt, SUM(fee_s_amt+fee_v_amt) amt FROM scd_fee WHERE tm_st2='2' AND bill_yn='Y' GROUP BY rent_l_cd) i\r\n"
					+ "        WHERE  a.rent_st='10' AND a.use_st NOT IN ('1','5') AND a.rent_dt >= '20200101' \r\n"
					+ "        AND a.deli_dt IS NOT NULL \r\n"
					+ "        AND a.sub_l_cd=b.rent_l_cd and b.car_st in ('1','3') \r\n"
					+ "        AND a.sub_l_cd=c.rent_l_cd(+) AND c.car_mng_id IS NULL\r\n"
					+ "        AND b.rent_l_cd=d.RENT_L_CD(+)\r\n"
					+ "        AND a.car_mng_id=e.car_mng_id\r\n"
					+ "        AND b.car_mng_id=e2.car_mng_id(+)\r\n"
					+ "        AND a.cust_id=f.client_id\r\n"
					+ "        AND b.client_id=f2.client_id\r\n"
					+ "        AND (a.ret_dt IS NULL OR substr(a.deli_dt,1,8)<substr(a.ret_dt,1,8))\r\n"
					+ "        AND b.rent_l_cd=g.rent_l_cd AND g.RENT_ST='1'\r\n"
					+ "        AND b.BUS_ID=h.user_id \r\n"
					+ "        AND b.rent_l_cd=i.RENT_L_CD(+) "+					
					" ";

	 
			//계약상태
			if(gubun1.equals("Y")) query += " and b.use_yn='Y'";
			if(gubun1.equals("N")) query += " and b.use_yn='N'";
			if(gubun1.equals("0")) query += " and b.use_yn is null";

			String what = "";

			if(s_kd.equals("1"))	what = "upper(nvl(f.firm_nm||f2.firm_nm, ' '))";
			if(s_kd.equals("2"))	what = "upper(nvl(b.rent_l_cd, ' '))";	
			if(s_kd.equals("3"))	what = "upper(nvl(e2.car_no, ' '))";		
			if(s_kd.equals("4"))	what = "upper(nvl(e.car_no, ' '))";		
			if(s_kd.equals("8"))	what = "upper(nvl(h.user_nm, ' '))";	
			
			if(!s_kd.equals("") && !t_wd.equals("")){
				query += " and "+what+" like upper('%"+t_wd+"%') ";
			}	

			query += " ORDER BY 6 DESC ";



		try 
		{
			pstmt = conn.prepareStatement(query);
	    	rs = pstmt.executeQuery();
    		ResultSetMetaData rsmd = rs.getMetaData();    	
			while(rs.next())
			{				
				Hashtable ht = new Hashtable();
				for(int pos =1; pos <= rsmd.getColumnCount();pos++)
				{
					 String columnName = rsmd.getColumnName(pos);
					 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
				}
				vt.add(ht);	
			}
		    rs.close();
            pstmt.close();	

		} catch (SQLException e) {
			System.out.println("[AddContDatabase:getContTaecha2StatList]\n"+e);
			System.out.println("[AddContDatabase:getContTaecha2StatList]\n"+query);
	  		e.printStackTrace();
		} finally {
			try{
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
			}catch(Exception ignore){}
			closeConnection();
			return vt;
		}
    }
	
		//임의연장 입금여부
		public int getFeeImScdPayCnt(String rent_mng_id, String rent_l_cd, String rent_st, String im_seq)
		{
			getConnection();
			PreparedStatement pstmt = null;
			ResultSet rs = null;		
			String query = "";
			int count = 0;

			query = " SELECT count(0) as cnt "+
	                " FROM   scd_fee "+
	                " WHERE  rent_mng_id='"+rent_mng_id+"' AND rent_l_cd='"+rent_l_cd+"' and pay_cng_cau LIKE '%임의연장%'||'"+rent_st+"'||'"+im_seq+"' "+
		            " and bill_yn='Y' and rc_dt is not null ";

			try {
									
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
				if(rs.next())
				{								
					count = rs.getInt("cnt");
				}
			    rs.close();
	            pstmt.close();	
			} catch (SQLException e) {
				System.out.println("[AddContDatabase:getFeeImScdPayCnt]\n"+e);
		  		e.printStackTrace();
			} finally {
				try{
	                if(rs != null )		rs.close();
	                if(pstmt != null)	pstmt.close();
				}catch(Exception ignore){}
				closeConnection();
				return count;
			}		
		}
		
		//임의연장 계산서발행여부
		public Hashtable getFeeImTaxRegCnt(String rent_mng_id, String rent_l_cd, String rent_st, String im_seq)
		{
			getConnection();
			PreparedStatement pstmt = null;
			ResultSet rs = null;		
			String query = "";
			int count = 0;
			Hashtable ht = new Hashtable();

			query = " SELECT DECODE(e.item_id,'',0,1) cnt1, DECODE(b.item_id,'',0,1) cnt2\r\n"
					+ "FROM   scd_fee a, \r\n"
					+ "       (SELECT c.rent_l_cd, c.tm, c.item_id FROM tax_item_list c, tax_item d WHERE c.rent_l_cd='"+rent_l_cd+"' AND c.item_id=d.item_id AND NVL(d.use_yn,'Y')='Y') e,\r\n"
					+ "       (SELECT rent_l_cd, fee_tm, item_id FROM tax WHERE rent_l_cd='"+rent_l_cd+"' AND tax_st<>'C') b\r\n"
					+ "WHERE \r\n"
					+ "a.rent_l_cd='"+rent_l_cd+"' AND a.pay_cng_cau LIKE '%임의연장%'||'"+rent_st+"'||'"+im_seq+"' AND bill_yn='Y'  \r\n"
					+ "AND a.rent_l_cd=e.rent_l_cd(+) AND a.fee_tm=e.tm(+)\r\n"
					+ "AND a.rent_l_cd=b.rent_l_cd(+) AND a.fee_tm=b.fee_tm(+) ";

			try {
						
				pstmt = conn.prepareStatement(query);
		    	rs = pstmt.executeQuery();
	    		ResultSetMetaData rsmd = rs.getMetaData();    	
				if(rs.next())
				{									
					for(int pos =1; pos <= rsmd.getColumnCount();pos++)
					{
						 String columnName = rsmd.getColumnName(pos);
						 ht.put(columnName, (rs.getString(columnName))==null?"":rs.getString(columnName).trim());
					}						
				}
			    rs.close();
	            pstmt.close();	
	            				
			} catch (SQLException e) {
				System.out.println("[AddContDatabase:getFeeImTaxRegCnt]\n"+e);
		  		e.printStackTrace();
			} finally {
				try{
	                if(rs != null )		rs.close();
	                if(pstmt != null)	pstmt.close();
				}catch(Exception ignore){}
				closeConnection();
				return ht;
			}		
		}	
		
		//임의연장 삭제
		public boolean deleteFeeIm(String rent_mng_id, String rent_l_cd, String rent_st, String im_seq)
		{
			getConnection();
			PreparedStatement pstmt = null;
			PreparedStatement pstmt2 = null;
			boolean flag = true;
			String query = "";
			String query2 = "";
			
			query = " delete from fee_im where rent_mng_id=? and rent_l_cd=? and rent_st=? and im_seq=?";
			query2 = " delete from scd_fee where rent_mng_id=? and rent_l_cd=? and rent_st=? and tm_st2='3' and pay_cng_cau like '%임의연장%'||'"+rent_st+"'||'"+im_seq+"' and rc_dt is null ";
			
			try{

				conn.setAutoCommit(false);
				
				pstmt = conn.prepareStatement(query);		
				pstmt.setString(1, rent_mng_id);	
				pstmt.setString(2, rent_l_cd);
				pstmt.setString(3, rent_st);				
				pstmt.setString(4, im_seq);
			    pstmt.executeUpdate();	
				pstmt.close();
				
				pstmt2 = conn.prepareStatement(query2);		
				pstmt2.setString(1, rent_mng_id);	
				pstmt2.setString(2, rent_l_cd);
				pstmt2.setString(3, rent_st);				
			    pstmt2.executeUpdate();	
				pstmt2.close();

				conn.commit();

			}catch(Exception e){
				System.out.println("[AddContDatabase:deleteFeeIm]\n"+e);
				e.printStackTrace();
		  		flag = false;
				conn.rollback();
			}finally{
				try{
					conn.setAutoCommit(true);
					if(pstmt != null)	pstmt.close();
					if(pstmt2 != null)	pstmt2.close();					
				}catch(Exception ignore){}
				closeConnection();
				return flag;
			}
		}		
	
}
